// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cppcontainers_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vector_assign_i
void vector_assign_i(Rcpp::XPtr<std::vector<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_vector_assign_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    vector_assign_i(x, v);
    return R_NilValue;
END_RCPP
}
// vector_assign_d
void vector_assign_d(Rcpp::XPtr<std::vector<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_vector_assign_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    vector_assign_d(x, v);
    return R_NilValue;
END_RCPP
}
// vector_assign_s
void vector_assign_s(Rcpp::XPtr<std::vector<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_vector_assign_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    vector_assign_s(x, v);
    return R_NilValue;
END_RCPP
}
// vector_assign_b
void vector_assign_b(Rcpp::XPtr<std::vector<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_vector_assign_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    vector_assign_b(x, v);
    return R_NilValue;
END_RCPP
}
// deque_assign_i
void deque_assign_i(Rcpp::XPtr<std::deque<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_deque_assign_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    deque_assign_i(x, v);
    return R_NilValue;
END_RCPP
}
// deque_assign_d
void deque_assign_d(Rcpp::XPtr<std::deque<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_deque_assign_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    deque_assign_d(x, v);
    return R_NilValue;
END_RCPP
}
// deque_assign_s
void deque_assign_s(Rcpp::XPtr<std::deque<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_deque_assign_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    deque_assign_s(x, v);
    return R_NilValue;
END_RCPP
}
// deque_assign_b
void deque_assign_b(Rcpp::XPtr<std::deque<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_deque_assign_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    deque_assign_b(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_assign_i
void forward_list_assign_i(Rcpp::XPtr<std::forward_list<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_forward_list_assign_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    forward_list_assign_i(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_assign_d
void forward_list_assign_d(Rcpp::XPtr<std::forward_list<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_forward_list_assign_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    forward_list_assign_d(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_assign_s
void forward_list_assign_s(Rcpp::XPtr<std::forward_list<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_forward_list_assign_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    forward_list_assign_s(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_assign_b
void forward_list_assign_b(Rcpp::XPtr<std::forward_list<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_forward_list_assign_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    forward_list_assign_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_assign_i
void list_assign_i(Rcpp::XPtr<std::list<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_list_assign_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    list_assign_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_assign_d
void list_assign_d(Rcpp::XPtr<std::list<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_list_assign_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    list_assign_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_assign_s
void list_assign_s(Rcpp::XPtr<std::list<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_list_assign_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    list_assign_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_assign_b
void list_assign_b(Rcpp::XPtr<std::list<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_list_assign_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    list_assign_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_at_i_i
int map_at_i_i(Rcpp::XPtr<std::map<int, int> > x, const int key);
RcppExport SEXP _cppcontainers_map_at_i_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_i_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_i_d
double map_at_i_d(Rcpp::XPtr<std::map<int, double> > x, const int key);
RcppExport SEXP _cppcontainers_map_at_i_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_i_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_i_s
std::string map_at_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const int key);
RcppExport SEXP _cppcontainers_map_at_i_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_i_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_i_b
bool map_at_i_b(Rcpp::XPtr<std::map<int, bool> > x, const int key);
RcppExport SEXP _cppcontainers_map_at_i_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_i_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_d_i
int map_at_d_i(Rcpp::XPtr<std::map<double, int> > x, const double key);
RcppExport SEXP _cppcontainers_map_at_d_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_d_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_d_d
double map_at_d_d(Rcpp::XPtr<std::map<double, double> > x, const double key);
RcppExport SEXP _cppcontainers_map_at_d_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_d_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_d_s
std::string map_at_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const double key);
RcppExport SEXP _cppcontainers_map_at_d_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_d_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_d_b
bool map_at_d_b(Rcpp::XPtr<std::map<double, bool> > x, const double key);
RcppExport SEXP _cppcontainers_map_at_d_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_d_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_s_i
int map_at_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_at_s_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_s_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_s_d
double map_at_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_at_s_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_s_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_s_s
std::string map_at_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_at_s_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_s_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_s_b
bool map_at_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_at_s_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_s_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_b_i
int map_at_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool key);
RcppExport SEXP _cppcontainers_map_at_b_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_b_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_b_d
double map_at_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool key);
RcppExport SEXP _cppcontainers_map_at_b_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_b_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_b_s
std::string map_at_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool key);
RcppExport SEXP _cppcontainers_map_at_b_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_b_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_at_b_b
bool map_at_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool key);
RcppExport SEXP _cppcontainers_map_at_b_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_at_b_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_i_i
int unordered_map_at_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_at_i_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_i_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_i_d
double unordered_map_at_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_at_i_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_i_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_i_s
std::string unordered_map_at_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_at_i_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_i_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_i_b
bool unordered_map_at_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_at_i_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_i_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_d_i
int unordered_map_at_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_at_d_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_d_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_d_d
double unordered_map_at_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_at_d_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_d_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_d_s
std::string unordered_map_at_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_at_d_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_d_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_d_b
bool unordered_map_at_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_at_d_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_d_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_s_i
int unordered_map_at_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_at_s_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_s_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_s_d
double unordered_map_at_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_at_s_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_s_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_s_s
std::string unordered_map_at_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_at_s_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_s_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_s_b
bool unordered_map_at_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_at_s_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_s_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_b_i
int unordered_map_at_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_at_b_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_b_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_b_d
double unordered_map_at_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_at_b_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_b_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_b_s
std::string unordered_map_at_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_at_b_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_b_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_at_b_b
bool unordered_map_at_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_at_b_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_at_b_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// vector_at_i
int vector_at_i(Rcpp::XPtr<std::vector<int> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_at_i(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_at_i(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_at_d
double vector_at_d(Rcpp::XPtr<std::vector<double> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_at_d(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_at_d(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_at_s
std::string vector_at_s(Rcpp::XPtr<std::vector<std::string> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_at_s(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_at_s(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_at_b
bool vector_at_b(Rcpp::XPtr<std::vector<bool> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_at_b(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_at_b(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_at_i
int deque_at_i(Rcpp::XPtr<std::deque<int> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_at_i(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_at_i(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_at_d
double deque_at_d(Rcpp::XPtr<std::deque<double> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_at_d(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_at_d(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_at_s
std::string deque_at_s(Rcpp::XPtr<std::deque<std::string> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_at_s(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_at_s(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_at_b
bool deque_at_b(Rcpp::XPtr<std::deque<bool> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_at_b(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_at_b(x, index));
    return rcpp_result_gen;
END_RCPP
}
// queue_back_i
int queue_back_i(Rcpp::XPtr<std::queue<int> > x);
RcppExport SEXP _cppcontainers_queue_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_back_i(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_back_d
double queue_back_d(Rcpp::XPtr<std::queue<double> > x);
RcppExport SEXP _cppcontainers_queue_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_back_d(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_back_s
std::string queue_back_s(Rcpp::XPtr<std::queue<std::string> > x);
RcppExport SEXP _cppcontainers_queue_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_back_s(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_back_b
bool queue_back_b(Rcpp::XPtr<std::queue<bool> > x);
RcppExport SEXP _cppcontainers_queue_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_back_b(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_back_i
int vector_back_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_back_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_back_d
double vector_back_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_back_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_back_s
std::string vector_back_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_back_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_back_b
bool vector_back_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_back_b(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_back_i
int deque_back_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_back_i(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_back_d
double deque_back_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_back_d(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_back_s
std::string deque_back_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_back_s(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_back_b
bool deque_back_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_back_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_back_i
int list_back_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_back_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_back_d
double list_back_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_back_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_back_s
std::string list_back_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_back_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_back_b
bool list_back_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_back_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_i
std::size_t unordered_set_bucket_count_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_d
std::size_t unordered_set_bucket_count_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_s
std::size_t unordered_set_bucket_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_bucket_count_b
std::size_t unordered_set_bucket_count_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_bucket_count_i
std::size_t unordered_multiset_bucket_count_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_bucket_count_d
std::size_t unordered_multiset_bucket_count_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_bucket_count_s
std::size_t unordered_multiset_bucket_count_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_bucket_count_b
std::size_t unordered_multiset_bucket_count_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_i_i
std::size_t unordered_map_bucket_count_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_i_d
std::size_t unordered_map_bucket_count_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_i_s
std::size_t unordered_map_bucket_count_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_i_b
std::size_t unordered_map_bucket_count_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_d_i
std::size_t unordered_map_bucket_count_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_d_d
std::size_t unordered_map_bucket_count_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_d_s
std::size_t unordered_map_bucket_count_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_d_b
std::size_t unordered_map_bucket_count_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_s_i
std::size_t unordered_map_bucket_count_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_s_d
std::size_t unordered_map_bucket_count_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_s_s
std::size_t unordered_map_bucket_count_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_s_b
std::size_t unordered_map_bucket_count_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_b_i
std::size_t unordered_map_bucket_count_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_b_d
std::size_t unordered_map_bucket_count_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_b_s
std::size_t unordered_map_bucket_count_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bucket_count_b_b
std::size_t unordered_map_bucket_count_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_bucket_count_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bucket_count_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_i_i
std::size_t unordered_multimap_bucket_count_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_i_d
std::size_t unordered_multimap_bucket_count_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_i_s
std::size_t unordered_multimap_bucket_count_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_i_b
std::size_t unordered_multimap_bucket_count_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_d_i
std::size_t unordered_multimap_bucket_count_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_d_d
std::size_t unordered_multimap_bucket_count_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_d_s
std::size_t unordered_multimap_bucket_count_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_d_b
std::size_t unordered_multimap_bucket_count_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_s_i
std::size_t unordered_multimap_bucket_count_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_s_d
std::size_t unordered_multimap_bucket_count_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_s_s
std::size_t unordered_multimap_bucket_count_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_s_b
std::size_t unordered_multimap_bucket_count_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_b_i
std::size_t unordered_multimap_bucket_count_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_b_d
std::size_t unordered_multimap_bucket_count_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_b_s
std::size_t unordered_multimap_bucket_count_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_bucket_count_b_b
std::size_t unordered_multimap_bucket_count_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_bucket_count_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_bucket_count_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_capacity_i
std::size_t vector_capacity_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_capacity_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_capacity_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_capacity_d
std::size_t vector_capacity_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_capacity_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_capacity_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_capacity_s
std::size_t vector_capacity_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_capacity_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_capacity_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_capacity_b
std::size_t vector_capacity_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_capacity_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_capacity_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_clear_i
void set_clear_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    set_clear_i(x);
    return R_NilValue;
END_RCPP
}
// set_clear_d
void set_clear_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    set_clear_d(x);
    return R_NilValue;
END_RCPP
}
// set_clear_s
void set_clear_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    set_clear_s(x);
    return R_NilValue;
END_RCPP
}
// set_clear_b
void set_clear_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    set_clear_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_i
void unordered_set_clear_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    unordered_set_clear_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_d
void unordered_set_clear_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    unordered_set_clear_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_s
void unordered_set_clear_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    unordered_set_clear_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_set_clear_b
void unordered_set_clear_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    unordered_set_clear_b(x);
    return R_NilValue;
END_RCPP
}
// multiset_clear_i
void multiset_clear_i(Rcpp::XPtr<std::multiset<int> > x);
RcppExport SEXP _cppcontainers_multiset_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    multiset_clear_i(x);
    return R_NilValue;
END_RCPP
}
// multiset_clear_d
void multiset_clear_d(Rcpp::XPtr<std::multiset<double> > x);
RcppExport SEXP _cppcontainers_multiset_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    multiset_clear_d(x);
    return R_NilValue;
END_RCPP
}
// multiset_clear_s
void multiset_clear_s(Rcpp::XPtr<std::multiset<std::string> > x);
RcppExport SEXP _cppcontainers_multiset_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    multiset_clear_s(x);
    return R_NilValue;
END_RCPP
}
// multiset_clear_b
void multiset_clear_b(Rcpp::XPtr<std::multiset<bool> > x);
RcppExport SEXP _cppcontainers_multiset_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    multiset_clear_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_clear_i
void unordered_multiset_clear_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    unordered_multiset_clear_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_clear_d
void unordered_multiset_clear_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    unordered_multiset_clear_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_clear_s
void unordered_multiset_clear_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    unordered_multiset_clear_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_clear_b
void unordered_multiset_clear_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    unordered_multiset_clear_b(x);
    return R_NilValue;
END_RCPP
}
// map_clear_i_i
void map_clear_i_i(Rcpp::XPtr<std::map<int, int> > x);
RcppExport SEXP _cppcontainers_map_clear_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    map_clear_i_i(x);
    return R_NilValue;
END_RCPP
}
// map_clear_i_d
void map_clear_i_d(Rcpp::XPtr<std::map<int, double> > x);
RcppExport SEXP _cppcontainers_map_clear_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    map_clear_i_d(x);
    return R_NilValue;
END_RCPP
}
// map_clear_i_s
void map_clear_i_s(Rcpp::XPtr<std::map<int, std::string> > x);
RcppExport SEXP _cppcontainers_map_clear_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    map_clear_i_s(x);
    return R_NilValue;
END_RCPP
}
// map_clear_i_b
void map_clear_i_b(Rcpp::XPtr<std::map<int, bool> > x);
RcppExport SEXP _cppcontainers_map_clear_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    map_clear_i_b(x);
    return R_NilValue;
END_RCPP
}
// map_clear_d_i
void map_clear_d_i(Rcpp::XPtr<std::map<double, int> > x);
RcppExport SEXP _cppcontainers_map_clear_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    map_clear_d_i(x);
    return R_NilValue;
END_RCPP
}
// map_clear_d_d
void map_clear_d_d(Rcpp::XPtr<std::map<double, double> > x);
RcppExport SEXP _cppcontainers_map_clear_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    map_clear_d_d(x);
    return R_NilValue;
END_RCPP
}
// map_clear_d_s
void map_clear_d_s(Rcpp::XPtr<std::map<double, std::string> > x);
RcppExport SEXP _cppcontainers_map_clear_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    map_clear_d_s(x);
    return R_NilValue;
END_RCPP
}
// map_clear_d_b
void map_clear_d_b(Rcpp::XPtr<std::map<double, bool> > x);
RcppExport SEXP _cppcontainers_map_clear_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    map_clear_d_b(x);
    return R_NilValue;
END_RCPP
}
// map_clear_s_i
void map_clear_s_i(Rcpp::XPtr<std::map<std::string, int> > x);
RcppExport SEXP _cppcontainers_map_clear_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    map_clear_s_i(x);
    return R_NilValue;
END_RCPP
}
// map_clear_s_d
void map_clear_s_d(Rcpp::XPtr<std::map<std::string, double> > x);
RcppExport SEXP _cppcontainers_map_clear_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    map_clear_s_d(x);
    return R_NilValue;
END_RCPP
}
// map_clear_s_s
void map_clear_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_map_clear_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    map_clear_s_s(x);
    return R_NilValue;
END_RCPP
}
// map_clear_s_b
void map_clear_s_b(Rcpp::XPtr<std::map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_map_clear_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    map_clear_s_b(x);
    return R_NilValue;
END_RCPP
}
// map_clear_b_i
void map_clear_b_i(Rcpp::XPtr<std::map<bool, int> > x);
RcppExport SEXP _cppcontainers_map_clear_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    map_clear_b_i(x);
    return R_NilValue;
END_RCPP
}
// map_clear_b_d
void map_clear_b_d(Rcpp::XPtr<std::map<bool, double> > x);
RcppExport SEXP _cppcontainers_map_clear_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    map_clear_b_d(x);
    return R_NilValue;
END_RCPP
}
// map_clear_b_s
void map_clear_b_s(Rcpp::XPtr<std::map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_map_clear_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    map_clear_b_s(x);
    return R_NilValue;
END_RCPP
}
// map_clear_b_b
void map_clear_b_b(Rcpp::XPtr<std::map<bool, bool> > x);
RcppExport SEXP _cppcontainers_map_clear_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    map_clear_b_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_i_i
void unordered_map_clear_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    unordered_map_clear_i_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_i_d
void unordered_map_clear_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    unordered_map_clear_i_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_i_s
void unordered_map_clear_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    unordered_map_clear_i_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_i_b
void unordered_map_clear_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    unordered_map_clear_i_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_d_i
void unordered_map_clear_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    unordered_map_clear_d_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_d_d
void unordered_map_clear_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    unordered_map_clear_d_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_d_s
void unordered_map_clear_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    unordered_map_clear_d_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_d_b
void unordered_map_clear_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    unordered_map_clear_d_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_s_i
void unordered_map_clear_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    unordered_map_clear_s_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_s_d
void unordered_map_clear_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    unordered_map_clear_s_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_s_s
void unordered_map_clear_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    unordered_map_clear_s_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_s_b
void unordered_map_clear_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    unordered_map_clear_s_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_b_i
void unordered_map_clear_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    unordered_map_clear_b_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_b_d
void unordered_map_clear_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    unordered_map_clear_b_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_b_s
void unordered_map_clear_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    unordered_map_clear_b_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_map_clear_b_b
void unordered_map_clear_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_clear_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    unordered_map_clear_b_b(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_i_i
void multimap_clear_i_i(Rcpp::XPtr<std::multimap<int, int> > x);
RcppExport SEXP _cppcontainers_multimap_clear_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    multimap_clear_i_i(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_i_d
void multimap_clear_i_d(Rcpp::XPtr<std::multimap<int, double> > x);
RcppExport SEXP _cppcontainers_multimap_clear_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    multimap_clear_i_d(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_i_s
void multimap_clear_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_clear_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    multimap_clear_i_s(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_i_b
void multimap_clear_i_b(Rcpp::XPtr<std::multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_multimap_clear_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    multimap_clear_i_b(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_d_i
void multimap_clear_d_i(Rcpp::XPtr<std::multimap<double, int> > x);
RcppExport SEXP _cppcontainers_multimap_clear_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    multimap_clear_d_i(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_d_d
void multimap_clear_d_d(Rcpp::XPtr<std::multimap<double, double> > x);
RcppExport SEXP _cppcontainers_multimap_clear_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    multimap_clear_d_d(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_d_s
void multimap_clear_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_clear_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    multimap_clear_d_s(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_d_b
void multimap_clear_d_b(Rcpp::XPtr<std::multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_multimap_clear_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    multimap_clear_d_b(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_s_i
void multimap_clear_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_multimap_clear_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    multimap_clear_s_i(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_s_d
void multimap_clear_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_multimap_clear_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    multimap_clear_s_d(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_s_s
void multimap_clear_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_clear_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    multimap_clear_s_s(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_s_b
void multimap_clear_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_multimap_clear_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    multimap_clear_s_b(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_b_i
void multimap_clear_b_i(Rcpp::XPtr<std::multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_multimap_clear_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    multimap_clear_b_i(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_b_d
void multimap_clear_b_d(Rcpp::XPtr<std::multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_multimap_clear_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    multimap_clear_b_d(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_b_s
void multimap_clear_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_clear_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    multimap_clear_b_s(x);
    return R_NilValue;
END_RCPP
}
// multimap_clear_b_b
void multimap_clear_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_multimap_clear_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    multimap_clear_b_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_i_i
void unordered_multimap_clear_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    unordered_multimap_clear_i_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_i_d
void unordered_multimap_clear_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    unordered_multimap_clear_i_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_i_s
void unordered_multimap_clear_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    unordered_multimap_clear_i_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_i_b
void unordered_multimap_clear_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    unordered_multimap_clear_i_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_d_i
void unordered_multimap_clear_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    unordered_multimap_clear_d_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_d_d
void unordered_multimap_clear_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    unordered_multimap_clear_d_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_d_s
void unordered_multimap_clear_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    unordered_multimap_clear_d_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_d_b
void unordered_multimap_clear_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    unordered_multimap_clear_d_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_s_i
void unordered_multimap_clear_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    unordered_multimap_clear_s_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_s_d
void unordered_multimap_clear_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    unordered_multimap_clear_s_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_s_s
void unordered_multimap_clear_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    unordered_multimap_clear_s_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_s_b
void unordered_multimap_clear_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    unordered_multimap_clear_s_b(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_b_i
void unordered_multimap_clear_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    unordered_multimap_clear_b_i(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_b_d
void unordered_multimap_clear_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    unordered_multimap_clear_b_d(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_b_s
void unordered_multimap_clear_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    unordered_multimap_clear_b_s(x);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_clear_b_b
void unordered_multimap_clear_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_clear_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    unordered_multimap_clear_b_b(x);
    return R_NilValue;
END_RCPP
}
// vector_clear_i
void vector_clear_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    vector_clear_i(x);
    return R_NilValue;
END_RCPP
}
// vector_clear_d
void vector_clear_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    vector_clear_d(x);
    return R_NilValue;
END_RCPP
}
// vector_clear_s
void vector_clear_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    vector_clear_s(x);
    return R_NilValue;
END_RCPP
}
// vector_clear_b
void vector_clear_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    vector_clear_b(x);
    return R_NilValue;
END_RCPP
}
// deque_clear_i
void deque_clear_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    deque_clear_i(x);
    return R_NilValue;
END_RCPP
}
// deque_clear_d
void deque_clear_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    deque_clear_d(x);
    return R_NilValue;
END_RCPP
}
// deque_clear_s
void deque_clear_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    deque_clear_s(x);
    return R_NilValue;
END_RCPP
}
// deque_clear_b
void deque_clear_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    deque_clear_b(x);
    return R_NilValue;
END_RCPP
}
// forward_list_clear_i
void forward_list_clear_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    forward_list_clear_i(x);
    return R_NilValue;
END_RCPP
}
// forward_list_clear_d
void forward_list_clear_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    forward_list_clear_d(x);
    return R_NilValue;
END_RCPP
}
// forward_list_clear_s
void forward_list_clear_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    forward_list_clear_s(x);
    return R_NilValue;
END_RCPP
}
// forward_list_clear_b
void forward_list_clear_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    forward_list_clear_b(x);
    return R_NilValue;
END_RCPP
}
// list_clear_i
void list_clear_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_clear_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    list_clear_i(x);
    return R_NilValue;
END_RCPP
}
// list_clear_d
void list_clear_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_clear_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    list_clear_d(x);
    return R_NilValue;
END_RCPP
}
// list_clear_s
void list_clear_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_clear_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    list_clear_s(x);
    return R_NilValue;
END_RCPP
}
// list_clear_b
void list_clear_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_clear_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    list_clear_b(x);
    return R_NilValue;
END_RCPP
}
// set_contains_i
Rcpp::LogicalVector set_contains_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_d
Rcpp::LogicalVector set_contains_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_s
Rcpp::LogicalVector set_contains_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_contains_b
Rcpp::LogicalVector set_contains_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_i
Rcpp::LogicalVector unordered_set_contains_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_d
Rcpp::LogicalVector unordered_set_contains_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_s
Rcpp::LogicalVector unordered_set_contains_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_contains_b
Rcpp::LogicalVector unordered_set_contains_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_contains_i
Rcpp::LogicalVector multiset_contains_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multiset_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_contains_d
Rcpp::LogicalVector multiset_contains_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multiset_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_contains_s
Rcpp::LogicalVector multiset_contains_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multiset_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_contains_b
Rcpp::LogicalVector multiset_contains_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multiset_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_contains_i
Rcpp::LogicalVector unordered_multiset_contains_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_contains_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_contains_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_contains_d
Rcpp::LogicalVector unordered_multiset_contains_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_contains_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_contains_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_contains_s
Rcpp::LogicalVector unordered_multiset_contains_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_contains_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_contains_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_contains_b
Rcpp::LogicalVector unordered_multiset_contains_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_contains_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_contains_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_i_i
Rcpp::LogicalVector map_contains_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_contains_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_i_d
Rcpp::LogicalVector map_contains_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_contains_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_i_s
Rcpp::LogicalVector map_contains_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_contains_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_i_b
Rcpp::LogicalVector map_contains_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_contains_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_d_i
Rcpp::LogicalVector map_contains_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_contains_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_d_d
Rcpp::LogicalVector map_contains_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_contains_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_d_s
Rcpp::LogicalVector map_contains_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_contains_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_d_b
Rcpp::LogicalVector map_contains_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_contains_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_s_i
Rcpp::LogicalVector map_contains_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_contains_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_s_d
Rcpp::LogicalVector map_contains_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_contains_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_s_s
Rcpp::LogicalVector map_contains_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_contains_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_s_b
Rcpp::LogicalVector map_contains_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_contains_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_b_i
Rcpp::LogicalVector map_contains_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_contains_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_b_d
Rcpp::LogicalVector map_contains_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_contains_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_b_s
Rcpp::LogicalVector map_contains_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_contains_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_contains_b_b
Rcpp::LogicalVector map_contains_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_contains_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_contains_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_i_i
Rcpp::LogicalVector unordered_map_contains_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_i_d
Rcpp::LogicalVector unordered_map_contains_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_i_s
Rcpp::LogicalVector unordered_map_contains_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_i_b
Rcpp::LogicalVector unordered_map_contains_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_d_i
Rcpp::LogicalVector unordered_map_contains_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_d_d
Rcpp::LogicalVector unordered_map_contains_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_d_s
Rcpp::LogicalVector unordered_map_contains_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_d_b
Rcpp::LogicalVector unordered_map_contains_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_s_i
Rcpp::LogicalVector unordered_map_contains_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_s_d
Rcpp::LogicalVector unordered_map_contains_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_s_s
Rcpp::LogicalVector unordered_map_contains_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_s_b
Rcpp::LogicalVector unordered_map_contains_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_b_i
Rcpp::LogicalVector unordered_map_contains_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_b_d
Rcpp::LogicalVector unordered_map_contains_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_b_s
Rcpp::LogicalVector unordered_map_contains_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_contains_b_b
Rcpp::LogicalVector unordered_map_contains_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_contains_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_contains_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_i_i
Rcpp::LogicalVector multimap_contains_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_i_d
Rcpp::LogicalVector multimap_contains_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_i_s
Rcpp::LogicalVector multimap_contains_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_i_b
Rcpp::LogicalVector multimap_contains_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_d_i
Rcpp::LogicalVector multimap_contains_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_d_d
Rcpp::LogicalVector multimap_contains_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_d_s
Rcpp::LogicalVector multimap_contains_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_d_b
Rcpp::LogicalVector multimap_contains_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_s_i
Rcpp::LogicalVector multimap_contains_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_s_d
Rcpp::LogicalVector multimap_contains_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_s_s
Rcpp::LogicalVector multimap_contains_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_s_b
Rcpp::LogicalVector multimap_contains_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_b_i
Rcpp::LogicalVector multimap_contains_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_b_d
Rcpp::LogicalVector multimap_contains_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_b_s
Rcpp::LogicalVector multimap_contains_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_contains_b_b
Rcpp::LogicalVector multimap_contains_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_contains_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_contains_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_i_i
Rcpp::LogicalVector unordered_multimap_contains_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_i_d
Rcpp::LogicalVector unordered_multimap_contains_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_i_s
Rcpp::LogicalVector unordered_multimap_contains_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_i_b
Rcpp::LogicalVector unordered_multimap_contains_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_d_i
Rcpp::LogicalVector unordered_multimap_contains_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_d_d
Rcpp::LogicalVector unordered_multimap_contains_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_d_s
Rcpp::LogicalVector unordered_multimap_contains_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_d_b
Rcpp::LogicalVector unordered_multimap_contains_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_s_i
Rcpp::LogicalVector unordered_multimap_contains_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_s_d
Rcpp::LogicalVector unordered_multimap_contains_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_s_s
Rcpp::LogicalVector unordered_multimap_contains_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_s_b
Rcpp::LogicalVector unordered_multimap_contains_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_b_i
Rcpp::LogicalVector unordered_multimap_contains_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_b_d
Rcpp::LogicalVector unordered_multimap_contains_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_b_s
Rcpp::LogicalVector unordered_multimap_contains_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_contains_b_b
Rcpp::LogicalVector unordered_multimap_contains_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_contains_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_contains_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_i
Rcpp::IntegerVector set_count_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_d
Rcpp::IntegerVector set_count_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_s
Rcpp::IntegerVector set_count_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// set_count_b
Rcpp::IntegerVector set_count_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_i
Rcpp::IntegerVector unordered_set_count_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_d
Rcpp::IntegerVector unordered_set_count_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_s
Rcpp::IntegerVector unordered_set_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_count_b
Rcpp::IntegerVector unordered_set_count_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_count_i
Rcpp::IntegerVector multiset_count_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multiset_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_count_d
Rcpp::IntegerVector multiset_count_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multiset_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_count_s
Rcpp::IntegerVector multiset_count_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multiset_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_count_b
Rcpp::IntegerVector multiset_count_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multiset_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_count_i
Rcpp::IntegerVector unordered_multiset_count_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_count_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_count_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_count_d
Rcpp::IntegerVector unordered_multiset_count_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_count_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_count_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_count_s
Rcpp::IntegerVector unordered_multiset_count_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_count_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_count_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_count_b
Rcpp::IntegerVector unordered_multiset_count_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_count_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_count_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_i_i
Rcpp::IntegerVector map_count_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_count_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_i_d
Rcpp::IntegerVector map_count_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_count_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_i_s
Rcpp::IntegerVector map_count_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_count_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_i_b
Rcpp::IntegerVector map_count_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_count_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_d_i
Rcpp::IntegerVector map_count_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_count_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_d_d
Rcpp::IntegerVector map_count_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_count_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_d_s
Rcpp::IntegerVector map_count_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_count_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_d_b
Rcpp::IntegerVector map_count_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_count_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_s_i
Rcpp::IntegerVector map_count_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_count_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_s_d
Rcpp::IntegerVector map_count_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_count_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_s_s
Rcpp::IntegerVector map_count_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_count_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_s_b
Rcpp::IntegerVector map_count_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_count_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_b_i
Rcpp::IntegerVector map_count_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_count_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_b_d
Rcpp::IntegerVector map_count_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_count_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_b_s
Rcpp::IntegerVector map_count_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_count_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// map_count_b_b
Rcpp::IntegerVector map_count_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_count_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(map_count_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_i_i
Rcpp::IntegerVector unordered_map_count_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_i_d
Rcpp::IntegerVector unordered_map_count_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_i_s
Rcpp::IntegerVector unordered_map_count_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_i_b
Rcpp::IntegerVector unordered_map_count_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_d_i
Rcpp::IntegerVector unordered_map_count_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_d_d
Rcpp::IntegerVector unordered_map_count_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_d_s
Rcpp::IntegerVector unordered_map_count_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_d_b
Rcpp::IntegerVector unordered_map_count_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_s_i
Rcpp::IntegerVector unordered_map_count_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_s_d
Rcpp::IntegerVector unordered_map_count_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_s_s
Rcpp::IntegerVector unordered_map_count_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_s_b
Rcpp::IntegerVector unordered_map_count_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_b_i
Rcpp::IntegerVector unordered_map_count_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_b_d
Rcpp::IntegerVector unordered_map_count_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_b_s
Rcpp::IntegerVector unordered_map_count_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_count_b_b
Rcpp::IntegerVector unordered_map_count_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_count_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_count_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_i_i
Rcpp::IntegerVector multimap_count_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_count_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_i_d
Rcpp::IntegerVector multimap_count_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_count_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_i_s
Rcpp::IntegerVector multimap_count_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_count_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_i_b
Rcpp::IntegerVector multimap_count_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_count_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_d_i
Rcpp::IntegerVector multimap_count_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_count_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_d_d
Rcpp::IntegerVector multimap_count_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_count_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_d_s
Rcpp::IntegerVector multimap_count_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_count_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_d_b
Rcpp::IntegerVector multimap_count_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_count_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_s_i
Rcpp::IntegerVector multimap_count_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_count_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_s_d
Rcpp::IntegerVector multimap_count_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_count_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_s_s
Rcpp::IntegerVector multimap_count_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_count_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_s_b
Rcpp::IntegerVector multimap_count_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_count_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_b_i
Rcpp::IntegerVector multimap_count_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_count_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_b_d
Rcpp::IntegerVector multimap_count_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_count_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_b_s
Rcpp::IntegerVector multimap_count_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_count_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// multimap_count_b_b
Rcpp::IntegerVector multimap_count_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_count_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_count_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_i_i
Rcpp::IntegerVector unordered_multimap_count_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_i_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_i_d
Rcpp::IntegerVector unordered_multimap_count_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_i_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_i_s
Rcpp::IntegerVector unordered_multimap_count_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_i_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_i_b
Rcpp::IntegerVector unordered_multimap_count_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_i_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_d_i
Rcpp::IntegerVector unordered_multimap_count_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_d_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_d_d
Rcpp::IntegerVector unordered_multimap_count_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_d_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_d_s
Rcpp::IntegerVector unordered_multimap_count_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_d_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_d_b
Rcpp::IntegerVector unordered_multimap_count_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_d_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_s_i
Rcpp::IntegerVector unordered_multimap_count_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_s_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_s_d
Rcpp::IntegerVector unordered_multimap_count_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_s_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_s_s
Rcpp::IntegerVector unordered_multimap_count_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_s_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_s_b
Rcpp::IntegerVector unordered_multimap_count_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_s_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_b_i
Rcpp::IntegerVector unordered_multimap_count_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_b_i(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_b_d
Rcpp::IntegerVector unordered_multimap_count_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_b_d(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_b_s
Rcpp::IntegerVector unordered_multimap_count_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_b_s(x, v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_count_b_b
Rcpp::IntegerVector unordered_multimap_count_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_count_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_count_b_b(x, v));
    return rcpp_result_gen;
END_RCPP
}
// deque_i
Rcpp::XPtr<std::deque<int> > deque_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_deque_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_i(v));
    return rcpp_result_gen;
END_RCPP
}
// deque_d
Rcpp::XPtr<std::deque<double> > deque_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_deque_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_d(v));
    return rcpp_result_gen;
END_RCPP
}
// deque_s
Rcpp::XPtr<std::deque<std::string> > deque_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_deque_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_s(v));
    return rcpp_result_gen;
END_RCPP
}
// deque_b
Rcpp::XPtr<std::deque<bool> > deque_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_deque_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_b(v));
    return rcpp_result_gen;
END_RCPP
}
// set_emplace_i
void set_emplace_i(Rcpp::XPtr<std::set<int> > x, const int v);
RcppExport SEXP _cppcontainers_set_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    set_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_d
void set_emplace_d(Rcpp::XPtr<std::set<double> > x, const double v);
RcppExport SEXP _cppcontainers_set_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    set_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_s
void set_emplace_s(Rcpp::XPtr<std::set<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_set_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    set_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_emplace_b
void set_emplace_b(Rcpp::XPtr<std::set<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_set_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    set_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_i
void unordered_set_emplace_i(Rcpp::XPtr<std::unordered_set<int> > x, const int v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_set_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_d
void unordered_set_emplace_d(Rcpp::XPtr<std::unordered_set<double> > x, const double v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_set_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_s
void unordered_set_emplace_s(Rcpp::XPtr<std::unordered_set<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_set_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_emplace_b
void unordered_set_emplace_b(Rcpp::XPtr<std::unordered_set<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_unordered_set_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_set_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_emplace_i
void multiset_emplace_i(Rcpp::XPtr<std::multiset<int> > x, const int v);
RcppExport SEXP _cppcontainers_multiset_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    multiset_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_emplace_d
void multiset_emplace_d(Rcpp::XPtr<std::multiset<double> > x, const double v);
RcppExport SEXP _cppcontainers_multiset_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    multiset_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_emplace_s
void multiset_emplace_s(Rcpp::XPtr<std::multiset<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_multiset_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    multiset_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_emplace_b
void multiset_emplace_b(Rcpp::XPtr<std::multiset<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_multiset_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    multiset_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_emplace_i
void unordered_multiset_emplace_i(Rcpp::XPtr<std::unordered_multiset<int> > x, const int v);
RcppExport SEXP _cppcontainers_unordered_multiset_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_multiset_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_emplace_d
void unordered_multiset_emplace_d(Rcpp::XPtr<std::unordered_multiset<double> > x, const double v);
RcppExport SEXP _cppcontainers_unordered_multiset_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_multiset_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_emplace_s
void unordered_multiset_emplace_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_unordered_multiset_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_multiset_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_emplace_b
void unordered_multiset_emplace_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_unordered_multiset_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_multiset_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_i_i
void map_emplace_i_i(Rcpp::XPtr<std::map<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_map_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_i_d
void map_emplace_i_d(Rcpp::XPtr<std::map<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_map_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_i_s
void map_emplace_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_map_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_i_b
void map_emplace_i_b(Rcpp::XPtr<std::map<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_map_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_d_i
void map_emplace_d_i(Rcpp::XPtr<std::map<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_map_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_d_d
void map_emplace_d_d(Rcpp::XPtr<std::map<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_map_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_d_s
void map_emplace_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_map_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_d_b
void map_emplace_d_b(Rcpp::XPtr<std::map<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_map_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_s_i
void map_emplace_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_map_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_s_d
void map_emplace_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_map_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_s_s
void map_emplace_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_map_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_s_b
void map_emplace_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_map_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_b_i
void map_emplace_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_map_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_b_d
void map_emplace_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_map_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_b_s
void map_emplace_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_map_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_emplace_b_b
void map_emplace_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_map_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_i_i
void unordered_map_emplace_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_i_d
void unordered_map_emplace_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_i_s
void unordered_map_emplace_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_i_b
void unordered_map_emplace_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_d_i
void unordered_map_emplace_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_d_d
void unordered_map_emplace_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_d_s
void unordered_map_emplace_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_d_b
void unordered_map_emplace_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_s_i
void unordered_map_emplace_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_s_d
void unordered_map_emplace_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_s_s
void unordered_map_emplace_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_s_b
void unordered_map_emplace_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_b_i
void unordered_map_emplace_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_b_d
void unordered_map_emplace_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_b_s
void unordered_map_emplace_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_emplace_b_b
void unordered_map_emplace_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_i_i
void multimap_emplace_i_i(Rcpp::XPtr<std::multimap<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_multimap_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    multimap_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_i_d
void multimap_emplace_i_d(Rcpp::XPtr<std::multimap<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_multimap_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    multimap_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_i_s
void multimap_emplace_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_multimap_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    multimap_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_i_b
void multimap_emplace_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_multimap_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    multimap_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_d_i
void multimap_emplace_d_i(Rcpp::XPtr<std::multimap<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_multimap_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    multimap_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_d_d
void multimap_emplace_d_d(Rcpp::XPtr<std::multimap<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_multimap_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    multimap_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_d_s
void multimap_emplace_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_multimap_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    multimap_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_d_b
void multimap_emplace_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_multimap_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    multimap_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_s_i
void multimap_emplace_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_multimap_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    multimap_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_s_d
void multimap_emplace_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_multimap_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    multimap_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_s_s
void multimap_emplace_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_multimap_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    multimap_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_s_b
void multimap_emplace_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_multimap_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    multimap_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_b_i
void multimap_emplace_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_multimap_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    multimap_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_b_d
void multimap_emplace_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_multimap_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    multimap_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_b_s
void multimap_emplace_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_multimap_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    multimap_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_emplace_b_b
void multimap_emplace_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_multimap_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    multimap_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_i_i
void unordered_multimap_emplace_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_multimap_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_i_d
void unordered_multimap_emplace_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_multimap_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_i_s
void unordered_multimap_emplace_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_multimap_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_i_b
void unordered_multimap_emplace_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_multimap_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_d_i
void unordered_multimap_emplace_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_multimap_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_d_d
void unordered_multimap_emplace_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_multimap_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_d_s
void unordered_multimap_emplace_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_multimap_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_d_b
void unordered_multimap_emplace_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_multimap_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_s_i
void unordered_multimap_emplace_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_multimap_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_s_d
void unordered_multimap_emplace_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_multimap_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_s_s
void unordered_multimap_emplace_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_multimap_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_s_b
void unordered_multimap_emplace_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_multimap_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_b_i
void unordered_multimap_emplace_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_multimap_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_b_d
void unordered_multimap_emplace_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_multimap_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_b_s
void unordered_multimap_emplace_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_multimap_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_emplace_b_b
void unordered_multimap_emplace_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_unordered_multimap_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_multimap_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// stack_emplace_i
void stack_emplace_i(Rcpp::XPtr<std::stack<int> > x, const int v);
RcppExport SEXP _cppcontainers_stack_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    stack_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// stack_emplace_d
void stack_emplace_d(Rcpp::XPtr<std::stack<double> > x, const double v);
RcppExport SEXP _cppcontainers_stack_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    stack_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// stack_emplace_s
void stack_emplace_s(Rcpp::XPtr<std::stack<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_stack_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    stack_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// stack_emplace_b
void stack_emplace_b(Rcpp::XPtr<std::stack<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_stack_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    stack_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// queue_emplace_i
void queue_emplace_i(Rcpp::XPtr<std::queue<int> > x, const int v);
RcppExport SEXP _cppcontainers_queue_emplace_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    queue_emplace_i(x, v);
    return R_NilValue;
END_RCPP
}
// queue_emplace_d
void queue_emplace_d(Rcpp::XPtr<std::queue<double> > x, const double v);
RcppExport SEXP _cppcontainers_queue_emplace_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    queue_emplace_d(x, v);
    return R_NilValue;
END_RCPP
}
// queue_emplace_s
void queue_emplace_s(Rcpp::XPtr<std::queue<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_queue_emplace_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    queue_emplace_s(x, v);
    return R_NilValue;
END_RCPP
}
// queue_emplace_b
void queue_emplace_b(Rcpp::XPtr<std::queue<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_queue_emplace_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    queue_emplace_b(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_i_d
void priority_queue_emplace_i_d(Rcpp::XPtr<std::priority_queue<int> > x, const int v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    priority_queue_emplace_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_d_d
void priority_queue_emplace_d_d(Rcpp::XPtr<std::priority_queue<double> > x, const double v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    priority_queue_emplace_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_s_d
void priority_queue_emplace_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    priority_queue_emplace_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_b_d
void priority_queue_emplace_b_d(Rcpp::XPtr<std::priority_queue<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    priority_queue_emplace_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_i_a
void priority_queue_emplace_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x, const int v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_i_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    priority_queue_emplace_i_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_d_a
void priority_queue_emplace_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x, const double v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_d_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    priority_queue_emplace_d_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_s_a
void priority_queue_emplace_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x, const std::string v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_s_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    priority_queue_emplace_s_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_emplace_b_a
void priority_queue_emplace_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x, const bool v);
RcppExport SEXP _cppcontainers_priority_queue_emplace_b_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    priority_queue_emplace_b_a(x, v);
    return R_NilValue;
END_RCPP
}
// vector_emplace_i
void vector_emplace_i(Rcpp::XPtr<std::vector<int> > x, const int v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_emplace_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_emplace_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_emplace_d
void vector_emplace_d(Rcpp::XPtr<std::vector<double> > x, const double v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_emplace_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_emplace_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_emplace_s
void vector_emplace_s(Rcpp::XPtr<std::vector<std::string> > x, const std::string v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_emplace_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_emplace_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_emplace_b
void vector_emplace_b(Rcpp::XPtr<std::vector<bool> > x, const bool v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_emplace_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_emplace_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_emplace_i
void deque_emplace_i(Rcpp::XPtr<std::deque<int> > x, const int v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_emplace_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_emplace_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_emplace_d
void deque_emplace_d(Rcpp::XPtr<std::deque<double> > x, const double v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_emplace_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_emplace_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_emplace_s
void deque_emplace_s(Rcpp::XPtr<std::deque<std::string> > x, const std::string v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_emplace_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_emplace_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_emplace_b
void deque_emplace_b(Rcpp::XPtr<std::deque<bool> > x, const bool v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_emplace_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_emplace_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_emplace_i
void list_emplace_i(Rcpp::XPtr<std::list<int> > x, const int v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_emplace_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_emplace_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_emplace_d
void list_emplace_d(Rcpp::XPtr<std::list<double> > x, const double v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_emplace_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_emplace_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_emplace_s
void list_emplace_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_emplace_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_emplace_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_emplace_b
void list_emplace_b(Rcpp::XPtr<std::list<bool> > x, const bool v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_emplace_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_emplace_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_after_i
void forward_list_emplace_after_i(Rcpp::XPtr<std::forward_list<int> > x, const int v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_emplace_after_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_emplace_after_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_after_d
void forward_list_emplace_after_d(Rcpp::XPtr<std::forward_list<double> > x, const double v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_emplace_after_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_emplace_after_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_after_s
void forward_list_emplace_after_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::string v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_emplace_after_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_emplace_after_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_after_b
void forward_list_emplace_after_b(Rcpp::XPtr<std::forward_list<bool> > x, const bool v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_emplace_after_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_emplace_after_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_emplace_back_i
void vector_emplace_back_i(Rcpp::XPtr<std::vector<int> > x, const int v);
RcppExport SEXP _cppcontainers_vector_emplace_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    vector_emplace_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// vector_emplace_back_d
void vector_emplace_back_d(Rcpp::XPtr<std::vector<double> > x, const double v);
RcppExport SEXP _cppcontainers_vector_emplace_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    vector_emplace_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// vector_emplace_back_s
void vector_emplace_back_s(Rcpp::XPtr<std::vector<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_vector_emplace_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    vector_emplace_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// vector_emplace_back_b
void vector_emplace_back_b(Rcpp::XPtr<std::vector<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_vector_emplace_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    vector_emplace_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_back_i
void deque_emplace_back_i(Rcpp::XPtr<std::deque<int> > x, const int v);
RcppExport SEXP _cppcontainers_deque_emplace_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    deque_emplace_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_back_d
void deque_emplace_back_d(Rcpp::XPtr<std::deque<double> > x, const double v);
RcppExport SEXP _cppcontainers_deque_emplace_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    deque_emplace_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_back_s
void deque_emplace_back_s(Rcpp::XPtr<std::deque<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_deque_emplace_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    deque_emplace_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_back_b
void deque_emplace_back_b(Rcpp::XPtr<std::deque<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_deque_emplace_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    deque_emplace_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_back_i
void list_emplace_back_i(Rcpp::XPtr<std::list<int> > x, const int v);
RcppExport SEXP _cppcontainers_list_emplace_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_emplace_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_back_d
void list_emplace_back_d(Rcpp::XPtr<std::list<double> > x, const double v);
RcppExport SEXP _cppcontainers_list_emplace_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_emplace_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_back_s
void list_emplace_back_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_list_emplace_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_emplace_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_back_b
void list_emplace_back_b(Rcpp::XPtr<std::list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_list_emplace_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_emplace_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_front_i
void deque_emplace_front_i(Rcpp::XPtr<std::deque<int> > x, const int v);
RcppExport SEXP _cppcontainers_deque_emplace_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    deque_emplace_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_front_d
void deque_emplace_front_d(Rcpp::XPtr<std::deque<double> > x, const double v);
RcppExport SEXP _cppcontainers_deque_emplace_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    deque_emplace_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_front_s
void deque_emplace_front_s(Rcpp::XPtr<std::deque<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_deque_emplace_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    deque_emplace_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// deque_emplace_front_b
void deque_emplace_front_b(Rcpp::XPtr<std::deque<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_deque_emplace_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    deque_emplace_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_front_i
void forward_list_emplace_front_i(Rcpp::XPtr<std::forward_list<int> > x, const int v);
RcppExport SEXP _cppcontainers_forward_list_emplace_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    forward_list_emplace_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_front_d
void forward_list_emplace_front_d(Rcpp::XPtr<std::forward_list<double> > x, const double v);
RcppExport SEXP _cppcontainers_forward_list_emplace_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    forward_list_emplace_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_front_s
void forward_list_emplace_front_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_forward_list_emplace_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    forward_list_emplace_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_emplace_front_b
void forward_list_emplace_front_b(Rcpp::XPtr<std::forward_list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_forward_list_emplace_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    forward_list_emplace_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_front_i
void list_emplace_front_i(Rcpp::XPtr<std::list<int> > x, const int v);
RcppExport SEXP _cppcontainers_list_emplace_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_emplace_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_front_d
void list_emplace_front_d(Rcpp::XPtr<std::list<double> > x, const double v);
RcppExport SEXP _cppcontainers_list_emplace_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_emplace_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_front_s
void list_emplace_front_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_list_emplace_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_emplace_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_emplace_front_b
void list_emplace_front_b(Rcpp::XPtr<std::list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_list_emplace_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_emplace_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// set_empty_i
bool set_empty_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_d
bool set_empty_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_s
bool set_empty_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_empty_b
bool set_empty_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_i
bool unordered_set_empty_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_d
bool unordered_set_empty_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_s
bool unordered_set_empty_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_empty_b
bool unordered_set_empty_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_empty_i
bool multiset_empty_i(Rcpp::XPtr<std::multiset<int> > x);
RcppExport SEXP _cppcontainers_multiset_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_empty_d
bool multiset_empty_d(Rcpp::XPtr<std::multiset<double> > x);
RcppExport SEXP _cppcontainers_multiset_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_empty_s
bool multiset_empty_s(Rcpp::XPtr<std::multiset<std::string> > x);
RcppExport SEXP _cppcontainers_multiset_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_empty_b
bool multiset_empty_b(Rcpp::XPtr<std::multiset<bool> > x);
RcppExport SEXP _cppcontainers_multiset_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_empty_i
bool unordered_multiset_empty_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_empty_d
bool unordered_multiset_empty_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_empty_s
bool unordered_multiset_empty_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_empty_b
bool unordered_multiset_empty_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_i_i
bool map_empty_i_i(Rcpp::XPtr<std::map<int, int> > x);
RcppExport SEXP _cppcontainers_map_empty_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_i_d
bool map_empty_i_d(Rcpp::XPtr<std::map<int, double> > x);
RcppExport SEXP _cppcontainers_map_empty_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_i_s
bool map_empty_i_s(Rcpp::XPtr<std::map<int, std::string> > x);
RcppExport SEXP _cppcontainers_map_empty_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_i_b
bool map_empty_i_b(Rcpp::XPtr<std::map<int, bool> > x);
RcppExport SEXP _cppcontainers_map_empty_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_d_i
bool map_empty_d_i(Rcpp::XPtr<std::map<double, int> > x);
RcppExport SEXP _cppcontainers_map_empty_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_d_d
bool map_empty_d_d(Rcpp::XPtr<std::map<double, double> > x);
RcppExport SEXP _cppcontainers_map_empty_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_d_s
bool map_empty_d_s(Rcpp::XPtr<std::map<double, std::string> > x);
RcppExport SEXP _cppcontainers_map_empty_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_d_b
bool map_empty_d_b(Rcpp::XPtr<std::map<double, bool> > x);
RcppExport SEXP _cppcontainers_map_empty_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_s_i
bool map_empty_s_i(Rcpp::XPtr<std::map<std::string, int> > x);
RcppExport SEXP _cppcontainers_map_empty_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_s_d
bool map_empty_s_d(Rcpp::XPtr<std::map<std::string, double> > x);
RcppExport SEXP _cppcontainers_map_empty_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_s_s
bool map_empty_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_map_empty_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_s_b
bool map_empty_s_b(Rcpp::XPtr<std::map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_map_empty_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_b_i
bool map_empty_b_i(Rcpp::XPtr<std::map<bool, int> > x);
RcppExport SEXP _cppcontainers_map_empty_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_b_d
bool map_empty_b_d(Rcpp::XPtr<std::map<bool, double> > x);
RcppExport SEXP _cppcontainers_map_empty_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_b_s
bool map_empty_b_s(Rcpp::XPtr<std::map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_map_empty_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_empty_b_b
bool map_empty_b_b(Rcpp::XPtr<std::map<bool, bool> > x);
RcppExport SEXP _cppcontainers_map_empty_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_empty_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_i_i
bool unordered_map_empty_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_i_d
bool unordered_map_empty_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_i_s
bool unordered_map_empty_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_i_b
bool unordered_map_empty_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_d_i
bool unordered_map_empty_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_d_d
bool unordered_map_empty_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_d_s
bool unordered_map_empty_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_d_b
bool unordered_map_empty_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_s_i
bool unordered_map_empty_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_s_d
bool unordered_map_empty_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_s_s
bool unordered_map_empty_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_s_b
bool unordered_map_empty_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_b_i
bool unordered_map_empty_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_b_d
bool unordered_map_empty_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_b_s
bool unordered_map_empty_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_empty_b_b
bool unordered_map_empty_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_empty_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_empty_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_i_i
bool multimap_empty_i_i(Rcpp::XPtr<std::multimap<int, int> > x);
RcppExport SEXP _cppcontainers_multimap_empty_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_i_d
bool multimap_empty_i_d(Rcpp::XPtr<std::multimap<int, double> > x);
RcppExport SEXP _cppcontainers_multimap_empty_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_i_s
bool multimap_empty_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_empty_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_i_b
bool multimap_empty_i_b(Rcpp::XPtr<std::multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_multimap_empty_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_d_i
bool multimap_empty_d_i(Rcpp::XPtr<std::multimap<double, int> > x);
RcppExport SEXP _cppcontainers_multimap_empty_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_d_d
bool multimap_empty_d_d(Rcpp::XPtr<std::multimap<double, double> > x);
RcppExport SEXP _cppcontainers_multimap_empty_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_d_s
bool multimap_empty_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_empty_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_d_b
bool multimap_empty_d_b(Rcpp::XPtr<std::multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_multimap_empty_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_s_i
bool multimap_empty_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_multimap_empty_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_s_d
bool multimap_empty_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_multimap_empty_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_s_s
bool multimap_empty_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_empty_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_s_b
bool multimap_empty_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_multimap_empty_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_b_i
bool multimap_empty_b_i(Rcpp::XPtr<std::multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_multimap_empty_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_b_d
bool multimap_empty_b_d(Rcpp::XPtr<std::multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_multimap_empty_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_b_s
bool multimap_empty_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_empty_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_empty_b_b
bool multimap_empty_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_multimap_empty_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_empty_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_i_i
bool unordered_multimap_empty_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_i_d
bool unordered_multimap_empty_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_i_s
bool unordered_multimap_empty_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_i_b
bool unordered_multimap_empty_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_d_i
bool unordered_multimap_empty_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_d_d
bool unordered_multimap_empty_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_d_s
bool unordered_multimap_empty_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_d_b
bool unordered_multimap_empty_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_s_i
bool unordered_multimap_empty_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_s_d
bool unordered_multimap_empty_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_s_s
bool unordered_multimap_empty_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_s_b
bool unordered_multimap_empty_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_b_i
bool unordered_multimap_empty_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_b_d
bool unordered_multimap_empty_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_b_s
bool unordered_multimap_empty_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_empty_b_b
bool unordered_multimap_empty_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_empty_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_empty_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_empty_i
bool stack_empty_i(Rcpp::XPtr<std::stack<int> > x);
RcppExport SEXP _cppcontainers_stack_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_empty_d
bool stack_empty_d(Rcpp::XPtr<std::stack<double> > x);
RcppExport SEXP _cppcontainers_stack_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_empty_s
bool stack_empty_s(Rcpp::XPtr<std::stack<std::string> > x);
RcppExport SEXP _cppcontainers_stack_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_empty_b
bool stack_empty_b(Rcpp::XPtr<std::stack<bool> > x);
RcppExport SEXP _cppcontainers_stack_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_empty_i
bool queue_empty_i(Rcpp::XPtr<std::queue<int> > x);
RcppExport SEXP _cppcontainers_queue_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_empty_d
bool queue_empty_d(Rcpp::XPtr<std::queue<double> > x);
RcppExport SEXP _cppcontainers_queue_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_empty_s
bool queue_empty_s(Rcpp::XPtr<std::queue<std::string> > x);
RcppExport SEXP _cppcontainers_queue_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_empty_b
bool queue_empty_b(Rcpp::XPtr<std::queue<bool> > x);
RcppExport SEXP _cppcontainers_queue_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_i_d
bool priority_queue_empty_i_d(Rcpp::XPtr<std::priority_queue<int> > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_d_d
bool priority_queue_empty_d_d(Rcpp::XPtr<std::priority_queue<double> > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_s_d
bool priority_queue_empty_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_b_d
bool priority_queue_empty_b_d(Rcpp::XPtr<std::priority_queue<bool> > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_i_a
bool priority_queue_empty_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_i_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_i_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_d_a
bool priority_queue_empty_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_d_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_d_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_s_a
bool priority_queue_empty_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_s_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_s_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_empty_b_a
bool priority_queue_empty_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x);
RcppExport SEXP _cppcontainers_priority_queue_empty_b_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_empty_b_a(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_empty_i
bool vector_empty_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_empty_d
bool vector_empty_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_empty_s
bool vector_empty_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_empty_b
bool vector_empty_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_empty_i
bool deque_empty_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_empty_d
bool deque_empty_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_empty_s
bool deque_empty_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_empty_b
bool deque_empty_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_empty_i
bool forward_list_empty_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_empty_d
bool forward_list_empty_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_empty_s
bool forward_list_empty_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_empty_b
bool forward_list_empty_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_empty_i
bool list_empty_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_empty_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_empty_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_empty_d
bool list_empty_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_empty_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_empty_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_empty_s
bool list_empty_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_empty_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_empty_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_empty_b
bool list_empty_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_empty_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_empty_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_erase_i
void set_erase_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    set_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_d
void set_erase_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    set_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_s
void set_erase_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    set_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_erase_b
void set_erase_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    set_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_i
void unordered_set_erase_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_set_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_d
void unordered_set_erase_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_set_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_s
void unordered_set_erase_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_set_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_erase_b
void unordered_set_erase_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_set_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_erase_i
void multiset_erase_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multiset_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multiset_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_erase_d
void multiset_erase_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multiset_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multiset_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_erase_s
void multiset_erase_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multiset_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multiset_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_erase_b
void multiset_erase_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multiset_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multiset_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_erase_i
void unordered_multiset_erase_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_erase_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multiset_erase_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_erase_d
void unordered_multiset_erase_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_erase_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multiset_erase_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_erase_s
void unordered_multiset_erase_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_erase_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multiset_erase_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_erase_b
void unordered_multiset_erase_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_erase_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multiset_erase_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_i_i
void map_erase_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_erase_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_erase_i_i(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_i_d
void map_erase_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_erase_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_erase_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_i_s
void map_erase_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_erase_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_erase_i_s(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_i_b
void map_erase_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_erase_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_erase_i_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_d_i
void map_erase_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_erase_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_erase_d_i(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_d_d
void map_erase_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_erase_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_erase_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_d_s
void map_erase_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_erase_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_erase_d_s(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_d_b
void map_erase_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_erase_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_erase_d_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_s_i
void map_erase_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_erase_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_erase_s_i(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_s_d
void map_erase_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_erase_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_erase_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_s_s
void map_erase_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_erase_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_erase_s_s(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_s_b
void map_erase_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_erase_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_erase_s_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_b_i
void map_erase_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_erase_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_erase_b_i(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_b_d
void map_erase_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_erase_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_erase_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_b_s
void map_erase_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_erase_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_erase_b_s(x, v);
    return R_NilValue;
END_RCPP
}
// map_erase_b_b
void map_erase_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_erase_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_erase_b_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_i_i
void unordered_map_erase_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_erase_i_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_i_d
void unordered_map_erase_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_erase_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_i_s
void unordered_map_erase_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_erase_i_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_i_b
void unordered_map_erase_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_erase_i_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_d_i
void unordered_map_erase_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_erase_d_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_d_d
void unordered_map_erase_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_erase_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_d_s
void unordered_map_erase_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_erase_d_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_d_b
void unordered_map_erase_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_erase_d_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_s_i
void unordered_map_erase_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_erase_s_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_s_d
void unordered_map_erase_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_erase_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_s_s
void unordered_map_erase_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_erase_s_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_s_b
void unordered_map_erase_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_erase_s_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_b_i
void unordered_map_erase_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_erase_b_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_b_d
void unordered_map_erase_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_erase_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_b_s
void unordered_map_erase_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_erase_b_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_erase_b_b
void unordered_map_erase_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_erase_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_erase_b_b(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_i_i
void multimap_erase_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_erase_i_i(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_i_d
void multimap_erase_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_erase_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_i_s
void multimap_erase_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_erase_i_s(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_i_b
void multimap_erase_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_erase_i_b(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_d_i
void multimap_erase_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_erase_d_i(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_d_d
void multimap_erase_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_erase_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_d_s
void multimap_erase_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_erase_d_s(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_d_b
void multimap_erase_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_erase_d_b(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_s_i
void multimap_erase_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_erase_s_i(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_s_d
void multimap_erase_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_erase_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_s_s
void multimap_erase_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_erase_s_s(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_s_b
void multimap_erase_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_erase_s_b(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_b_i
void multimap_erase_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_erase_b_i(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_b_d
void multimap_erase_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_erase_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_b_s
void multimap_erase_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_erase_b_s(x, v);
    return R_NilValue;
END_RCPP
}
// multimap_erase_b_b
void multimap_erase_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_erase_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_erase_b_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_i_i
void unordered_multimap_erase_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_i_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_erase_i_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_i_d
void unordered_multimap_erase_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_erase_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_i_s
void unordered_multimap_erase_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_i_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_erase_i_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_i_b
void unordered_multimap_erase_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_i_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_erase_i_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_d_i
void unordered_multimap_erase_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_d_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_erase_d_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_d_d
void unordered_multimap_erase_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_erase_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_d_s
void unordered_multimap_erase_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_d_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_erase_d_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_d_b
void unordered_multimap_erase_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_d_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_erase_d_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_s_i
void unordered_multimap_erase_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_s_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_erase_s_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_s_d
void unordered_multimap_erase_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_erase_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_s_s
void unordered_multimap_erase_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_s_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_erase_s_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_s_b
void unordered_multimap_erase_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_s_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_erase_s_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_b_i
void unordered_multimap_erase_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_b_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_erase_b_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_b_d
void unordered_multimap_erase_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_erase_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_b_s
void unordered_multimap_erase_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_b_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_erase_b_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_erase_b_b
void unordered_multimap_erase_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_erase_b_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_erase_b_b(x, v);
    return R_NilValue;
END_RCPP
}
// vector_erase_i
void vector_erase_i(Rcpp::XPtr<std::vector<int> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_vector_erase_i(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    vector_erase_i(x, from, to);
    return R_NilValue;
END_RCPP
}
// vector_erase_d
void vector_erase_d(Rcpp::XPtr<std::vector<double> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_vector_erase_d(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    vector_erase_d(x, from, to);
    return R_NilValue;
END_RCPP
}
// vector_erase_s
void vector_erase_s(Rcpp::XPtr<std::vector<std::string> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_vector_erase_s(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    vector_erase_s(x, from, to);
    return R_NilValue;
END_RCPP
}
// vector_erase_b
void vector_erase_b(Rcpp::XPtr<std::vector<bool> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_vector_erase_b(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    vector_erase_b(x, from, to);
    return R_NilValue;
END_RCPP
}
// deque_erase_i
void deque_erase_i(Rcpp::XPtr<std::deque<int> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_deque_erase_i(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    deque_erase_i(x, from, to);
    return R_NilValue;
END_RCPP
}
// deque_erase_d
void deque_erase_d(Rcpp::XPtr<std::deque<double> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_deque_erase_d(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    deque_erase_d(x, from, to);
    return R_NilValue;
END_RCPP
}
// deque_erase_s
void deque_erase_s(Rcpp::XPtr<std::deque<std::string> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_deque_erase_s(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    deque_erase_s(x, from, to);
    return R_NilValue;
END_RCPP
}
// deque_erase_b
void deque_erase_b(Rcpp::XPtr<std::deque<bool> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_deque_erase_b(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    deque_erase_b(x, from, to);
    return R_NilValue;
END_RCPP
}
// list_erase_i
void list_erase_i(Rcpp::XPtr<std::list<int> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_list_erase_i(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    list_erase_i(x, from, to);
    return R_NilValue;
END_RCPP
}
// list_erase_d
void list_erase_d(Rcpp::XPtr<std::list<double> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_list_erase_d(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    list_erase_d(x, from, to);
    return R_NilValue;
END_RCPP
}
// list_erase_s
void list_erase_s(Rcpp::XPtr<std::list<std::string> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_list_erase_s(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    list_erase_s(x, from, to);
    return R_NilValue;
END_RCPP
}
// list_erase_b
void list_erase_b(Rcpp::XPtr<std::list<bool> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_list_erase_b(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    list_erase_b(x, from, to);
    return R_NilValue;
END_RCPP
}
// forward_list_erase_after_i
void forward_list_erase_after_i(Rcpp::XPtr<std::forward_list<int> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_forward_list_erase_after_i(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    forward_list_erase_after_i(x, from, to);
    return R_NilValue;
END_RCPP
}
// forward_list_erase_after_d
void forward_list_erase_after_d(Rcpp::XPtr<std::forward_list<double> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_forward_list_erase_after_d(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    forward_list_erase_after_d(x, from, to);
    return R_NilValue;
END_RCPP
}
// forward_list_erase_after_s
void forward_list_erase_after_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_forward_list_erase_after_s(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    forward_list_erase_after_s(x, from, to);
    return R_NilValue;
END_RCPP
}
// forward_list_erase_after_b
void forward_list_erase_after_b(Rcpp::XPtr<std::forward_list<bool> > x, const std::size_t from, const std::size_t to);
RcppExport SEXP _cppcontainers_forward_list_erase_after_b(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type to(toSEXP);
    forward_list_erase_after_b(x, from, to);
    return R_NilValue;
END_RCPP
}
// vector_flip_b
void vector_flip_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_flip_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    vector_flip_b(x);
    return R_NilValue;
END_RCPP
}
// forward_list_i
Rcpp::XPtr<std::forward_list<int> > forward_list_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_forward_list_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_i(v));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_d
Rcpp::XPtr<std::forward_list<double> > forward_list_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_forward_list_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_d(v));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_s
Rcpp::XPtr<std::forward_list<std::string> > forward_list_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_forward_list_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_s(v));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_b
Rcpp::XPtr<std::forward_list<bool> > forward_list_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_forward_list_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_b(v));
    return rcpp_result_gen;
END_RCPP
}
// queue_front_i
int queue_front_i(Rcpp::XPtr<std::queue<int> > x);
RcppExport SEXP _cppcontainers_queue_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_front_i(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_front_d
double queue_front_d(Rcpp::XPtr<std::queue<double> > x);
RcppExport SEXP _cppcontainers_queue_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_front_d(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_front_s
std::string queue_front_s(Rcpp::XPtr<std::queue<std::string> > x);
RcppExport SEXP _cppcontainers_queue_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_front_s(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_front_b
bool queue_front_b(Rcpp::XPtr<std::queue<bool> > x);
RcppExport SEXP _cppcontainers_queue_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_front_b(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_front_i
int vector_front_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_front_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_front_d
double vector_front_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_front_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_front_s
std::string vector_front_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_front_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_front_b
bool vector_front_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_front_b(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_front_i
int deque_front_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_front_i(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_front_d
double deque_front_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_front_d(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_front_s
std::string deque_front_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_front_s(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_front_b
bool deque_front_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_front_b(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_front_i
int forward_list_front_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_front_i(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_front_d
double forward_list_front_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_front_d(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_front_s
std::string forward_list_front_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_front_s(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_front_b
bool forward_list_front_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_front_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_front_i
int list_front_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_front_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_front_d
double list_front_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_front_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_front_s
std::string list_front_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_front_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_front_b
bool list_front_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_front_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_insert_i
void set_insert_i(Rcpp::XPtr<std::set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    set_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_d
void set_insert_d(Rcpp::XPtr<std::set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    set_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_s
void set_insert_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    set_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// set_insert_b
void set_insert_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    set_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_i
void unordered_set_insert_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_set_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_d
void unordered_set_insert_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_set_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_s
void unordered_set_insert_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_set_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_insert_b
void unordered_set_insert_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_set_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_insert_i
void multiset_insert_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multiset_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multiset_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_insert_d
void multiset_insert_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multiset_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multiset_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_insert_s
void multiset_insert_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multiset_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multiset_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// multiset_insert_b
void multiset_insert_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multiset_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multiset_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_insert_i
void unordered_multiset_insert_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_insert_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multiset_insert_i(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_insert_d
void unordered_multiset_insert_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_insert_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multiset_insert_d(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_insert_s
void unordered_multiset_insert_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_insert_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multiset_insert_s(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_insert_b
void unordered_multiset_insert_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_insert_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multiset_insert_b(x, v);
    return R_NilValue;
END_RCPP
}
// map_insert_i_i
void map_insert_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_i_d
void map_insert_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_i_s
void map_insert_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_i_b
void map_insert_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_d_i
void map_insert_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_d_d
void map_insert_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_d_s
void map_insert_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_d_b
void map_insert_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_s_i
void map_insert_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_s_d
void map_insert_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_s_s
void map_insert_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_s_b
void map_insert_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_b_i
void map_insert_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_b_d
void map_insert_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_b_s
void map_insert_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_b_b
void map_insert_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_i_i
void unordered_map_insert_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_i_d
void unordered_map_insert_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_i_s
void unordered_map_insert_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_i_b
void unordered_map_insert_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_d_i
void unordered_map_insert_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_d_d
void unordered_map_insert_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_d_s
void unordered_map_insert_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_d_b
void unordered_map_insert_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_s_i
void unordered_map_insert_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_s_d
void unordered_map_insert_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_s_s
void unordered_map_insert_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_s_b
void unordered_map_insert_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_b_i
void unordered_map_insert_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_b_d
void unordered_map_insert_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_b_s
void unordered_map_insert_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_b_b
void unordered_map_insert_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_i_i
void multimap_insert_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_insert_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_i_d
void multimap_insert_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_insert_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_i_s
void multimap_insert_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_insert_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_i_b
void multimap_insert_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_insert_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_d_i
void multimap_insert_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_insert_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_d_d
void multimap_insert_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_insert_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_d_s
void multimap_insert_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_insert_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_d_b
void multimap_insert_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_insert_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_s_i
void multimap_insert_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_insert_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_s_d
void multimap_insert_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_insert_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_s_s
void multimap_insert_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_insert_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_s_b
void multimap_insert_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_insert_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_b_i
void multimap_insert_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    multimap_insert_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_b_d
void multimap_insert_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    multimap_insert_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_b_s
void multimap_insert_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    multimap_insert_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// multimap_insert_b_b
void multimap_insert_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multimap_insert_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    multimap_insert_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_i_i
void unordered_multimap_insert_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_insert_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_i_d
void unordered_multimap_insert_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_insert_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_i_s
void unordered_multimap_insert_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_insert_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_i_b
void unordered_multimap_insert_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_insert_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_d_i
void unordered_multimap_insert_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_insert_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_d_d
void unordered_multimap_insert_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_insert_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_d_s
void unordered_multimap_insert_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_insert_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_d_b
void unordered_multimap_insert_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_insert_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_s_i
void unordered_multimap_insert_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_insert_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_s_d
void unordered_multimap_insert_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_insert_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_s_s
void unordered_multimap_insert_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_insert_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_s_b
void unordered_multimap_insert_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_insert_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_b_i
void unordered_multimap_insert_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_multimap_insert_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_b_d
void unordered_multimap_insert_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_multimap_insert_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_b_s
void unordered_multimap_insert_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_multimap_insert_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_insert_b_b
void unordered_multimap_insert_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multimap_insert_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_multimap_insert_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// vector_insert_i
void vector_insert_i(Rcpp::XPtr<std::vector<int> > x, Rcpp::IntegerVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_insert_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_insert_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_insert_d
void vector_insert_d(Rcpp::XPtr<std::vector<double> > x, Rcpp::NumericVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_insert_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_insert_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_insert_s
void vector_insert_s(Rcpp::XPtr<std::vector<std::string> > x, Rcpp::CharacterVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_insert_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_insert_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// vector_insert_b
void vector_insert_b(Rcpp::XPtr<std::vector<bool> > x, Rcpp::LogicalVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_vector_insert_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    vector_insert_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_insert_i
void deque_insert_i(Rcpp::XPtr<std::deque<int> > x, Rcpp::IntegerVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_insert_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_insert_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_insert_d
void deque_insert_d(Rcpp::XPtr<std::deque<double> > x, Rcpp::NumericVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_insert_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_insert_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_insert_s
void deque_insert_s(Rcpp::XPtr<std::deque<std::string> > x, Rcpp::CharacterVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_insert_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_insert_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// deque_insert_b
void deque_insert_b(Rcpp::XPtr<std::deque<bool> > x, Rcpp::LogicalVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_deque_insert_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    deque_insert_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_insert_i
void list_insert_i(Rcpp::XPtr<std::list<int> > x, Rcpp::IntegerVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_insert_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_insert_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_insert_d
void list_insert_d(Rcpp::XPtr<std::list<double> > x, Rcpp::NumericVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_insert_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_insert_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_insert_s
void list_insert_s(Rcpp::XPtr<std::list<std::string> > x, Rcpp::CharacterVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_insert_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_insert_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// list_insert_b
void list_insert_b(Rcpp::XPtr<std::list<bool> > x, Rcpp::LogicalVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_list_insert_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    list_insert_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_insert_after_i
void forward_list_insert_after_i(Rcpp::XPtr<std::forward_list<int> > x, Rcpp::IntegerVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_insert_after_i(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_insert_after_i(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_insert_after_d
void forward_list_insert_after_d(Rcpp::XPtr<std::forward_list<double> > x, Rcpp::NumericVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_insert_after_d(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_insert_after_d(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_insert_after_s
void forward_list_insert_after_s(Rcpp::XPtr<std::forward_list<std::string> > x, Rcpp::CharacterVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_insert_after_s(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_insert_after_s(x, v, position);
    return R_NilValue;
END_RCPP
}
// forward_list_insert_after_b
void forward_list_insert_after_b(Rcpp::XPtr<std::forward_list<bool> > x, Rcpp::LogicalVector& v, const std::size_t position);
RcppExport SEXP _cppcontainers_forward_list_insert_after_b(SEXP xSEXP, SEXP vSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type position(positionSEXP);
    forward_list_insert_after_b(x, v, position);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_i_i
void map_insert_or_assign_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_or_assign_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_i_d
void map_insert_or_assign_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_or_assign_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_i_s
void map_insert_or_assign_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_or_assign_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_i_b
void map_insert_or_assign_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_or_assign_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_d_i
void map_insert_or_assign_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_or_assign_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_d_d
void map_insert_or_assign_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_or_assign_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_d_s
void map_insert_or_assign_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_or_assign_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_d_b
void map_insert_or_assign_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_or_assign_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_s_i
void map_insert_or_assign_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_or_assign_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_s_d
void map_insert_or_assign_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_or_assign_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_s_s
void map_insert_or_assign_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_or_assign_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_s_b
void map_insert_or_assign_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_or_assign_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_b_i
void map_insert_or_assign_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    map_insert_or_assign_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_b_d
void map_insert_or_assign_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    map_insert_or_assign_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_b_s
void map_insert_or_assign_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    map_insert_or_assign_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_insert_or_assign_b_b
void map_insert_or_assign_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_map_insert_or_assign_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    map_insert_or_assign_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_i_i
void unordered_map_insert_or_assign_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::IntegerVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_i_d
void unordered_map_insert_or_assign_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::IntegerVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_i_s
void unordered_map_insert_or_assign_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::IntegerVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_i_b
void unordered_map_insert_or_assign_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::IntegerVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_d_i
void unordered_map_insert_or_assign_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::NumericVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_d_d
void unordered_map_insert_or_assign_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::NumericVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_d_s
void unordered_map_insert_or_assign_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::NumericVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_d_b
void unordered_map_insert_or_assign_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::NumericVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_s_i
void unordered_map_insert_or_assign_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::CharacterVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_s_d
void unordered_map_insert_or_assign_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::CharacterVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_s_s
void unordered_map_insert_or_assign_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::CharacterVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_s_b
void unordered_map_insert_or_assign_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::CharacterVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_b_i
void unordered_map_insert_or_assign_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::LogicalVector& k, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_b_d
void unordered_map_insert_or_assign_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::LogicalVector& k, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_b_s
void unordered_map_insert_or_assign_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::LogicalVector& k, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_insert_or_assign_b_b
void unordered_map_insert_or_assign_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::LogicalVector& k, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_map_insert_or_assign_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    unordered_map_insert_or_assign_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// list_i
Rcpp::XPtr<std::list<int> > list_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_list_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(list_i(v));
    return rcpp_result_gen;
END_RCPP
}
// list_d
Rcpp::XPtr<std::list<double> > list_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_list_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(list_d(v));
    return rcpp_result_gen;
END_RCPP
}
// list_s
Rcpp::XPtr<std::list<std::string> > list_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_list_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(list_s(v));
    return rcpp_result_gen;
END_RCPP
}
// list_b
Rcpp::XPtr<std::list<bool> > list_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_list_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(list_b(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_i
double unordered_set_load_factor_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_d
double unordered_set_load_factor_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_s
double unordered_set_load_factor_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_load_factor_b
double unordered_set_load_factor_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_load_factor_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_load_factor_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_load_factor_i
double unordered_multiset_load_factor_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_load_factor_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_load_factor_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_load_factor_d
double unordered_multiset_load_factor_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_load_factor_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_load_factor_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_load_factor_s
double unordered_multiset_load_factor_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_load_factor_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_load_factor_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_load_factor_b
double unordered_multiset_load_factor_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_load_factor_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_load_factor_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_i_i
double unordered_map_load_factor_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_i_d
double unordered_map_load_factor_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_i_s
double unordered_map_load_factor_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_i_b
double unordered_map_load_factor_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_d_i
double unordered_map_load_factor_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_d_d
double unordered_map_load_factor_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_d_s
double unordered_map_load_factor_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_d_b
double unordered_map_load_factor_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_s_i
double unordered_map_load_factor_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_s_d
double unordered_map_load_factor_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_s_s
double unordered_map_load_factor_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_s_b
double unordered_map_load_factor_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_b_i
double unordered_map_load_factor_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_b_d
double unordered_map_load_factor_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_b_s
double unordered_map_load_factor_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_load_factor_b_b
double unordered_map_load_factor_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_load_factor_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_load_factor_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_i_i
double unordered_multimap_load_factor_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_i_d
double unordered_multimap_load_factor_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_i_s
double unordered_multimap_load_factor_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_i_b
double unordered_multimap_load_factor_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_d_i
double unordered_multimap_load_factor_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_d_d
double unordered_multimap_load_factor_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_d_s
double unordered_multimap_load_factor_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_d_b
double unordered_multimap_load_factor_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_s_i
double unordered_multimap_load_factor_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_s_d
double unordered_multimap_load_factor_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_s_s
double unordered_multimap_load_factor_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_s_b
double unordered_multimap_load_factor_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_b_i
double unordered_multimap_load_factor_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_b_d
double unordered_multimap_load_factor_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_b_s
double unordered_multimap_load_factor_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_load_factor_b_b
double unordered_multimap_load_factor_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_load_factor_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_load_factor_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_i_i
Rcpp::XPtr<std::map<int, int> > map_i_i(Rcpp::IntegerVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_map_i_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_i_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_i_d
Rcpp::XPtr<std::map<int, double> > map_i_d(Rcpp::IntegerVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_map_i_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_i_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_i_s
Rcpp::XPtr<std::map<int, std::string> > map_i_s(Rcpp::IntegerVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_map_i_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_i_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_i_b
Rcpp::XPtr<std::map<int, bool> > map_i_b(Rcpp::IntegerVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_map_i_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_i_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_d_i
Rcpp::XPtr<std::map<double, int> > map_d_i(Rcpp::NumericVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_map_d_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_d_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_d_d
Rcpp::XPtr<std::map<double, double> > map_d_d(Rcpp::NumericVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_map_d_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_d_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_d_s
Rcpp::XPtr<std::map<double, std::string> > map_d_s(Rcpp::NumericVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_map_d_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_d_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_d_b
Rcpp::XPtr<std::map<double, bool> > map_d_b(Rcpp::NumericVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_map_d_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_d_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_s_i
Rcpp::XPtr<std::map<std::string, int> > map_s_i(Rcpp::CharacterVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_map_s_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_s_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_s_d
Rcpp::XPtr<std::map<std::string, double> > map_s_d(Rcpp::CharacterVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_map_s_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_s_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_s_s
Rcpp::XPtr<std::map<std::string, std::string> > map_s_s(Rcpp::CharacterVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_map_s_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_s_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_s_b
Rcpp::XPtr<std::map<std::string, bool> > map_s_b(Rcpp::CharacterVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_map_s_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_s_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_b_i
Rcpp::XPtr<std::map<bool, int> > map_b_i(Rcpp::LogicalVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_map_b_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_b_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_b_d
Rcpp::XPtr<std::map<bool, double> > map_b_d(Rcpp::LogicalVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_map_b_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_b_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_b_s
Rcpp::XPtr<std::map<bool, std::string> > map_b_s(Rcpp::LogicalVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_map_b_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_b_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// map_b_b
Rcpp::XPtr<std::map<bool, bool> > map_b_b(Rcpp::LogicalVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_map_b_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(map_b_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_i
std::size_t unordered_set_max_bucket_count_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_d
std::size_t unordered_set_max_bucket_count_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_s
std::size_t unordered_set_max_bucket_count_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_bucket_count_b
std::size_t unordered_set_max_bucket_count_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_bucket_count_i
std::size_t unordered_multiset_max_bucket_count_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_bucket_count_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_bucket_count_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_bucket_count_d
std::size_t unordered_multiset_max_bucket_count_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_bucket_count_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_bucket_count_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_bucket_count_s
std::size_t unordered_multiset_max_bucket_count_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_bucket_count_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_bucket_count_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_bucket_count_b
std::size_t unordered_multiset_max_bucket_count_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_bucket_count_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_bucket_count_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_i_i
std::size_t unordered_map_max_bucket_count_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_i_d
std::size_t unordered_map_max_bucket_count_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_i_s
std::size_t unordered_map_max_bucket_count_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_i_b
std::size_t unordered_map_max_bucket_count_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_d_i
std::size_t unordered_map_max_bucket_count_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_d_d
std::size_t unordered_map_max_bucket_count_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_d_s
std::size_t unordered_map_max_bucket_count_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_d_b
std::size_t unordered_map_max_bucket_count_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_s_i
std::size_t unordered_map_max_bucket_count_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_s_d
std::size_t unordered_map_max_bucket_count_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_s_s
std::size_t unordered_map_max_bucket_count_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_s_b
std::size_t unordered_map_max_bucket_count_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_b_i
std::size_t unordered_map_max_bucket_count_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_b_d
std::size_t unordered_map_max_bucket_count_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_b_s
std::size_t unordered_map_max_bucket_count_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_bucket_count_b_b
std::size_t unordered_map_max_bucket_count_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_bucket_count_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_bucket_count_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_i_i
std::size_t unordered_multimap_max_bucket_count_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_i_d
std::size_t unordered_multimap_max_bucket_count_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_i_s
std::size_t unordered_multimap_max_bucket_count_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_i_b
std::size_t unordered_multimap_max_bucket_count_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_d_i
std::size_t unordered_multimap_max_bucket_count_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_d_d
std::size_t unordered_multimap_max_bucket_count_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_d_s
std::size_t unordered_multimap_max_bucket_count_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_d_b
std::size_t unordered_multimap_max_bucket_count_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_s_i
std::size_t unordered_multimap_max_bucket_count_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_s_d
std::size_t unordered_multimap_max_bucket_count_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_s_s
std::size_t unordered_multimap_max_bucket_count_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_s_b
std::size_t unordered_multimap_max_bucket_count_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_b_i
std::size_t unordered_multimap_max_bucket_count_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_b_d
std::size_t unordered_multimap_max_bucket_count_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_b_s
std::size_t unordered_multimap_max_bucket_count_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_bucket_count_b_b
std::size_t unordered_multimap_max_bucket_count_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_bucket_count_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_bucket_count_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_i_get
double unordered_set_max_load_factor_i_get(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_d_get
double unordered_set_max_load_factor_d_get(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_s_get
double unordered_set_max_load_factor_s_get(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_b_get
double unordered_set_max_load_factor_b_get(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_load_factor_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_load_factor_i_set
void unordered_set_max_load_factor_i_set(Rcpp::XPtr<std::unordered_set<int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_d_set
void unordered_set_max_load_factor_d_set(Rcpp::XPtr<std::unordered_set<double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_s_set
void unordered_set_max_load_factor_s_set(Rcpp::XPtr<std::unordered_set<std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_set_max_load_factor_b_set
void unordered_set_max_load_factor_b_set(Rcpp::XPtr<std::unordered_set<bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_set_max_load_factor_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_set_max_load_factor_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_max_load_factor_i_get
double unordered_multiset_max_load_factor_i_get(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_load_factor_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_load_factor_d_get
double unordered_multiset_max_load_factor_d_get(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_load_factor_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_load_factor_s_get
double unordered_multiset_max_load_factor_s_get(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_load_factor_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_load_factor_b_get
double unordered_multiset_max_load_factor_b_get(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_load_factor_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_load_factor_i_set
void unordered_multiset_max_load_factor_i_set(Rcpp::XPtr<std::unordered_multiset<int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multiset_max_load_factor_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_max_load_factor_d_set
void unordered_multiset_max_load_factor_d_set(Rcpp::XPtr<std::unordered_multiset<double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multiset_max_load_factor_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_max_load_factor_s_set
void unordered_multiset_max_load_factor_s_set(Rcpp::XPtr<std::unordered_multiset<std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multiset_max_load_factor_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_max_load_factor_b_set
void unordered_multiset_max_load_factor_b_set(Rcpp::XPtr<std::unordered_multiset<bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multiset_max_load_factor_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multiset_max_load_factor_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_i_i_get
double unordered_map_max_load_factor_i_i_get(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_i_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_i_d_get
double unordered_map_max_load_factor_i_d_get(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_i_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_i_s_get
double unordered_map_max_load_factor_i_s_get(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_i_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_i_b_get
double unordered_map_max_load_factor_i_b_get(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_i_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_d_i_get
double unordered_map_max_load_factor_d_i_get(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_d_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_d_d_get
double unordered_map_max_load_factor_d_d_get(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_d_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_d_s_get
double unordered_map_max_load_factor_d_s_get(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_d_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_d_b_get
double unordered_map_max_load_factor_d_b_get(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_d_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_s_i_get
double unordered_map_max_load_factor_s_i_get(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_s_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_s_d_get
double unordered_map_max_load_factor_s_d_get(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_s_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_s_s_get
double unordered_map_max_load_factor_s_s_get(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_s_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_s_b_get
double unordered_map_max_load_factor_s_b_get(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_s_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_b_i_get
double unordered_map_max_load_factor_b_i_get(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_b_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_b_d_get
double unordered_map_max_load_factor_b_d_get(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_b_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_b_s_get
double unordered_map_max_load_factor_b_s_get(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_b_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_b_b_get
double unordered_map_max_load_factor_b_b_get(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_load_factor_b_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_load_factor_i_i_set
void unordered_map_max_load_factor_i_i_set(Rcpp::XPtr<std::unordered_map<int, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_i_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_i_d_set
void unordered_map_max_load_factor_i_d_set(Rcpp::XPtr<std::unordered_map<int, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_i_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_i_s_set
void unordered_map_max_load_factor_i_s_set(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_i_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_i_b_set
void unordered_map_max_load_factor_i_b_set(Rcpp::XPtr<std::unordered_map<int, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_i_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_i_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_d_i_set
void unordered_map_max_load_factor_d_i_set(Rcpp::XPtr<std::unordered_map<double, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_d_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_d_d_set
void unordered_map_max_load_factor_d_d_set(Rcpp::XPtr<std::unordered_map<double, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_d_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_d_s_set
void unordered_map_max_load_factor_d_s_set(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_d_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_d_b_set
void unordered_map_max_load_factor_d_b_set(Rcpp::XPtr<std::unordered_map<double, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_d_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_d_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_s_i_set
void unordered_map_max_load_factor_s_i_set(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_s_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_s_d_set
void unordered_map_max_load_factor_s_d_set(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_s_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_s_s_set
void unordered_map_max_load_factor_s_s_set(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_s_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_s_b_set
void unordered_map_max_load_factor_s_b_set(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_s_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_s_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_b_i_set
void unordered_map_max_load_factor_b_i_set(Rcpp::XPtr<std::unordered_map<bool, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_b_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_b_d_set
void unordered_map_max_load_factor_b_d_set(Rcpp::XPtr<std::unordered_map<bool, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_b_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_b_s_set
void unordered_map_max_load_factor_b_s_set(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_b_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_map_max_load_factor_b_b_set
void unordered_map_max_load_factor_b_b_set(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_map_max_load_factor_b_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_map_max_load_factor_b_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_i_i_get
double unordered_multimap_max_load_factor_i_i_get(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_i_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_i_d_get
double unordered_multimap_max_load_factor_i_d_get(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_i_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_i_s_get
double unordered_multimap_max_load_factor_i_s_get(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_i_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_i_b_get
double unordered_multimap_max_load_factor_i_b_get(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_i_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_d_i_get
double unordered_multimap_max_load_factor_d_i_get(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_d_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_d_d_get
double unordered_multimap_max_load_factor_d_d_get(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_d_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_d_s_get
double unordered_multimap_max_load_factor_d_s_get(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_d_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_d_b_get
double unordered_multimap_max_load_factor_d_b_get(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_d_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_s_i_get
double unordered_multimap_max_load_factor_s_i_get(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_s_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_s_d_get
double unordered_multimap_max_load_factor_s_d_get(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_s_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_s_s_get
double unordered_multimap_max_load_factor_s_s_get(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_s_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_s_b_get
double unordered_multimap_max_load_factor_s_b_get(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_s_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_b_i_get
double unordered_multimap_max_load_factor_b_i_get(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_i_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_b_i_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_b_d_get
double unordered_multimap_max_load_factor_b_d_get(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_d_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_b_d_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_b_s_get
double unordered_multimap_max_load_factor_b_s_get(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_s_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_b_s_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_b_b_get
double unordered_multimap_max_load_factor_b_b_get(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_b_get(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_load_factor_b_b_get(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_load_factor_i_i_set
void unordered_multimap_max_load_factor_i_i_set(Rcpp::XPtr<std::unordered_multimap<int, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_i_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_i_d_set
void unordered_multimap_max_load_factor_i_d_set(Rcpp::XPtr<std::unordered_multimap<int, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_i_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_i_s_set
void unordered_multimap_max_load_factor_i_s_set(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_i_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_i_b_set
void unordered_multimap_max_load_factor_i_b_set(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_i_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_i_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_d_i_set
void unordered_multimap_max_load_factor_d_i_set(Rcpp::XPtr<std::unordered_multimap<double, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_d_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_d_d_set
void unordered_multimap_max_load_factor_d_d_set(Rcpp::XPtr<std::unordered_multimap<double, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_d_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_d_s_set
void unordered_multimap_max_load_factor_d_s_set(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_d_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_d_b_set
void unordered_multimap_max_load_factor_d_b_set(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_d_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_d_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_s_i_set
void unordered_multimap_max_load_factor_s_i_set(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_s_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_s_d_set
void unordered_multimap_max_load_factor_s_d_set(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_s_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_s_s_set
void unordered_multimap_max_load_factor_s_s_set(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_s_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_s_b_set
void unordered_multimap_max_load_factor_s_b_set(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_s_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_s_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_b_i_set
void unordered_multimap_max_load_factor_b_i_set(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_i_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_b_i_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_b_d_set
void unordered_multimap_max_load_factor_b_d_set(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_d_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_b_d_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_b_s_set
void unordered_multimap_max_load_factor_b_s_set(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_s_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_b_s_set(x, l);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_max_load_factor_b_b_set
void unordered_multimap_max_load_factor_b_b_set(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, const double l);
RcppExport SEXP _cppcontainers_unordered_multimap_max_load_factor_b_b_set(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    unordered_multimap_max_load_factor_b_b_set(x, l);
    return R_NilValue;
END_RCPP
}
// set_max_size_i
std::size_t set_max_size_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_d
std::size_t set_max_size_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_s
std::size_t set_max_size_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_max_size_b
std::size_t set_max_size_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_i
std::size_t unordered_set_max_size_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_d
std::size_t unordered_set_max_size_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_s
std::size_t unordered_set_max_size_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_max_size_b
std::size_t unordered_set_max_size_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_max_size_i
std::size_t multiset_max_size_i(Rcpp::XPtr<std::multiset<int> > x);
RcppExport SEXP _cppcontainers_multiset_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_max_size_d
std::size_t multiset_max_size_d(Rcpp::XPtr<std::multiset<double> > x);
RcppExport SEXP _cppcontainers_multiset_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_max_size_s
std::size_t multiset_max_size_s(Rcpp::XPtr<std::multiset<std::string> > x);
RcppExport SEXP _cppcontainers_multiset_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_max_size_b
std::size_t multiset_max_size_b(Rcpp::XPtr<std::multiset<bool> > x);
RcppExport SEXP _cppcontainers_multiset_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_size_i
std::size_t unordered_multiset_max_size_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_size_d
std::size_t unordered_multiset_max_size_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_size_s
std::size_t unordered_multiset_max_size_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_max_size_b
std::size_t unordered_multiset_max_size_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_i_i
std::size_t map_max_size_i_i(Rcpp::XPtr<std::map<int, int> > x);
RcppExport SEXP _cppcontainers_map_max_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_i_d
std::size_t map_max_size_i_d(Rcpp::XPtr<std::map<int, double> > x);
RcppExport SEXP _cppcontainers_map_max_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_i_s
std::size_t map_max_size_i_s(Rcpp::XPtr<std::map<int, std::string> > x);
RcppExport SEXP _cppcontainers_map_max_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_i_b
std::size_t map_max_size_i_b(Rcpp::XPtr<std::map<double, bool> > x);
RcppExport SEXP _cppcontainers_map_max_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_d_i
std::size_t map_max_size_d_i(Rcpp::XPtr<std::map<double, int> > x);
RcppExport SEXP _cppcontainers_map_max_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_d_d
std::size_t map_max_size_d_d(Rcpp::XPtr<std::map<double, double> > x);
RcppExport SEXP _cppcontainers_map_max_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_d_s
std::size_t map_max_size_d_s(Rcpp::XPtr<std::map<double, std::string> > x);
RcppExport SEXP _cppcontainers_map_max_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_d_b
std::size_t map_max_size_d_b(Rcpp::XPtr<std::map<double, bool> > x);
RcppExport SEXP _cppcontainers_map_max_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_s_i
std::size_t map_max_size_s_i(Rcpp::XPtr<std::map<std::string, int> > x);
RcppExport SEXP _cppcontainers_map_max_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_s_d
std::size_t map_max_size_s_d(Rcpp::XPtr<std::map<std::string, double> > x);
RcppExport SEXP _cppcontainers_map_max_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_s_s
std::size_t map_max_size_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_map_max_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_s_b
std::size_t map_max_size_s_b(Rcpp::XPtr<std::map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_map_max_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_b_i
std::size_t map_max_size_b_i(Rcpp::XPtr<std::map<bool, int> > x);
RcppExport SEXP _cppcontainers_map_max_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_b_d
std::size_t map_max_size_b_d(Rcpp::XPtr<std::map<bool, double> > x);
RcppExport SEXP _cppcontainers_map_max_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_b_s
std::size_t map_max_size_b_s(Rcpp::XPtr<std::map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_map_max_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_max_size_b_b
std::size_t map_max_size_b_b(Rcpp::XPtr<std::map<bool, bool> > x);
RcppExport SEXP _cppcontainers_map_max_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_max_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_i_i
std::size_t unordered_map_max_size_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_i_d
std::size_t unordered_map_max_size_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_i_s
std::size_t unordered_map_max_size_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_i_b
std::size_t unordered_map_max_size_i_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_d_i
std::size_t unordered_map_max_size_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_d_d
std::size_t unordered_map_max_size_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_d_s
std::size_t unordered_map_max_size_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_d_b
std::size_t unordered_map_max_size_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_s_i
std::size_t unordered_map_max_size_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_s_d
std::size_t unordered_map_max_size_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_s_s
std::size_t unordered_map_max_size_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_s_b
std::size_t unordered_map_max_size_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_b_i
std::size_t unordered_map_max_size_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_b_d
std::size_t unordered_map_max_size_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_b_s
std::size_t unordered_map_max_size_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_max_size_b_b
std::size_t unordered_map_max_size_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_max_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_max_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_i_i
std::size_t multimap_max_size_i_i(Rcpp::XPtr<std::multimap<int, int> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_i_d
std::size_t multimap_max_size_i_d(Rcpp::XPtr<std::multimap<int, double> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_i_s
std::size_t multimap_max_size_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_i_b
std::size_t multimap_max_size_i_b(Rcpp::XPtr<std::multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_d_i
std::size_t multimap_max_size_d_i(Rcpp::XPtr<std::multimap<double, int> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_d_d
std::size_t multimap_max_size_d_d(Rcpp::XPtr<std::multimap<double, double> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_d_s
std::size_t multimap_max_size_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_d_b
std::size_t multimap_max_size_d_b(Rcpp::XPtr<std::multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_s_i
std::size_t multimap_max_size_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_s_d
std::size_t multimap_max_size_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_s_s
std::size_t multimap_max_size_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_s_b
std::size_t multimap_max_size_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_b_i
std::size_t multimap_max_size_b_i(Rcpp::XPtr<std::multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_b_d
std::size_t multimap_max_size_b_d(Rcpp::XPtr<std::multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_b_s
std::size_t multimap_max_size_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_max_size_b_b
std::size_t multimap_max_size_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_multimap_max_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_max_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_i_i
std::size_t unordered_multimap_max_size_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_i_d
std::size_t unordered_multimap_max_size_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_i_s
std::size_t unordered_multimap_max_size_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_i_b
std::size_t unordered_multimap_max_size_i_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_d_i
std::size_t unordered_multimap_max_size_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_d_d
std::size_t unordered_multimap_max_size_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_d_s
std::size_t unordered_multimap_max_size_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_d_b
std::size_t unordered_multimap_max_size_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_s_i
std::size_t unordered_multimap_max_size_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_s_d
std::size_t unordered_multimap_max_size_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_s_s
std::size_t unordered_multimap_max_size_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_s_b
std::size_t unordered_multimap_max_size_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_b_i
std::size_t unordered_multimap_max_size_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_b_d
std::size_t unordered_multimap_max_size_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_b_s
std::size_t unordered_multimap_max_size_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_max_size_b_b
std::size_t unordered_multimap_max_size_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_max_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_max_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_max_size_i
std::size_t vector_max_size_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_max_size_d
std::size_t vector_max_size_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_max_size_s
std::size_t vector_max_size_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_max_size_b
std::size_t vector_max_size_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_max_size_i
std::size_t deque_max_size_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_max_size_d
std::size_t deque_max_size_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_max_size_s
std::size_t deque_max_size_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_max_size_b
std::size_t deque_max_size_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_max_size_i
std::size_t forward_list_max_size_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_max_size_d
std::size_t forward_list_max_size_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_max_size_s
std::size_t forward_list_max_size_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_max_size_b
std::size_t forward_list_max_size_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_max_size_i
std::size_t list_max_size_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_max_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_max_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_max_size_d
std::size_t list_max_size_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_max_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_max_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_max_size_s
std::size_t list_max_size_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_max_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_max_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_max_size_b
std::size_t list_max_size_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_max_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_max_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// set_merge_i
void set_merge_i(Rcpp::XPtr<std::set<int> > x, Rcpp::XPtr<std::set<int> > y);
RcppExport SEXP _cppcontainers_set_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type y(ySEXP);
    set_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_d
void set_merge_d(Rcpp::XPtr<std::set<double> > x, Rcpp::XPtr<std::set<double> > y);
RcppExport SEXP _cppcontainers_set_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type y(ySEXP);
    set_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_s
void set_merge_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::XPtr<std::set<std::string> > y);
RcppExport SEXP _cppcontainers_set_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type y(ySEXP);
    set_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// set_merge_b
void set_merge_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::XPtr<std::set<bool> > y);
RcppExport SEXP _cppcontainers_set_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type y(ySEXP);
    set_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_i
void unordered_set_merge_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::XPtr<std::unordered_set<int> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type y(ySEXP);
    unordered_set_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_d
void unordered_set_merge_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::XPtr<std::unordered_set<double> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type y(ySEXP);
    unordered_set_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_s
void unordered_set_merge_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::XPtr<std::unordered_set<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type y(ySEXP);
    unordered_set_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_set_merge_b
void unordered_set_merge_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::XPtr<std::unordered_set<bool> > y);
RcppExport SEXP _cppcontainers_unordered_set_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type y(ySEXP);
    unordered_set_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// multiset_merge_i
void multiset_merge_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::XPtr<std::multiset<int> > y);
RcppExport SEXP _cppcontainers_multiset_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type y(ySEXP);
    multiset_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// multiset_merge_d
void multiset_merge_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::XPtr<std::multiset<double> > y);
RcppExport SEXP _cppcontainers_multiset_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type y(ySEXP);
    multiset_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// multiset_merge_s
void multiset_merge_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::XPtr<std::multiset<std::string> > y);
RcppExport SEXP _cppcontainers_multiset_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type y(ySEXP);
    multiset_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// multiset_merge_b
void multiset_merge_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::XPtr<std::multiset<bool> > y);
RcppExport SEXP _cppcontainers_multiset_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type y(ySEXP);
    multiset_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_merge_i
void unordered_multiset_merge_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::XPtr<std::unordered_multiset<int> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type y(ySEXP);
    unordered_multiset_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_merge_d
void unordered_multiset_merge_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::XPtr<std::unordered_multiset<double> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type y(ySEXP);
    unordered_multiset_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_merge_s
void unordered_multiset_merge_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::XPtr<std::unordered_multiset<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type y(ySEXP);
    unordered_multiset_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_merge_b
void unordered_multiset_merge_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::XPtr<std::unordered_multiset<bool> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type y(ySEXP);
    unordered_multiset_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_i_i
void map_merge_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::XPtr<std::map<int, int> > y);
RcppExport SEXP _cppcontainers_map_merge_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type y(ySEXP);
    map_merge_i_i(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_i_d
void map_merge_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::XPtr<std::map<int, double> > y);
RcppExport SEXP _cppcontainers_map_merge_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type y(ySEXP);
    map_merge_i_d(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_i_s
void map_merge_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::XPtr<std::map<int, std::string> > y);
RcppExport SEXP _cppcontainers_map_merge_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type y(ySEXP);
    map_merge_i_s(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_i_b
void map_merge_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::XPtr<std::map<int, bool> > y);
RcppExport SEXP _cppcontainers_map_merge_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type y(ySEXP);
    map_merge_i_b(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_d_i
void map_merge_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::XPtr<std::map<double, int> > y);
RcppExport SEXP _cppcontainers_map_merge_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type y(ySEXP);
    map_merge_d_i(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_d_d
void map_merge_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::XPtr<std::map<double, double> > y);
RcppExport SEXP _cppcontainers_map_merge_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type y(ySEXP);
    map_merge_d_d(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_d_s
void map_merge_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::XPtr<std::map<double, std::string> > y);
RcppExport SEXP _cppcontainers_map_merge_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type y(ySEXP);
    map_merge_d_s(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_d_b
void map_merge_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::XPtr<std::map<double, bool> > y);
RcppExport SEXP _cppcontainers_map_merge_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type y(ySEXP);
    map_merge_d_b(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_s_i
void map_merge_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::XPtr<std::map<std::string, int> > y);
RcppExport SEXP _cppcontainers_map_merge_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type y(ySEXP);
    map_merge_s_i(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_s_d
void map_merge_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::XPtr<std::map<std::string, double> > y);
RcppExport SEXP _cppcontainers_map_merge_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type y(ySEXP);
    map_merge_s_d(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_s_s
void map_merge_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::XPtr<std::map<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_map_merge_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type y(ySEXP);
    map_merge_s_s(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_s_b
void map_merge_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::XPtr<std::map<std::string, bool> > y);
RcppExport SEXP _cppcontainers_map_merge_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type y(ySEXP);
    map_merge_s_b(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_b_i
void map_merge_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::XPtr<std::map<bool, int> > y);
RcppExport SEXP _cppcontainers_map_merge_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type y(ySEXP);
    map_merge_b_i(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_b_d
void map_merge_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::XPtr<std::map<bool, double> > y);
RcppExport SEXP _cppcontainers_map_merge_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type y(ySEXP);
    map_merge_b_d(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_b_s
void map_merge_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::XPtr<std::map<bool, std::string> > y);
RcppExport SEXP _cppcontainers_map_merge_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type y(ySEXP);
    map_merge_b_s(x, y);
    return R_NilValue;
END_RCPP
}
// map_merge_b_b
void map_merge_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::XPtr<std::map<bool, bool> > y);
RcppExport SEXP _cppcontainers_map_merge_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type y(ySEXP);
    map_merge_b_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_i_i
void unordered_map_merge_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::XPtr<std::unordered_map<int, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type y(ySEXP);
    unordered_map_merge_i_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_i_d
void unordered_map_merge_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::XPtr<std::unordered_map<int, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type y(ySEXP);
    unordered_map_merge_i_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_i_s
void unordered_map_merge_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::XPtr<std::unordered_map<int, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type y(ySEXP);
    unordered_map_merge_i_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_i_b
void unordered_map_merge_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::XPtr<std::unordered_map<int, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type y(ySEXP);
    unordered_map_merge_i_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_d_i
void unordered_map_merge_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::XPtr<std::unordered_map<double, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type y(ySEXP);
    unordered_map_merge_d_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_d_d
void unordered_map_merge_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::XPtr<std::unordered_map<double, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type y(ySEXP);
    unordered_map_merge_d_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_d_s
void unordered_map_merge_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::XPtr<std::unordered_map<double, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type y(ySEXP);
    unordered_map_merge_d_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_d_b
void unordered_map_merge_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::XPtr<std::unordered_map<double, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type y(ySEXP);
    unordered_map_merge_d_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_s_i
void unordered_map_merge_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::XPtr<std::unordered_map<std::string, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type y(ySEXP);
    unordered_map_merge_s_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_s_d
void unordered_map_merge_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::XPtr<std::unordered_map<std::string, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type y(ySEXP);
    unordered_map_merge_s_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_s_s
void unordered_map_merge_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::XPtr<std::unordered_map<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type y(ySEXP);
    unordered_map_merge_s_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_s_b
void unordered_map_merge_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::XPtr<std::unordered_map<std::string, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type y(ySEXP);
    unordered_map_merge_s_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_b_i
void unordered_map_merge_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::XPtr<std::unordered_map<bool, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type y(ySEXP);
    unordered_map_merge_b_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_b_d
void unordered_map_merge_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::XPtr<std::unordered_map<bool, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type y(ySEXP);
    unordered_map_merge_b_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_b_s
void unordered_map_merge_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::XPtr<std::unordered_map<bool, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type y(ySEXP);
    unordered_map_merge_b_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_map_merge_b_b
void unordered_map_merge_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::XPtr<std::unordered_map<bool, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_merge_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type y(ySEXP);
    unordered_map_merge_b_b(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_i_i
void multimap_merge_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::XPtr<std::multimap<int, int> > y);
RcppExport SEXP _cppcontainers_multimap_merge_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type y(ySEXP);
    multimap_merge_i_i(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_i_d
void multimap_merge_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::XPtr<std::multimap<int, double> > y);
RcppExport SEXP _cppcontainers_multimap_merge_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type y(ySEXP);
    multimap_merge_i_d(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_i_s
void multimap_merge_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::XPtr<std::multimap<int, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_merge_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type y(ySEXP);
    multimap_merge_i_s(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_i_b
void multimap_merge_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::XPtr<std::multimap<int, bool> > y);
RcppExport SEXP _cppcontainers_multimap_merge_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type y(ySEXP);
    multimap_merge_i_b(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_d_i
void multimap_merge_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::XPtr<std::multimap<double, int> > y);
RcppExport SEXP _cppcontainers_multimap_merge_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type y(ySEXP);
    multimap_merge_d_i(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_d_d
void multimap_merge_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::XPtr<std::multimap<double, double> > y);
RcppExport SEXP _cppcontainers_multimap_merge_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type y(ySEXP);
    multimap_merge_d_d(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_d_s
void multimap_merge_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::XPtr<std::multimap<double, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_merge_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type y(ySEXP);
    multimap_merge_d_s(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_d_b
void multimap_merge_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::XPtr<std::multimap<double, bool> > y);
RcppExport SEXP _cppcontainers_multimap_merge_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type y(ySEXP);
    multimap_merge_d_b(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_s_i
void multimap_merge_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::XPtr<std::multimap<std::string, int> > y);
RcppExport SEXP _cppcontainers_multimap_merge_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type y(ySEXP);
    multimap_merge_s_i(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_s_d
void multimap_merge_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::XPtr<std::multimap<std::string, double> > y);
RcppExport SEXP _cppcontainers_multimap_merge_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type y(ySEXP);
    multimap_merge_s_d(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_s_s
void multimap_merge_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::XPtr<std::multimap<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_merge_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type y(ySEXP);
    multimap_merge_s_s(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_s_b
void multimap_merge_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::XPtr<std::multimap<std::string, bool> > y);
RcppExport SEXP _cppcontainers_multimap_merge_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type y(ySEXP);
    multimap_merge_s_b(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_b_i
void multimap_merge_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::XPtr<std::multimap<bool, int> > y);
RcppExport SEXP _cppcontainers_multimap_merge_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type y(ySEXP);
    multimap_merge_b_i(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_b_d
void multimap_merge_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::XPtr<std::multimap<bool, double> > y);
RcppExport SEXP _cppcontainers_multimap_merge_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type y(ySEXP);
    multimap_merge_b_d(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_b_s
void multimap_merge_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::XPtr<std::multimap<bool, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_merge_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type y(ySEXP);
    multimap_merge_b_s(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_merge_b_b
void multimap_merge_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::XPtr<std::multimap<bool, bool> > y);
RcppExport SEXP _cppcontainers_multimap_merge_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type y(ySEXP);
    multimap_merge_b_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_i_i
void unordered_multimap_merge_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::XPtr<std::unordered_multimap<int, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type y(ySEXP);
    unordered_multimap_merge_i_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_i_d
void unordered_multimap_merge_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::XPtr<std::unordered_multimap<int, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type y(ySEXP);
    unordered_multimap_merge_i_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_i_s
void unordered_multimap_merge_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::XPtr<std::unordered_multimap<int, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type y(ySEXP);
    unordered_multimap_merge_i_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_i_b
void unordered_multimap_merge_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::XPtr<std::unordered_multimap<int, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type y(ySEXP);
    unordered_multimap_merge_i_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_d_i
void unordered_multimap_merge_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::XPtr<std::unordered_multimap<double, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type y(ySEXP);
    unordered_multimap_merge_d_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_d_d
void unordered_multimap_merge_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::XPtr<std::unordered_multimap<double, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type y(ySEXP);
    unordered_multimap_merge_d_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_d_s
void unordered_multimap_merge_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::XPtr<std::unordered_multimap<double, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type y(ySEXP);
    unordered_multimap_merge_d_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_d_b
void unordered_multimap_merge_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::XPtr<std::unordered_multimap<double, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type y(ySEXP);
    unordered_multimap_merge_d_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_s_i
void unordered_multimap_merge_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::XPtr<std::unordered_multimap<std::string, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type y(ySEXP);
    unordered_multimap_merge_s_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_s_d
void unordered_multimap_merge_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::XPtr<std::unordered_multimap<std::string, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type y(ySEXP);
    unordered_multimap_merge_s_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_s_s
void unordered_multimap_merge_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type y(ySEXP);
    unordered_multimap_merge_s_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_s_b
void unordered_multimap_merge_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::XPtr<std::unordered_multimap<std::string, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type y(ySEXP);
    unordered_multimap_merge_s_b(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_b_i
void unordered_multimap_merge_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::XPtr<std::unordered_multimap<bool, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type y(ySEXP);
    unordered_multimap_merge_b_i(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_b_d
void unordered_multimap_merge_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::XPtr<std::unordered_multimap<bool, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type y(ySEXP);
    unordered_multimap_merge_b_d(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_b_s
void unordered_multimap_merge_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::XPtr<std::unordered_multimap<bool, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type y(ySEXP);
    unordered_multimap_merge_b_s(x, y);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_merge_b_b
void unordered_multimap_merge_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::XPtr<std::unordered_multimap<bool, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_merge_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type y(ySEXP);
    unordered_multimap_merge_b_b(x, y);
    return R_NilValue;
END_RCPP
}
// forward_list_merge_i
void forward_list_merge_i(Rcpp::XPtr<std::forward_list<int> > x, Rcpp::XPtr<std::forward_list<int> > y);
RcppExport SEXP _cppcontainers_forward_list_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type y(ySEXP);
    forward_list_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// forward_list_merge_d
void forward_list_merge_d(Rcpp::XPtr<std::forward_list<double> > x, Rcpp::XPtr<std::forward_list<double> > y);
RcppExport SEXP _cppcontainers_forward_list_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type y(ySEXP);
    forward_list_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// forward_list_merge_s
void forward_list_merge_s(Rcpp::XPtr<std::forward_list<std::string> > x, Rcpp::XPtr<std::forward_list<std::string> > y);
RcppExport SEXP _cppcontainers_forward_list_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type y(ySEXP);
    forward_list_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// forward_list_merge_b
void forward_list_merge_b(Rcpp::XPtr<std::forward_list<bool> > x, Rcpp::XPtr<std::forward_list<bool> > y);
RcppExport SEXP _cppcontainers_forward_list_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type y(ySEXP);
    forward_list_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// list_merge_i
void list_merge_i(Rcpp::XPtr<std::list<int> > x, Rcpp::XPtr<std::list<int> > y);
RcppExport SEXP _cppcontainers_list_merge_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type y(ySEXP);
    list_merge_i(x, y);
    return R_NilValue;
END_RCPP
}
// list_merge_d
void list_merge_d(Rcpp::XPtr<std::list<double> > x, Rcpp::XPtr<std::list<double> > y);
RcppExport SEXP _cppcontainers_list_merge_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type y(ySEXP);
    list_merge_d(x, y);
    return R_NilValue;
END_RCPP
}
// list_merge_s
void list_merge_s(Rcpp::XPtr<std::list<std::string> > x, Rcpp::XPtr<std::list<std::string> > y);
RcppExport SEXP _cppcontainers_list_merge_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type y(ySEXP);
    list_merge_s(x, y);
    return R_NilValue;
END_RCPP
}
// list_merge_b
void list_merge_b(Rcpp::XPtr<std::list<bool> > x, Rcpp::XPtr<std::list<bool> > y);
RcppExport SEXP _cppcontainers_list_merge_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type y(ySEXP);
    list_merge_b(x, y);
    return R_NilValue;
END_RCPP
}
// multimap_i_i
Rcpp::XPtr<std::multimap<int, int> > multimap_i_i(Rcpp::IntegerVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_multimap_i_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_i_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_i_d
Rcpp::XPtr<std::multimap<int, double> > multimap_i_d(Rcpp::IntegerVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_multimap_i_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_i_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_i_s
Rcpp::XPtr<std::multimap<int, std::string> > multimap_i_s(Rcpp::IntegerVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_multimap_i_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_i_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_i_b
Rcpp::XPtr<std::multimap<int, bool> > multimap_i_b(Rcpp::IntegerVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_multimap_i_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_i_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_d_i
Rcpp::XPtr<std::multimap<double, int> > multimap_d_i(Rcpp::NumericVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_multimap_d_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_d_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_d_d
Rcpp::XPtr<std::multimap<double, double> > multimap_d_d(Rcpp::NumericVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_multimap_d_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_d_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_d_s
Rcpp::XPtr<std::multimap<double, std::string> > multimap_d_s(Rcpp::NumericVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_multimap_d_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_d_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_d_b
Rcpp::XPtr<std::multimap<double, bool> > multimap_d_b(Rcpp::NumericVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_multimap_d_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_d_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_s_i
Rcpp::XPtr<std::multimap<std::string, int> > multimap_s_i(Rcpp::CharacterVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_multimap_s_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_s_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_s_d
Rcpp::XPtr<std::multimap<std::string, double> > multimap_s_d(Rcpp::CharacterVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_multimap_s_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_s_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_s_s
Rcpp::XPtr<std::multimap<std::string, std::string> > multimap_s_s(Rcpp::CharacterVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_multimap_s_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_s_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_s_b
Rcpp::XPtr<std::multimap<std::string, bool> > multimap_s_b(Rcpp::CharacterVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_multimap_s_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_s_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_b_i
Rcpp::XPtr<std::multimap<bool, int> > multimap_b_i(Rcpp::LogicalVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_multimap_b_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_b_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_b_d
Rcpp::XPtr<std::multimap<bool, double> > multimap_b_d(Rcpp::LogicalVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_multimap_b_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_b_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_b_s
Rcpp::XPtr<std::multimap<bool, std::string> > multimap_b_s(Rcpp::LogicalVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_multimap_b_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_b_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multimap_b_b
Rcpp::XPtr<std::multimap<bool, bool> > multimap_b_b(Rcpp::LogicalVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_multimap_b_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_b_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// multiset_i
Rcpp::XPtr<std::multiset<int> > multiset_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_multiset_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_i(v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_d
Rcpp::XPtr<std::multiset<double> > multiset_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_multiset_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_d(v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_s
Rcpp::XPtr<std::multiset<std::string> > multiset_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_multiset_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_s(v));
    return rcpp_result_gen;
END_RCPP
}
// multiset_b
Rcpp::XPtr<std::multiset<bool> > multiset_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_multiset_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_b(v));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_i
bool set_equal_i(Rcpp::XPtr<std::set<int> > x, Rcpp::XPtr<std::set<int> > y);
RcppExport SEXP _cppcontainers_set_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_d
bool set_equal_d(Rcpp::XPtr<std::set<double> > x, Rcpp::XPtr<std::set<double> > y);
RcppExport SEXP _cppcontainers_set_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_s
bool set_equal_s(Rcpp::XPtr<std::set<std::string> > x, Rcpp::XPtr<std::set<std::string> > y);
RcppExport SEXP _cppcontainers_set_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// set_equal_b
bool set_equal_b(Rcpp::XPtr<std::set<bool> > x, Rcpp::XPtr<std::set<bool> > y);
RcppExport SEXP _cppcontainers_set_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_i
bool unordered_set_equal_i(Rcpp::XPtr<std::unordered_set<int> > x, Rcpp::XPtr<std::unordered_set<int> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_d
bool unordered_set_equal_d(Rcpp::XPtr<std::unordered_set<double> > x, Rcpp::XPtr<std::unordered_set<double> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_s
bool unordered_set_equal_s(Rcpp::XPtr<std::unordered_set<std::string> > x, Rcpp::XPtr<std::unordered_set<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_equal_b
bool unordered_set_equal_b(Rcpp::XPtr<std::unordered_set<bool> > x, Rcpp::XPtr<std::unordered_set<bool> > y);
RcppExport SEXP _cppcontainers_unordered_set_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multiset_equal_i
bool multiset_equal_i(Rcpp::XPtr<std::multiset<int> > x, Rcpp::XPtr<std::multiset<int> > y);
RcppExport SEXP _cppcontainers_multiset_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multiset_equal_d
bool multiset_equal_d(Rcpp::XPtr<std::multiset<double> > x, Rcpp::XPtr<std::multiset<double> > y);
RcppExport SEXP _cppcontainers_multiset_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multiset_equal_s
bool multiset_equal_s(Rcpp::XPtr<std::multiset<std::string> > x, Rcpp::XPtr<std::multiset<std::string> > y);
RcppExport SEXP _cppcontainers_multiset_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multiset_equal_b
bool multiset_equal_b(Rcpp::XPtr<std::multiset<bool> > x, Rcpp::XPtr<std::multiset<bool> > y);
RcppExport SEXP _cppcontainers_multiset_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_equal_i
bool unordered_multiset_equal_i(Rcpp::XPtr<std::unordered_multiset<int> > x, Rcpp::XPtr<std::unordered_multiset<int> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_equal_d
bool unordered_multiset_equal_d(Rcpp::XPtr<std::unordered_multiset<double> > x, Rcpp::XPtr<std::unordered_multiset<double> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_equal_s
bool unordered_multiset_equal_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, Rcpp::XPtr<std::unordered_multiset<std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_equal_b
bool unordered_multiset_equal_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, Rcpp::XPtr<std::unordered_multiset<bool> > y);
RcppExport SEXP _cppcontainers_unordered_multiset_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_i_i
bool map_equal_i_i(Rcpp::XPtr<std::map<int, int> > x, Rcpp::XPtr<std::map<int, int> > y);
RcppExport SEXP _cppcontainers_map_equal_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_i_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_i_d
bool map_equal_i_d(Rcpp::XPtr<std::map<int, double> > x, Rcpp::XPtr<std::map<int, double> > y);
RcppExport SEXP _cppcontainers_map_equal_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_i_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_i_s
bool map_equal_i_s(Rcpp::XPtr<std::map<int, std::string> > x, Rcpp::XPtr<std::map<int, std::string> > y);
RcppExport SEXP _cppcontainers_map_equal_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_i_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_i_b
bool map_equal_i_b(Rcpp::XPtr<std::map<int, bool> > x, Rcpp::XPtr<std::map<int, bool> > y);
RcppExport SEXP _cppcontainers_map_equal_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_i_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_d_i
bool map_equal_d_i(Rcpp::XPtr<std::map<double, int> > x, Rcpp::XPtr<std::map<double, int> > y);
RcppExport SEXP _cppcontainers_map_equal_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_d_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_d_d
bool map_equal_d_d(Rcpp::XPtr<std::map<double, double> > x, Rcpp::XPtr<std::map<double, double> > y);
RcppExport SEXP _cppcontainers_map_equal_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_d_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_d_s
bool map_equal_d_s(Rcpp::XPtr<std::map<double, std::string> > x, Rcpp::XPtr<std::map<double, std::string> > y);
RcppExport SEXP _cppcontainers_map_equal_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_d_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_d_b
bool map_equal_d_b(Rcpp::XPtr<std::map<double, bool> > x, Rcpp::XPtr<std::map<double, bool> > y);
RcppExport SEXP _cppcontainers_map_equal_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_d_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_s_i
bool map_equal_s_i(Rcpp::XPtr<std::map<std::string, int> > x, Rcpp::XPtr<std::map<std::string, int> > y);
RcppExport SEXP _cppcontainers_map_equal_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_s_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_s_d
bool map_equal_s_d(Rcpp::XPtr<std::map<std::string, double> > x, Rcpp::XPtr<std::map<std::string, double> > y);
RcppExport SEXP _cppcontainers_map_equal_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_s_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_s_s
bool map_equal_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, Rcpp::XPtr<std::map<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_map_equal_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_s_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_s_b
bool map_equal_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, Rcpp::XPtr<std::map<std::string, bool> > y);
RcppExport SEXP _cppcontainers_map_equal_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_s_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_b_i
bool map_equal_b_i(Rcpp::XPtr<std::map<bool, int> > x, Rcpp::XPtr<std::map<bool, int> > y);
RcppExport SEXP _cppcontainers_map_equal_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_b_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_b_d
bool map_equal_b_d(Rcpp::XPtr<std::map<bool, double> > x, Rcpp::XPtr<std::map<bool, double> > y);
RcppExport SEXP _cppcontainers_map_equal_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_b_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_b_s
bool map_equal_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, Rcpp::XPtr<std::map<bool, std::string> > y);
RcppExport SEXP _cppcontainers_map_equal_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_b_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_equal_b_b
bool map_equal_b_b(Rcpp::XPtr<std::map<bool, bool> > x, Rcpp::XPtr<std::map<bool, bool> > y);
RcppExport SEXP _cppcontainers_map_equal_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(map_equal_b_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_i_i
bool unordered_map_equal_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, Rcpp::XPtr<std::unordered_map<int, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_i_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_i_d
bool unordered_map_equal_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, Rcpp::XPtr<std::unordered_map<int, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_i_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_i_s
bool unordered_map_equal_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, Rcpp::XPtr<std::unordered_map<int, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_i_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_i_b
bool unordered_map_equal_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, Rcpp::XPtr<std::unordered_map<int, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_i_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_d_i
bool unordered_map_equal_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, Rcpp::XPtr<std::unordered_map<double, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_d_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_d_d
bool unordered_map_equal_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, Rcpp::XPtr<std::unordered_map<double, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_d_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_d_s
bool unordered_map_equal_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, Rcpp::XPtr<std::unordered_map<double, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_d_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_d_b
bool unordered_map_equal_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, Rcpp::XPtr<std::unordered_map<double, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_d_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_s_i
bool unordered_map_equal_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, Rcpp::XPtr<std::unordered_map<std::string, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_s_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_s_d
bool unordered_map_equal_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, Rcpp::XPtr<std::unordered_map<std::string, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_s_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_s_s
bool unordered_map_equal_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, Rcpp::XPtr<std::unordered_map<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_s_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_s_b
bool unordered_map_equal_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, Rcpp::XPtr<std::unordered_map<std::string, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_s_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_b_i
bool unordered_map_equal_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, Rcpp::XPtr<std::unordered_map<bool, int> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_b_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_b_d
bool unordered_map_equal_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, Rcpp::XPtr<std::unordered_map<bool, double> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_b_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_b_s
bool unordered_map_equal_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, Rcpp::XPtr<std::unordered_map<bool, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_b_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_equal_b_b
bool unordered_map_equal_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, Rcpp::XPtr<std::unordered_map<bool, bool> > y);
RcppExport SEXP _cppcontainers_unordered_map_equal_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_equal_b_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_i_i
bool multimap_equal_i_i(Rcpp::XPtr<std::multimap<int, int> > x, Rcpp::XPtr<std::multimap<int, int> > y);
RcppExport SEXP _cppcontainers_multimap_equal_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_i_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_i_d
bool multimap_equal_i_d(Rcpp::XPtr<std::multimap<int, double> > x, Rcpp::XPtr<std::multimap<int, double> > y);
RcppExport SEXP _cppcontainers_multimap_equal_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_i_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_i_s
bool multimap_equal_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, Rcpp::XPtr<std::multimap<int, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_equal_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_i_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_i_b
bool multimap_equal_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, Rcpp::XPtr<std::multimap<int, bool> > y);
RcppExport SEXP _cppcontainers_multimap_equal_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_i_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_d_i
bool multimap_equal_d_i(Rcpp::XPtr<std::multimap<double, int> > x, Rcpp::XPtr<std::multimap<double, int> > y);
RcppExport SEXP _cppcontainers_multimap_equal_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_d_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_d_d
bool multimap_equal_d_d(Rcpp::XPtr<std::multimap<double, double> > x, Rcpp::XPtr<std::multimap<double, double> > y);
RcppExport SEXP _cppcontainers_multimap_equal_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_d_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_d_s
bool multimap_equal_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, Rcpp::XPtr<std::multimap<double, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_equal_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_d_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_d_b
bool multimap_equal_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, Rcpp::XPtr<std::multimap<double, bool> > y);
RcppExport SEXP _cppcontainers_multimap_equal_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_d_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_s_i
bool multimap_equal_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, Rcpp::XPtr<std::multimap<std::string, int> > y);
RcppExport SEXP _cppcontainers_multimap_equal_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_s_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_s_d
bool multimap_equal_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, Rcpp::XPtr<std::multimap<std::string, double> > y);
RcppExport SEXP _cppcontainers_multimap_equal_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_s_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_s_s
bool multimap_equal_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, Rcpp::XPtr<std::multimap<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_equal_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_s_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_s_b
bool multimap_equal_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, Rcpp::XPtr<std::multimap<std::string, bool> > y);
RcppExport SEXP _cppcontainers_multimap_equal_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_s_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_b_i
bool multimap_equal_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, Rcpp::XPtr<std::multimap<bool, int> > y);
RcppExport SEXP _cppcontainers_multimap_equal_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_b_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_b_d
bool multimap_equal_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, Rcpp::XPtr<std::multimap<bool, double> > y);
RcppExport SEXP _cppcontainers_multimap_equal_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_b_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_b_s
bool multimap_equal_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, Rcpp::XPtr<std::multimap<bool, std::string> > y);
RcppExport SEXP _cppcontainers_multimap_equal_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_b_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multimap_equal_b_b
bool multimap_equal_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, Rcpp::XPtr<std::multimap<bool, bool> > y);
RcppExport SEXP _cppcontainers_multimap_equal_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_equal_b_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_i_i
bool unordered_multimap_equal_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, Rcpp::XPtr<std::unordered_multimap<int, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_i_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_i_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_i_d
bool unordered_multimap_equal_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, Rcpp::XPtr<std::unordered_multimap<int, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_i_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_i_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_i_s
bool unordered_multimap_equal_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, Rcpp::XPtr<std::unordered_multimap<int, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_i_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_i_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_i_b
bool unordered_multimap_equal_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, Rcpp::XPtr<std::unordered_multimap<int, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_i_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_i_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_d_i
bool unordered_multimap_equal_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, Rcpp::XPtr<std::unordered_multimap<double, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_d_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_d_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_d_d
bool unordered_multimap_equal_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, Rcpp::XPtr<std::unordered_multimap<double, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_d_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_d_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_d_s
bool unordered_multimap_equal_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, Rcpp::XPtr<std::unordered_multimap<double, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_d_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_d_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_d_b
bool unordered_multimap_equal_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, Rcpp::XPtr<std::unordered_multimap<double, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_d_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_d_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_s_i
bool unordered_multimap_equal_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, Rcpp::XPtr<std::unordered_multimap<std::string, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_s_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_s_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_s_d
bool unordered_multimap_equal_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, Rcpp::XPtr<std::unordered_multimap<std::string, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_s_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_s_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_s_s
bool unordered_multimap_equal_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_s_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_s_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_s_b
bool unordered_multimap_equal_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, Rcpp::XPtr<std::unordered_multimap<std::string, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_s_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_s_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_b_i
bool unordered_multimap_equal_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, Rcpp::XPtr<std::unordered_multimap<bool, int> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_b_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_b_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_b_d
bool unordered_multimap_equal_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, Rcpp::XPtr<std::unordered_multimap<bool, double> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_b_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_b_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_b_s
bool unordered_multimap_equal_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, Rcpp::XPtr<std::unordered_multimap<bool, std::string> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_b_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_b_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_equal_b_b
bool unordered_multimap_equal_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, Rcpp::XPtr<std::unordered_multimap<bool, bool> > y);
RcppExport SEXP _cppcontainers_unordered_multimap_equal_b_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_equal_b_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// stack_equal_i
bool stack_equal_i(Rcpp::XPtr<std::stack<int> > x, Rcpp::XPtr<std::stack<int> > y);
RcppExport SEXP _cppcontainers_stack_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(stack_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// stack_equal_d
bool stack_equal_d(Rcpp::XPtr<std::stack<double> > x, Rcpp::XPtr<std::stack<double> > y);
RcppExport SEXP _cppcontainers_stack_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(stack_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// stack_equal_s
bool stack_equal_s(Rcpp::XPtr<std::stack<std::string> > x, Rcpp::XPtr<std::stack<std::string> > y);
RcppExport SEXP _cppcontainers_stack_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(stack_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// stack_equal_b
bool stack_equal_b(Rcpp::XPtr<std::stack<bool> > x, Rcpp::XPtr<std::stack<bool> > y);
RcppExport SEXP _cppcontainers_stack_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(stack_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// queue_equal_i
bool queue_equal_i(Rcpp::XPtr<std::queue<int> > x, Rcpp::XPtr<std::queue<int> > y);
RcppExport SEXP _cppcontainers_queue_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(queue_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// queue_equal_d
bool queue_equal_d(Rcpp::XPtr<std::queue<double> > x, Rcpp::XPtr<std::queue<double> > y);
RcppExport SEXP _cppcontainers_queue_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(queue_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// queue_equal_s
bool queue_equal_s(Rcpp::XPtr<std::queue<std::string> > x, Rcpp::XPtr<std::queue<std::string> > y);
RcppExport SEXP _cppcontainers_queue_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(queue_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// queue_equal_b
bool queue_equal_b(Rcpp::XPtr<std::queue<bool> > x, Rcpp::XPtr<std::queue<bool> > y);
RcppExport SEXP _cppcontainers_queue_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(queue_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vector_equal_i
bool vector_equal_i(Rcpp::XPtr<std::vector<int> > x, Rcpp::XPtr<std::vector<int> > y);
RcppExport SEXP _cppcontainers_vector_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vector_equal_d
bool vector_equal_d(Rcpp::XPtr<std::vector<double> > x, Rcpp::XPtr<std::vector<double> > y);
RcppExport SEXP _cppcontainers_vector_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vector_equal_s
bool vector_equal_s(Rcpp::XPtr<std::vector<std::string> > x, Rcpp::XPtr<std::vector<std::string> > y);
RcppExport SEXP _cppcontainers_vector_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vector_equal_b
bool vector_equal_b(Rcpp::XPtr<std::vector<bool> > x, Rcpp::XPtr<std::vector<bool> > y);
RcppExport SEXP _cppcontainers_vector_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// deque_equal_i
bool deque_equal_i(Rcpp::XPtr<std::deque<int> > x, Rcpp::XPtr<std::deque<int> > y);
RcppExport SEXP _cppcontainers_deque_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(deque_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// deque_equal_d
bool deque_equal_d(Rcpp::XPtr<std::deque<double> > x, Rcpp::XPtr<std::deque<double> > y);
RcppExport SEXP _cppcontainers_deque_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(deque_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// deque_equal_s
bool deque_equal_s(Rcpp::XPtr<std::deque<std::string> > x, Rcpp::XPtr<std::deque<std::string> > y);
RcppExport SEXP _cppcontainers_deque_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(deque_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// deque_equal_b
bool deque_equal_b(Rcpp::XPtr<std::deque<bool> > x, Rcpp::XPtr<std::deque<bool> > y);
RcppExport SEXP _cppcontainers_deque_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(deque_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_equal_i
bool forward_list_equal_i(Rcpp::XPtr<std::forward_list<int> > x, Rcpp::XPtr<std::forward_list<int> > y);
RcppExport SEXP _cppcontainers_forward_list_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_equal_d
bool forward_list_equal_d(Rcpp::XPtr<std::forward_list<double> > x, Rcpp::XPtr<std::forward_list<double> > y);
RcppExport SEXP _cppcontainers_forward_list_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_equal_s
bool forward_list_equal_s(Rcpp::XPtr<std::forward_list<std::string> > x, Rcpp::XPtr<std::forward_list<std::string> > y);
RcppExport SEXP _cppcontainers_forward_list_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_equal_b
bool forward_list_equal_b(Rcpp::XPtr<std::forward_list<bool> > x, Rcpp::XPtr<std::forward_list<bool> > y);
RcppExport SEXP _cppcontainers_forward_list_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// list_equal_i
bool list_equal_i(Rcpp::XPtr<std::list<int> > x, Rcpp::XPtr<std::list<int> > y);
RcppExport SEXP _cppcontainers_list_equal_i(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(list_equal_i(x, y));
    return rcpp_result_gen;
END_RCPP
}
// list_equal_d
bool list_equal_d(Rcpp::XPtr<std::list<double> > x, Rcpp::XPtr<std::list<double> > y);
RcppExport SEXP _cppcontainers_list_equal_d(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(list_equal_d(x, y));
    return rcpp_result_gen;
END_RCPP
}
// list_equal_s
bool list_equal_s(Rcpp::XPtr<std::list<std::string> > x, Rcpp::XPtr<std::list<std::string> > y);
RcppExport SEXP _cppcontainers_list_equal_s(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(list_equal_s(x, y));
    return rcpp_result_gen;
END_RCPP
}
// list_equal_b
bool list_equal_b(Rcpp::XPtr<std::list<bool> > x, Rcpp::XPtr<std::list<bool> > y);
RcppExport SEXP _cppcontainers_list_equal_b(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(list_equal_b(x, y));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_i_i
int map_bracket_i_i(Rcpp::XPtr<std::map<int, int> > x, const int key);
RcppExport SEXP _cppcontainers_map_bracket_i_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_i_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_i_d
double map_bracket_i_d(Rcpp::XPtr<std::map<int, double> > x, const int key);
RcppExport SEXP _cppcontainers_map_bracket_i_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_i_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_i_s
std::string map_bracket_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const int key);
RcppExport SEXP _cppcontainers_map_bracket_i_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_i_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_i_b
bool map_bracket_i_b(Rcpp::XPtr<std::map<int, bool> > x, const int key);
RcppExport SEXP _cppcontainers_map_bracket_i_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_i_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_d_i
int map_bracket_d_i(Rcpp::XPtr<std::map<double, int> > x, const double key);
RcppExport SEXP _cppcontainers_map_bracket_d_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_d_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_d_d
double map_bracket_d_d(Rcpp::XPtr<std::map<double, double> > x, const double key);
RcppExport SEXP _cppcontainers_map_bracket_d_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_d_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_d_s
std::string map_bracket_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const double key);
RcppExport SEXP _cppcontainers_map_bracket_d_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_d_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_d_b
bool map_bracket_d_b(Rcpp::XPtr<std::map<double, bool> > x, const double key);
RcppExport SEXP _cppcontainers_map_bracket_d_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_d_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_s_i
int map_bracket_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_bracket_s_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_s_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_s_d
double map_bracket_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_bracket_s_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_s_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_s_s
std::string map_bracket_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_bracket_s_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_s_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_s_b
bool map_bracket_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const std::string key);
RcppExport SEXP _cppcontainers_map_bracket_s_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_s_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_b_i
int map_bracket_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool key);
RcppExport SEXP _cppcontainers_map_bracket_b_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_b_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_b_d
double map_bracket_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool key);
RcppExport SEXP _cppcontainers_map_bracket_b_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_b_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_b_s
std::string map_bracket_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool key);
RcppExport SEXP _cppcontainers_map_bracket_b_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_b_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// map_bracket_b_b
bool map_bracket_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool key);
RcppExport SEXP _cppcontainers_map_bracket_b_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(map_bracket_b_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_i_i
int unordered_map_bracket_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_i_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_i_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_i_d
double unordered_map_bracket_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_i_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_i_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_i_s
std::string unordered_map_bracket_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_i_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_i_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_i_b
bool unordered_map_bracket_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const int key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_i_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_i_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_d_i
int unordered_map_bracket_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_d_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_d_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_d_d
double unordered_map_bracket_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_d_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_d_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_d_s
std::string unordered_map_bracket_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_d_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_d_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_d_b
bool unordered_map_bracket_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const double key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_d_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_d_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_s_i
int unordered_map_bracket_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_s_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_s_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_s_d
double unordered_map_bracket_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_s_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_s_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_s_s
std::string unordered_map_bracket_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_s_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_s_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_s_b
bool unordered_map_bracket_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::string key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_s_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_s_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_b_i
int unordered_map_bracket_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_b_i(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_b_i(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_b_d
double unordered_map_bracket_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_b_d(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_b_d(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_b_s
std::string unordered_map_bracket_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_b_s(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_b_s(x, key));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_bracket_b_b
bool unordered_map_bracket_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const bool key);
RcppExport SEXP _cppcontainers_unordered_map_bracket_b_b(SEXP xSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_bracket_b_b(x, key));
    return rcpp_result_gen;
END_RCPP
}
// vector_bracket_i
int vector_bracket_i(Rcpp::XPtr<std::vector<int> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_bracket_i(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_bracket_i(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_bracket_d
double vector_bracket_d(Rcpp::XPtr<std::vector<double> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_bracket_d(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_bracket_d(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_bracket_s
std::string vector_bracket_s(Rcpp::XPtr<std::vector<std::string> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_bracket_s(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_bracket_s(x, index));
    return rcpp_result_gen;
END_RCPP
}
// vector_bracket_b
bool vector_bracket_b(Rcpp::XPtr<std::vector<bool> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_vector_bracket_b(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_bracket_b(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_bracket_i
int deque_bracket_i(Rcpp::XPtr<std::deque<int> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_bracket_i(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_bracket_i(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_bracket_d
double deque_bracket_d(Rcpp::XPtr<std::deque<double> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_bracket_d(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_bracket_d(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_bracket_s
std::string deque_bracket_s(Rcpp::XPtr<std::deque<std::string> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_bracket_s(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_bracket_s(x, index));
    return rcpp_result_gen;
END_RCPP
}
// deque_bracket_b
bool deque_bracket_b(Rcpp::XPtr<std::deque<bool> > x, const std::size_t index);
RcppExport SEXP _cppcontainers_deque_bracket_b(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_bracket_b(x, index));
    return rcpp_result_gen;
END_RCPP
}
// stack_pop_i
void stack_pop_i(Rcpp::XPtr<std::stack<int> > x);
RcppExport SEXP _cppcontainers_stack_pop_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    stack_pop_i(x);
    return R_NilValue;
END_RCPP
}
// stack_pop_d
void stack_pop_d(Rcpp::XPtr<std::stack<double> > x);
RcppExport SEXP _cppcontainers_stack_pop_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    stack_pop_d(x);
    return R_NilValue;
END_RCPP
}
// stack_pop_s
void stack_pop_s(Rcpp::XPtr<std::stack<std::string> > x);
RcppExport SEXP _cppcontainers_stack_pop_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    stack_pop_s(x);
    return R_NilValue;
END_RCPP
}
// stack_pop_b
void stack_pop_b(Rcpp::XPtr<std::stack<bool> > x);
RcppExport SEXP _cppcontainers_stack_pop_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    stack_pop_b(x);
    return R_NilValue;
END_RCPP
}
// queue_pop_i
void queue_pop_i(Rcpp::XPtr<std::queue<int> > x);
RcppExport SEXP _cppcontainers_queue_pop_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    queue_pop_i(x);
    return R_NilValue;
END_RCPP
}
// queue_pop_d
void queue_pop_d(Rcpp::XPtr<std::queue<double> > x);
RcppExport SEXP _cppcontainers_queue_pop_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    queue_pop_d(x);
    return R_NilValue;
END_RCPP
}
// queue_pop_s
void queue_pop_s(Rcpp::XPtr<std::queue<std::string> > x);
RcppExport SEXP _cppcontainers_queue_pop_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    queue_pop_s(x);
    return R_NilValue;
END_RCPP
}
// queue_pop_b
void queue_pop_b(Rcpp::XPtr<std::queue<bool> > x);
RcppExport SEXP _cppcontainers_queue_pop_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    queue_pop_b(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_i_d
void priority_queue_pop_i_d(Rcpp::XPtr<std::priority_queue<int> > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    priority_queue_pop_i_d(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_d_d
void priority_queue_pop_d_d(Rcpp::XPtr<std::priority_queue<double> > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    priority_queue_pop_d_d(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_s_d
void priority_queue_pop_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    priority_queue_pop_s_d(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_b_d
void priority_queue_pop_b_d(Rcpp::XPtr<std::priority_queue<bool> > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    priority_queue_pop_b_d(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_i_a
void priority_queue_pop_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_i_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    priority_queue_pop_i_a(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_d_a
void priority_queue_pop_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_d_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    priority_queue_pop_d_a(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_s_a
void priority_queue_pop_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_s_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    priority_queue_pop_s_a(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_pop_b_a
void priority_queue_pop_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x);
RcppExport SEXP _cppcontainers_priority_queue_pop_b_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    priority_queue_pop_b_a(x);
    return R_NilValue;
END_RCPP
}
// vector_pop_back_i
void vector_pop_back_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_pop_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    vector_pop_back_i(x);
    return R_NilValue;
END_RCPP
}
// vector_pop_back_d
void vector_pop_back_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_pop_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    vector_pop_back_d(x);
    return R_NilValue;
END_RCPP
}
// vector_pop_back_s
void vector_pop_back_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_pop_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    vector_pop_back_s(x);
    return R_NilValue;
END_RCPP
}
// vector_pop_back_b
void vector_pop_back_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_pop_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    vector_pop_back_b(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_back_i
void deque_pop_back_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_pop_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    deque_pop_back_i(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_back_d
void deque_pop_back_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_pop_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    deque_pop_back_d(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_back_s
void deque_pop_back_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_pop_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    deque_pop_back_s(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_back_b
void deque_pop_back_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_pop_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    deque_pop_back_b(x);
    return R_NilValue;
END_RCPP
}
// list_pop_back_i
void list_pop_back_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_pop_back_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    list_pop_back_i(x);
    return R_NilValue;
END_RCPP
}
// list_pop_back_d
void list_pop_back_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_pop_back_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    list_pop_back_d(x);
    return R_NilValue;
END_RCPP
}
// list_pop_back_s
void list_pop_back_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_pop_back_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    list_pop_back_s(x);
    return R_NilValue;
END_RCPP
}
// list_pop_back_b
void list_pop_back_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_pop_back_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    list_pop_back_b(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_front_i
void deque_pop_front_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_pop_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    deque_pop_front_i(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_front_d
void deque_pop_front_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_pop_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    deque_pop_front_d(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_front_s
void deque_pop_front_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_pop_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    deque_pop_front_s(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_front_b
void deque_pop_front_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_pop_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    deque_pop_front_b(x);
    return R_NilValue;
END_RCPP
}
// forward_list_pop_front_i
void forward_list_pop_front_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_pop_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    forward_list_pop_front_i(x);
    return R_NilValue;
END_RCPP
}
// forward_list_pop_front_d
void forward_list_pop_front_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_pop_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    forward_list_pop_front_d(x);
    return R_NilValue;
END_RCPP
}
// forward_list_pop_front_s
void forward_list_pop_front_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_pop_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    forward_list_pop_front_s(x);
    return R_NilValue;
END_RCPP
}
// forward_list_pop_front_b
void forward_list_pop_front_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_pop_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    forward_list_pop_front_b(x);
    return R_NilValue;
END_RCPP
}
// list_pop_front_i
void list_pop_front_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_pop_front_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    list_pop_front_i(x);
    return R_NilValue;
END_RCPP
}
// list_pop_front_d
void list_pop_front_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_pop_front_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    list_pop_front_d(x);
    return R_NilValue;
END_RCPP
}
// list_pop_front_s
void list_pop_front_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_pop_front_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    list_pop_front_s(x);
    return R_NilValue;
END_RCPP
}
// list_pop_front_b
void list_pop_front_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_pop_front_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    list_pop_front_b(x);
    return R_NilValue;
END_RCPP
}
// set_print_i
void set_print_i(Rcpp::XPtr<std::set<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_set_print_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    set_print_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_d
void set_print_d(Rcpp::XPtr<std::set<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_set_print_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    set_print_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_s
void set_print_s(Rcpp::XPtr<std::set<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_set_print_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    set_print_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// set_print_b
void set_print_b(Rcpp::XPtr<std::set<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_set_print_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    set_print_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_i
void unordered_set_print_i(Rcpp::XPtr<std::unordered_set<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_d
void unordered_set_print_d(Rcpp::XPtr<std::unordered_set<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_s
void unordered_set_print_s(Rcpp::XPtr<std::unordered_set<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_print_b
void unordered_set_print_b(Rcpp::XPtr<std::unordered_set<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_print_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_set_print_b(x, n);
    return R_NilValue;
END_RCPP
}
// multiset_print_i
void multiset_print_i(Rcpp::XPtr<std::multiset<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multiset_print_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    multiset_print_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multiset_print_d
void multiset_print_d(Rcpp::XPtr<std::multiset<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multiset_print_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    multiset_print_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multiset_print_s
void multiset_print_s(Rcpp::XPtr<std::multiset<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multiset_print_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    multiset_print_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multiset_print_b
void multiset_print_b(Rcpp::XPtr<std::multiset<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multiset_print_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    multiset_print_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_print_i
void unordered_multiset_print_i(Rcpp::XPtr<std::unordered_multiset<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_print_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multiset_print_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_print_d
void unordered_multiset_print_d(Rcpp::XPtr<std::unordered_multiset<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_print_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multiset_print_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_print_s
void unordered_multiset_print_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_print_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multiset_print_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_print_b
void unordered_multiset_print_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_print_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multiset_print_b(x, n);
    return R_NilValue;
END_RCPP
}
// map_print_i_i
void map_print_i_i(Rcpp::XPtr<std::map<int, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_print_i_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    map_print_i_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_i_d
void map_print_i_d(Rcpp::XPtr<std::map<int, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_print_i_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    map_print_i_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_i_s
void map_print_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_print_i_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    map_print_i_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_i_b
void map_print_i_b(Rcpp::XPtr<std::map<int, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_print_i_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    map_print_i_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_d_i
void map_print_d_i(Rcpp::XPtr<std::map<double, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_print_d_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    map_print_d_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_d_d
void map_print_d_d(Rcpp::XPtr<std::map<double, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_print_d_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    map_print_d_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_d_s
void map_print_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_print_d_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    map_print_d_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_d_b
void map_print_d_b(Rcpp::XPtr<std::map<double, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_print_d_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    map_print_d_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_s_i
void map_print_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_print_s_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    map_print_s_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_s_d
void map_print_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_print_s_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    map_print_s_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_s_s
void map_print_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_print_s_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    map_print_s_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_s_b
void map_print_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_print_s_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    map_print_s_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_b_i
void map_print_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_print_b_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    map_print_b_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_b_d
void map_print_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_print_b_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    map_print_b_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_b_s
void map_print_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_print_b_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    map_print_b_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// map_print_b_b
void map_print_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_print_b_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    map_print_b_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_i_i
void unordered_map_print_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_i_d
void unordered_map_print_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_i_s
void unordered_map_print_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_i_b
void unordered_map_print_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_d_i
void unordered_map_print_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_d_d
void unordered_map_print_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_d_s
void unordered_map_print_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_d_b
void unordered_map_print_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_s_i
void unordered_map_print_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_s_d
void unordered_map_print_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_s_s
void unordered_map_print_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_s_b
void unordered_map_print_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_b_i
void unordered_map_print_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_b_d
void unordered_map_print_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_b_s
void unordered_map_print_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_print_b_b
void unordered_map_print_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_print_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_map_print_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// multimap_print_i_i
void multimap_print_i_i(Rcpp::XPtr<std::multimap<int, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_print_i_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    multimap_print_i_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_i_d
void multimap_print_i_d(Rcpp::XPtr<std::multimap<int, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_print_i_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    multimap_print_i_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_i_s
void multimap_print_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_print_i_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    multimap_print_i_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_i_b
void multimap_print_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_print_i_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    multimap_print_i_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_d_i
void multimap_print_d_i(Rcpp::XPtr<std::multimap<double, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_print_d_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    multimap_print_d_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_d_d
void multimap_print_d_d(Rcpp::XPtr<std::multimap<double, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_print_d_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    multimap_print_d_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_d_s
void multimap_print_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_print_d_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    multimap_print_d_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_d_b
void multimap_print_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_print_d_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    multimap_print_d_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_s_i
void multimap_print_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_print_s_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    multimap_print_s_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_s_d
void multimap_print_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_print_s_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    multimap_print_s_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_s_s
void multimap_print_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_print_s_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    multimap_print_s_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_s_b
void multimap_print_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_print_s_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    multimap_print_s_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_b_i
void multimap_print_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_print_b_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    multimap_print_b_i(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_b_d
void multimap_print_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_print_b_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    multimap_print_b_d(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_b_s
void multimap_print_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_print_b_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    multimap_print_b_s(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// multimap_print_b_b
void multimap_print_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_print_b_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    multimap_print_b_b(x, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_i_i
void unordered_multimap_print_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_i_d
void unordered_multimap_print_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_i_s
void unordered_multimap_print_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_i_b
void unordered_multimap_print_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_d_i
void unordered_multimap_print_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_d_d
void unordered_multimap_print_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_d_s
void unordered_multimap_print_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_d_b
void unordered_multimap_print_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_s_i
void unordered_multimap_print_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_s_d
void unordered_multimap_print_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_s_s
void unordered_multimap_print_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_s_b
void unordered_multimap_print_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_b_i
void unordered_multimap_print_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_b_d
void unordered_multimap_print_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_b_s
void unordered_multimap_print_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_print_b_b
void unordered_multimap_print_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_print_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    unordered_multimap_print_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// stack_print_i
void stack_print_i(Rcpp::XPtr<std::stack<int> > p);
RcppExport SEXP _cppcontainers_stack_print_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type p(pSEXP);
    stack_print_i(p);
    return R_NilValue;
END_RCPP
}
// stack_print_d
void stack_print_d(Rcpp::XPtr<std::stack<double> > p);
RcppExport SEXP _cppcontainers_stack_print_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type p(pSEXP);
    stack_print_d(p);
    return R_NilValue;
END_RCPP
}
// stack_print_s
void stack_print_s(Rcpp::XPtr<std::stack<std::string> > p);
RcppExport SEXP _cppcontainers_stack_print_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type p(pSEXP);
    stack_print_s(p);
    return R_NilValue;
END_RCPP
}
// stack_print_b
void stack_print_b(Rcpp::XPtr<std::stack<bool> > p);
RcppExport SEXP _cppcontainers_stack_print_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type p(pSEXP);
    stack_print_b(p);
    return R_NilValue;
END_RCPP
}
// queue_print_i
void queue_print_i(Rcpp::XPtr<std::queue<int> > p);
RcppExport SEXP _cppcontainers_queue_print_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type p(pSEXP);
    queue_print_i(p);
    return R_NilValue;
END_RCPP
}
// queue_print_d
void queue_print_d(Rcpp::XPtr<std::queue<double> > p);
RcppExport SEXP _cppcontainers_queue_print_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type p(pSEXP);
    queue_print_d(p);
    return R_NilValue;
END_RCPP
}
// queue_print_s
void queue_print_s(Rcpp::XPtr<std::queue<std::string> > p);
RcppExport SEXP _cppcontainers_queue_print_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type p(pSEXP);
    queue_print_s(p);
    return R_NilValue;
END_RCPP
}
// queue_print_b
void queue_print_b(Rcpp::XPtr<std::queue<bool> > p);
RcppExport SEXP _cppcontainers_queue_print_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type p(pSEXP);
    queue_print_b(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_i_d
void priority_queue_print_i_d(Rcpp::XPtr<std::priority_queue<int> > p);
RcppExport SEXP _cppcontainers_priority_queue_print_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type p(pSEXP);
    priority_queue_print_i_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_d_d
void priority_queue_print_d_d(Rcpp::XPtr<std::priority_queue<double> > p);
RcppExport SEXP _cppcontainers_priority_queue_print_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type p(pSEXP);
    priority_queue_print_d_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_s_d
void priority_queue_print_s_d(Rcpp::XPtr<std::priority_queue<std::string> > p);
RcppExport SEXP _cppcontainers_priority_queue_print_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type p(pSEXP);
    priority_queue_print_s_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_b_d
void priority_queue_print_b_d(Rcpp::XPtr<std::priority_queue<bool> > p);
RcppExport SEXP _cppcontainers_priority_queue_print_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type p(pSEXP);
    priority_queue_print_b_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_i_a
void priority_queue_print_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > p);
RcppExport SEXP _cppcontainers_priority_queue_print_i_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type p(pSEXP);
    priority_queue_print_i_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_d_a
void priority_queue_print_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > p);
RcppExport SEXP _cppcontainers_priority_queue_print_d_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type p(pSEXP);
    priority_queue_print_d_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_s_a
void priority_queue_print_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > p);
RcppExport SEXP _cppcontainers_priority_queue_print_s_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type p(pSEXP);
    priority_queue_print_s_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_print_b_a
void priority_queue_print_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > p);
RcppExport SEXP _cppcontainers_priority_queue_print_b_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type p(pSEXP);
    priority_queue_print_b_a(p);
    return R_NilValue;
END_RCPP
}
// vector_print_i
void vector_print_i(Rcpp::XPtr<std::vector<int> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_print_i(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    vector_print_i(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// vector_print_d
void vector_print_d(Rcpp::XPtr<std::vector<double> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_print_d(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    vector_print_d(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// vector_print_s
void vector_print_s(Rcpp::XPtr<std::vector<std::string> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_print_s(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    vector_print_s(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// vector_print_b
void vector_print_b(Rcpp::XPtr<std::vector<bool> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_print_b(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    vector_print_b(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// deque_print_i
void deque_print_i(Rcpp::XPtr<std::deque<int> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_print_i(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    deque_print_i(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// deque_print_d
void deque_print_d(Rcpp::XPtr<std::deque<double> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_print_d(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    deque_print_d(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// deque_print_s
void deque_print_s(Rcpp::XPtr<std::deque<std::string> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_print_s(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    deque_print_s(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// deque_print_b
void deque_print_b(Rcpp::XPtr<std::deque<bool> > p, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_print_b(SEXP pSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    deque_print_b(p, use_n, n, reverse, use_from, from, use_to, to);
    return R_NilValue;
END_RCPP
}
// forward_list_print_i
void forward_list_print_i(Rcpp::XPtr<std::forward_list<int> > p, const std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_print_i(SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    forward_list_print_i(p, n);
    return R_NilValue;
END_RCPP
}
// forward_list_print_d
void forward_list_print_d(Rcpp::XPtr<std::forward_list<double> > p, const std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_print_d(SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    forward_list_print_d(p, n);
    return R_NilValue;
END_RCPP
}
// forward_list_print_s
void forward_list_print_s(Rcpp::XPtr<std::forward_list<std::string> > p, const std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_print_s(SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    forward_list_print_s(p, n);
    return R_NilValue;
END_RCPP
}
// forward_list_print_b
void forward_list_print_b(Rcpp::XPtr<std::forward_list<bool> > p, const std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_print_b(SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    forward_list_print_b(p, n);
    return R_NilValue;
END_RCPP
}
// list_print_i
void list_print_i(Rcpp::XPtr<std::list<int> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_print_i(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    list_print_i(x, n, reverse);
    return R_NilValue;
END_RCPP
}
// list_print_d
void list_print_d(Rcpp::XPtr<std::list<double> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_print_d(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    list_print_d(x, n, reverse);
    return R_NilValue;
END_RCPP
}
// list_print_s
void list_print_s(Rcpp::XPtr<std::list<std::string> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_print_s(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    list_print_s(x, n, reverse);
    return R_NilValue;
END_RCPP
}
// list_print_b
void list_print_b(Rcpp::XPtr<std::list<bool> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_print_b(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    list_print_b(x, n, reverse);
    return R_NilValue;
END_RCPP
}
// priority_queue_i_d
Rcpp::XPtr<std::priority_queue<int> > priority_queue_i_d(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_priority_queue_i_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_i_d(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_d_d
Rcpp::XPtr<std::priority_queue<double> > priority_queue_d_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_priority_queue_d_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_d_d(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_s_d
Rcpp::XPtr<std::priority_queue<std::string> > priority_queue_s_d(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_priority_queue_s_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_s_d(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_b_d
Rcpp::XPtr<std::priority_queue<bool> > priority_queue_b_d(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_priority_queue_b_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_b_d(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_i_a
Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > priority_queue_i_a(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_priority_queue_i_a(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_i_a(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_d_a
Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > priority_queue_d_a(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_priority_queue_d_a(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_d_a(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_s_a
Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > priority_queue_s_a(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_priority_queue_s_a(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_s_a(v));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_b_a
Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > priority_queue_b_a(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_priority_queue_b_a(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_b_a(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_push_i
void stack_push_i(Rcpp::XPtr<std::stack<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_stack_push_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    stack_push_i(x, v);
    return R_NilValue;
END_RCPP
}
// stack_push_d
void stack_push_d(Rcpp::XPtr<std::stack<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_stack_push_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    stack_push_d(x, v);
    return R_NilValue;
END_RCPP
}
// stack_push_s
void stack_push_s(Rcpp::XPtr<std::stack<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_stack_push_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    stack_push_s(x, v);
    return R_NilValue;
END_RCPP
}
// stack_push_b
void stack_push_b(Rcpp::XPtr<std::stack<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_stack_push_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    stack_push_b(x, v);
    return R_NilValue;
END_RCPP
}
// queue_push_i
void queue_push_i(Rcpp::XPtr<std::queue<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_queue_push_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    queue_push_i(x, v);
    return R_NilValue;
END_RCPP
}
// queue_push_d
void queue_push_d(Rcpp::XPtr<std::queue<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_queue_push_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    queue_push_d(x, v);
    return R_NilValue;
END_RCPP
}
// queue_push_s
void queue_push_s(Rcpp::XPtr<std::queue<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_queue_push_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    queue_push_s(x, v);
    return R_NilValue;
END_RCPP
}
// queue_push_b
void queue_push_b(Rcpp::XPtr<std::queue<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_queue_push_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    queue_push_b(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_i_d
void priority_queue_push_i_d(Rcpp::XPtr<std::priority_queue<int> > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_i_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    priority_queue_push_i_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_d_d
void priority_queue_push_d_d(Rcpp::XPtr<std::priority_queue<double> > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_d_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    priority_queue_push_d_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_s_d
void priority_queue_push_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_s_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    priority_queue_push_s_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_b_d
void priority_queue_push_b_d(Rcpp::XPtr<std::priority_queue<bool> > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_b_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    priority_queue_push_b_d(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_i_a
void priority_queue_push_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x, Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_i_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    priority_queue_push_i_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_d_a
void priority_queue_push_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x, Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_d_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    priority_queue_push_d_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_s_a
void priority_queue_push_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x, Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_s_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    priority_queue_push_s_a(x, v);
    return R_NilValue;
END_RCPP
}
// priority_queue_push_b_a
void priority_queue_push_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x, Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_priority_queue_push_b_a(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    priority_queue_push_b_a(x, v);
    return R_NilValue;
END_RCPP
}
// vector_push_back_i
void vector_push_back_i(Rcpp::XPtr<std::vector<int> > x, const int v);
RcppExport SEXP _cppcontainers_vector_push_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    vector_push_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// vector_push_back_d
void vector_push_back_d(Rcpp::XPtr<std::vector<double> > x, const double v);
RcppExport SEXP _cppcontainers_vector_push_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    vector_push_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// vector_push_back_s
void vector_push_back_s(Rcpp::XPtr<std::vector<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_vector_push_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    vector_push_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// vector_push_back_b
void vector_push_back_b(Rcpp::XPtr<std::vector<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_vector_push_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    vector_push_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_back_i
void deque_push_back_i(Rcpp::XPtr<std::deque<int> > x, const int v);
RcppExport SEXP _cppcontainers_deque_push_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    deque_push_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_back_d
void deque_push_back_d(Rcpp::XPtr<std::deque<double> > x, const double v);
RcppExport SEXP _cppcontainers_deque_push_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    deque_push_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_back_s
void deque_push_back_s(Rcpp::XPtr<std::deque<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_deque_push_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    deque_push_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_back_b
void deque_push_back_b(Rcpp::XPtr<std::deque<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_deque_push_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    deque_push_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_back_i
void list_push_back_i(Rcpp::XPtr<std::list<int> > x, const int v);
RcppExport SEXP _cppcontainers_list_push_back_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_push_back_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_back_d
void list_push_back_d(Rcpp::XPtr<std::list<double> > x, const double v);
RcppExport SEXP _cppcontainers_list_push_back_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_push_back_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_back_s
void list_push_back_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_list_push_back_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_push_back_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_back_b
void list_push_back_b(Rcpp::XPtr<std::list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_list_push_back_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_push_back_b(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_front_i
void deque_push_front_i(Rcpp::XPtr<std::deque<int> > x, const int v);
RcppExport SEXP _cppcontainers_deque_push_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    deque_push_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_front_d
void deque_push_front_d(Rcpp::XPtr<std::deque<double> > x, const double v);
RcppExport SEXP _cppcontainers_deque_push_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    deque_push_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_front_s
void deque_push_front_s(Rcpp::XPtr<std::deque<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_deque_push_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    deque_push_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// deque_push_front_b
void deque_push_front_b(Rcpp::XPtr<std::deque<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_deque_push_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    deque_push_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_push_front_i
void forward_list_push_front_i(Rcpp::XPtr<std::forward_list<int> > x, const int v);
RcppExport SEXP _cppcontainers_forward_list_push_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    forward_list_push_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_push_front_d
void forward_list_push_front_d(Rcpp::XPtr<std::forward_list<double> > x, const double v);
RcppExport SEXP _cppcontainers_forward_list_push_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    forward_list_push_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_push_front_s
void forward_list_push_front_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_forward_list_push_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    forward_list_push_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_push_front_b
void forward_list_push_front_b(Rcpp::XPtr<std::forward_list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_forward_list_push_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    forward_list_push_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_front_i
void list_push_front_i(Rcpp::XPtr<std::list<int> > x, const int v);
RcppExport SEXP _cppcontainers_list_push_front_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_push_front_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_front_d
void list_push_front_d(Rcpp::XPtr<std::list<double> > x, const double v);
RcppExport SEXP _cppcontainers_list_push_front_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_push_front_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_front_s
void list_push_front_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_list_push_front_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_push_front_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_push_front_b
void list_push_front_b(Rcpp::XPtr<std::list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_list_push_front_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_push_front_b(x, v);
    return R_NilValue;
END_RCPP
}
// queue_i
Rcpp::XPtr<std::queue<int> > queue_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_queue_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_i(v));
    return rcpp_result_gen;
END_RCPP
}
// queue_d
Rcpp::XPtr<std::queue<double> > queue_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_queue_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_d(v));
    return rcpp_result_gen;
END_RCPP
}
// queue_s
Rcpp::XPtr<std::queue<std::string> > queue_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_queue_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_s(v));
    return rcpp_result_gen;
END_RCPP
}
// queue_b
Rcpp::XPtr<std::queue<bool> > queue_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_queue_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_b(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_rehash_i
void unordered_set_rehash_i(Rcpp::XPtr<std::unordered_set<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_d
void unordered_set_rehash_d(Rcpp::XPtr<std::unordered_set<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_s
void unordered_set_rehash_s(Rcpp::XPtr<std::unordered_set<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_rehash_b
void unordered_set_rehash_b(Rcpp::XPtr<std::unordered_set<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_rehash_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_rehash_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_rehash_i
void unordered_multiset_rehash_i(Rcpp::XPtr<std::unordered_multiset<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_rehash_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_rehash_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_rehash_d
void unordered_multiset_rehash_d(Rcpp::XPtr<std::unordered_multiset<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_rehash_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_rehash_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_rehash_s
void unordered_multiset_rehash_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_rehash_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_rehash_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_rehash_b
void unordered_multiset_rehash_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_rehash_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_rehash_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_i_i
void unordered_map_rehash_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_i_d
void unordered_map_rehash_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_i_s
void unordered_map_rehash_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_i_b
void unordered_map_rehash_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_d_i
void unordered_map_rehash_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_d_d
void unordered_map_rehash_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_d_s
void unordered_map_rehash_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_d_b
void unordered_map_rehash_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_s_i
void unordered_map_rehash_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_s_d
void unordered_map_rehash_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_s_s
void unordered_map_rehash_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_s_b
void unordered_map_rehash_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_b_i
void unordered_map_rehash_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_b_d
void unordered_map_rehash_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_b_s
void unordered_map_rehash_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_rehash_b_b
void unordered_map_rehash_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_rehash_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_rehash_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_i_i
void unordered_multimap_rehash_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_i_d
void unordered_multimap_rehash_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_i_s
void unordered_multimap_rehash_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_i_b
void unordered_multimap_rehash_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_d_i
void unordered_multimap_rehash_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_d_d
void unordered_multimap_rehash_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_d_s
void unordered_multimap_rehash_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_d_b
void unordered_multimap_rehash_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_s_i
void unordered_multimap_rehash_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_s_d
void unordered_multimap_rehash_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_s_s
void unordered_multimap_rehash_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_s_b
void unordered_multimap_rehash_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_b_i
void unordered_multimap_rehash_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_b_d
void unordered_multimap_rehash_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_b_s
void unordered_multimap_rehash_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_rehash_b_b
void unordered_multimap_rehash_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_rehash_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_rehash_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// forward_list_remove_i
void forward_list_remove_i(Rcpp::XPtr<std::forward_list<int> > x, const int v);
RcppExport SEXP _cppcontainers_forward_list_remove_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    forward_list_remove_i(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_remove_d
void forward_list_remove_d(Rcpp::XPtr<std::forward_list<double> > x, const double v);
RcppExport SEXP _cppcontainers_forward_list_remove_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    forward_list_remove_d(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_remove_s
void forward_list_remove_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_forward_list_remove_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    forward_list_remove_s(x, v);
    return R_NilValue;
END_RCPP
}
// forward_list_remove_b
void forward_list_remove_b(Rcpp::XPtr<std::forward_list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_forward_list_remove_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    forward_list_remove_b(x, v);
    return R_NilValue;
END_RCPP
}
// list_remove_i
void list_remove_i(Rcpp::XPtr<std::list<int> > x, const int v);
RcppExport SEXP _cppcontainers_list_remove_i(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_remove_i(x, v);
    return R_NilValue;
END_RCPP
}
// list_remove_d
void list_remove_d(Rcpp::XPtr<std::list<double> > x, const double v);
RcppExport SEXP _cppcontainers_list_remove_d(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_remove_d(x, v);
    return R_NilValue;
END_RCPP
}
// list_remove_s
void list_remove_s(Rcpp::XPtr<std::list<std::string> > x, const std::string v);
RcppExport SEXP _cppcontainers_list_remove_s(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_remove_s(x, v);
    return R_NilValue;
END_RCPP
}
// list_remove_b
void list_remove_b(Rcpp::XPtr<std::list<bool> > x, const bool v);
RcppExport SEXP _cppcontainers_list_remove_b(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_remove_b(x, v);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_i
void unordered_set_reserve_i(Rcpp::XPtr<std::unordered_set<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_d
void unordered_set_reserve_d(Rcpp::XPtr<std::unordered_set<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_s
void unordered_set_reserve_s(Rcpp::XPtr<std::unordered_set<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_set_reserve_b
void unordered_set_reserve_b(Rcpp::XPtr<std::unordered_set<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_reserve_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_set_reserve_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_reserve_i
void unordered_multiset_reserve_i(Rcpp::XPtr<std::unordered_multiset<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_reserve_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_reserve_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_reserve_d
void unordered_multiset_reserve_d(Rcpp::XPtr<std::unordered_multiset<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_reserve_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_reserve_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_reserve_s
void unordered_multiset_reserve_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_reserve_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_reserve_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_reserve_b
void unordered_multiset_reserve_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_reserve_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multiset_reserve_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_i_i
void unordered_map_reserve_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_i_d
void unordered_map_reserve_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_i_s
void unordered_map_reserve_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_i_b
void unordered_map_reserve_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_d_i
void unordered_map_reserve_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_d_d
void unordered_map_reserve_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_d_s
void unordered_map_reserve_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_d_b
void unordered_map_reserve_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_s_i
void unordered_map_reserve_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_s_d
void unordered_map_reserve_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_s_s
void unordered_map_reserve_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_s_b
void unordered_map_reserve_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_b_i
void unordered_map_reserve_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_b_d
void unordered_map_reserve_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_b_s
void unordered_map_reserve_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_map_reserve_b_b
void unordered_map_reserve_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_reserve_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_map_reserve_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_i_i
void unordered_multimap_reserve_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_i_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_i_d
void unordered_multimap_reserve_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_i_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_i_s
void unordered_multimap_reserve_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_i_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_i_b
void unordered_multimap_reserve_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_i_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_d_i
void unordered_multimap_reserve_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_d_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_d_d
void unordered_multimap_reserve_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_d_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_d_s
void unordered_multimap_reserve_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_d_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_d_b
void unordered_multimap_reserve_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_d_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_s_i
void unordered_multimap_reserve_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_s_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_s_d
void unordered_multimap_reserve_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_s_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_s_s
void unordered_multimap_reserve_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_s_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_s_b
void unordered_multimap_reserve_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_s_b(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_b_i
void unordered_multimap_reserve_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_b_i(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_b_d
void unordered_multimap_reserve_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_b_d(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_b_s
void unordered_multimap_reserve_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_b_s(x, n);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_reserve_b_b
void unordered_multimap_reserve_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_reserve_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    unordered_multimap_reserve_b_b(x, n);
    return R_NilValue;
END_RCPP
}
// vector_reserve_i
void vector_reserve_i(Rcpp::XPtr<std::vector<int> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_vector_reserve_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    vector_reserve_i(x, n);
    return R_NilValue;
END_RCPP
}
// vector_reserve_d
void vector_reserve_d(Rcpp::XPtr<std::vector<double> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_vector_reserve_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    vector_reserve_d(x, n);
    return R_NilValue;
END_RCPP
}
// vector_reserve_s
void vector_reserve_s(Rcpp::XPtr<std::vector<std::string> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_vector_reserve_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    vector_reserve_s(x, n);
    return R_NilValue;
END_RCPP
}
// vector_reserve_b
void vector_reserve_b(Rcpp::XPtr<std::vector<bool> > x, const std::size_t n);
RcppExport SEXP _cppcontainers_vector_reserve_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    vector_reserve_b(x, n);
    return R_NilValue;
END_RCPP
}
// vector_resize_i
void vector_resize_i(Rcpp::XPtr<std::vector<int> > x, const std::size_t n, const int v);
RcppExport SEXP _cppcontainers_vector_resize_i(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    vector_resize_i(x, n, v);
    return R_NilValue;
END_RCPP
}
// vector_resize_d
void vector_resize_d(Rcpp::XPtr<std::vector<double> > x, const std::size_t n, const double v);
RcppExport SEXP _cppcontainers_vector_resize_d(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    vector_resize_d(x, n, v);
    return R_NilValue;
END_RCPP
}
// vector_resize_s
void vector_resize_s(Rcpp::XPtr<std::vector<std::string> > x, const std::size_t n, const std::string v);
RcppExport SEXP _cppcontainers_vector_resize_s(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    vector_resize_s(x, n, v);
    return R_NilValue;
END_RCPP
}
// vector_resize_b
void vector_resize_b(Rcpp::XPtr<std::vector<bool> > x, const std::size_t n, const bool v);
RcppExport SEXP _cppcontainers_vector_resize_b(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    vector_resize_b(x, n, v);
    return R_NilValue;
END_RCPP
}
// deque_resize_i
void deque_resize_i(Rcpp::XPtr<std::deque<int> > x, const std::size_t n, const int v);
RcppExport SEXP _cppcontainers_deque_resize_i(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    deque_resize_i(x, n, v);
    return R_NilValue;
END_RCPP
}
// deque_resize_d
void deque_resize_d(Rcpp::XPtr<std::deque<double> > x, const std::size_t n, const double v);
RcppExport SEXP _cppcontainers_deque_resize_d(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    deque_resize_d(x, n, v);
    return R_NilValue;
END_RCPP
}
// deque_resize_s
void deque_resize_s(Rcpp::XPtr<std::deque<std::string> > x, const std::size_t n, const std::string v);
RcppExport SEXP _cppcontainers_deque_resize_s(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    deque_resize_s(x, n, v);
    return R_NilValue;
END_RCPP
}
// deque_resize_b
void deque_resize_b(Rcpp::XPtr<std::deque<bool> > x, const std::size_t n, const bool v);
RcppExport SEXP _cppcontainers_deque_resize_b(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    deque_resize_b(x, n, v);
    return R_NilValue;
END_RCPP
}
// forward_list_resize_i
void forward_list_resize_i(Rcpp::XPtr<std::forward_list<int> > x, const std::size_t n, const int v);
RcppExport SEXP _cppcontainers_forward_list_resize_i(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    forward_list_resize_i(x, n, v);
    return R_NilValue;
END_RCPP
}
// forward_list_resize_d
void forward_list_resize_d(Rcpp::XPtr<std::forward_list<double> > x, const std::size_t n, const double v);
RcppExport SEXP _cppcontainers_forward_list_resize_d(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    forward_list_resize_d(x, n, v);
    return R_NilValue;
END_RCPP
}
// forward_list_resize_s
void forward_list_resize_s(Rcpp::XPtr<std::forward_list<std::string> > x, const std::size_t n, const std::string v);
RcppExport SEXP _cppcontainers_forward_list_resize_s(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    forward_list_resize_s(x, n, v);
    return R_NilValue;
END_RCPP
}
// forward_list_resize_b
void forward_list_resize_b(Rcpp::XPtr<std::forward_list<bool> > x, const std::size_t n, const bool v);
RcppExport SEXP _cppcontainers_forward_list_resize_b(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    forward_list_resize_b(x, n, v);
    return R_NilValue;
END_RCPP
}
// list_resize_i
void list_resize_i(Rcpp::XPtr<std::list<int> > x, const std::size_t n, const int v);
RcppExport SEXP _cppcontainers_list_resize_i(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    list_resize_i(x, n, v);
    return R_NilValue;
END_RCPP
}
// list_resize_d
void list_resize_d(Rcpp::XPtr<std::list<double> > x, const std::size_t n, const double v);
RcppExport SEXP _cppcontainers_list_resize_d(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    list_resize_d(x, n, v);
    return R_NilValue;
END_RCPP
}
// list_resize_s
void list_resize_s(Rcpp::XPtr<std::list<std::string> > x, const std::size_t n, const std::string v);
RcppExport SEXP _cppcontainers_list_resize_s(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    list_resize_s(x, n, v);
    return R_NilValue;
END_RCPP
}
// list_resize_b
void list_resize_b(Rcpp::XPtr<std::list<bool> > x, const std::size_t n, const bool v);
RcppExport SEXP _cppcontainers_list_resize_b(SEXP xSEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    list_resize_b(x, n, v);
    return R_NilValue;
END_RCPP
}
// forward_list_reverse_i
void forward_list_reverse_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_reverse_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    forward_list_reverse_i(x);
    return R_NilValue;
END_RCPP
}
// forward_list_reverse_d
void forward_list_reverse_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_reverse_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    forward_list_reverse_d(x);
    return R_NilValue;
END_RCPP
}
// forward_list_reverse_s
void forward_list_reverse_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_reverse_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    forward_list_reverse_s(x);
    return R_NilValue;
END_RCPP
}
// forward_list_reverse_b
void forward_list_reverse_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_reverse_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    forward_list_reverse_b(x);
    return R_NilValue;
END_RCPP
}
// list_reverse_i
void list_reverse_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_reverse_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    list_reverse_i(x);
    return R_NilValue;
END_RCPP
}
// list_reverse_d
void list_reverse_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_reverse_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    list_reverse_d(x);
    return R_NilValue;
END_RCPP
}
// list_reverse_s
void list_reverse_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_reverse_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    list_reverse_s(x);
    return R_NilValue;
END_RCPP
}
// list_reverse_b
void list_reverse_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_reverse_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    list_reverse_b(x);
    return R_NilValue;
END_RCPP
}
// set_i
Rcpp::XPtr<std::set<int> > set_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_set_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_i(v));
    return rcpp_result_gen;
END_RCPP
}
// set_d
Rcpp::XPtr<std::set<double> > set_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_set_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_d(v));
    return rcpp_result_gen;
END_RCPP
}
// set_s
Rcpp::XPtr<std::set<std::string> > set_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_set_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_s(v));
    return rcpp_result_gen;
END_RCPP
}
// set_b
Rcpp::XPtr<std::set<bool> > set_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_set_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set_b(v));
    return rcpp_result_gen;
END_RCPP
}
// set_show_i
void set_show_i(Rcpp::XPtr<std::set<int> > p);
RcppExport SEXP _cppcontainers_set_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type p(pSEXP);
    set_show_i(p);
    return R_NilValue;
END_RCPP
}
// set_show_d
void set_show_d(Rcpp::XPtr<std::set<double> > p);
RcppExport SEXP _cppcontainers_set_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type p(pSEXP);
    set_show_d(p);
    return R_NilValue;
END_RCPP
}
// set_show_s
void set_show_s(Rcpp::XPtr<std::set<std::string> > p);
RcppExport SEXP _cppcontainers_set_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type p(pSEXP);
    set_show_s(p);
    return R_NilValue;
END_RCPP
}
// set_show_b
void set_show_b(Rcpp::XPtr<std::set<bool> > p);
RcppExport SEXP _cppcontainers_set_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type p(pSEXP);
    set_show_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_i
void unordered_set_show_i(Rcpp::XPtr<std::unordered_set<int> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type p(pSEXP);
    unordered_set_show_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_d
void unordered_set_show_d(Rcpp::XPtr<std::unordered_set<double> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type p(pSEXP);
    unordered_set_show_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_s
void unordered_set_show_s(Rcpp::XPtr<std::unordered_set<std::string> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type p(pSEXP);
    unordered_set_show_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_set_show_b
void unordered_set_show_b(Rcpp::XPtr<std::unordered_set<bool> > p);
RcppExport SEXP _cppcontainers_unordered_set_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type p(pSEXP);
    unordered_set_show_b(p);
    return R_NilValue;
END_RCPP
}
// multiset_show_i
void multiset_show_i(Rcpp::XPtr<std::multiset<int> > p);
RcppExport SEXP _cppcontainers_multiset_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type p(pSEXP);
    multiset_show_i(p);
    return R_NilValue;
END_RCPP
}
// multiset_show_d
void multiset_show_d(Rcpp::XPtr<std::multiset<double> > p);
RcppExport SEXP _cppcontainers_multiset_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type p(pSEXP);
    multiset_show_d(p);
    return R_NilValue;
END_RCPP
}
// multiset_show_s
void multiset_show_s(Rcpp::XPtr<std::multiset<std::string> > p);
RcppExport SEXP _cppcontainers_multiset_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type p(pSEXP);
    multiset_show_s(p);
    return R_NilValue;
END_RCPP
}
// multiset_show_b
void multiset_show_b(Rcpp::XPtr<std::multiset<bool> > p);
RcppExport SEXP _cppcontainers_multiset_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type p(pSEXP);
    multiset_show_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_show_i
void unordered_multiset_show_i(Rcpp::XPtr<std::unordered_multiset<int> > p);
RcppExport SEXP _cppcontainers_unordered_multiset_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type p(pSEXP);
    unordered_multiset_show_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_show_d
void unordered_multiset_show_d(Rcpp::XPtr<std::unordered_multiset<double> > p);
RcppExport SEXP _cppcontainers_unordered_multiset_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type p(pSEXP);
    unordered_multiset_show_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_show_s
void unordered_multiset_show_s(Rcpp::XPtr<std::unordered_multiset<std::string> > p);
RcppExport SEXP _cppcontainers_unordered_multiset_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type p(pSEXP);
    unordered_multiset_show_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_multiset_show_b
void unordered_multiset_show_b(Rcpp::XPtr<std::unordered_multiset<bool> > p);
RcppExport SEXP _cppcontainers_unordered_multiset_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type p(pSEXP);
    unordered_multiset_show_b(p);
    return R_NilValue;
END_RCPP
}
// map_show_i_i
void map_show_i_i(Rcpp::XPtr<std::map<int, int> > p);
RcppExport SEXP _cppcontainers_map_show_i_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type p(pSEXP);
    map_show_i_i(p);
    return R_NilValue;
END_RCPP
}
// map_show_i_d
void map_show_i_d(Rcpp::XPtr<std::map<int, double> > p);
RcppExport SEXP _cppcontainers_map_show_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type p(pSEXP);
    map_show_i_d(p);
    return R_NilValue;
END_RCPP
}
// map_show_i_s
void map_show_i_s(Rcpp::XPtr<std::map<int, std::string> > p);
RcppExport SEXP _cppcontainers_map_show_i_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type p(pSEXP);
    map_show_i_s(p);
    return R_NilValue;
END_RCPP
}
// map_show_i_b
void map_show_i_b(Rcpp::XPtr<std::map<int, bool> > p);
RcppExport SEXP _cppcontainers_map_show_i_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type p(pSEXP);
    map_show_i_b(p);
    return R_NilValue;
END_RCPP
}
// map_show_d_i
void map_show_d_i(Rcpp::XPtr<std::map<double, int> > p);
RcppExport SEXP _cppcontainers_map_show_d_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type p(pSEXP);
    map_show_d_i(p);
    return R_NilValue;
END_RCPP
}
// map_show_d_d
void map_show_d_d(Rcpp::XPtr<std::map<double, double> > p);
RcppExport SEXP _cppcontainers_map_show_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type p(pSEXP);
    map_show_d_d(p);
    return R_NilValue;
END_RCPP
}
// map_show_d_s
void map_show_d_s(Rcpp::XPtr<std::map<double, std::string> > p);
RcppExport SEXP _cppcontainers_map_show_d_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type p(pSEXP);
    map_show_d_s(p);
    return R_NilValue;
END_RCPP
}
// map_show_d_b
void map_show_d_b(Rcpp::XPtr<std::map<double, bool> > p);
RcppExport SEXP _cppcontainers_map_show_d_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type p(pSEXP);
    map_show_d_b(p);
    return R_NilValue;
END_RCPP
}
// map_show_s_i
void map_show_s_i(Rcpp::XPtr<std::map<std::string, int> > p);
RcppExport SEXP _cppcontainers_map_show_s_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type p(pSEXP);
    map_show_s_i(p);
    return R_NilValue;
END_RCPP
}
// map_show_s_d
void map_show_s_d(Rcpp::XPtr<std::map<std::string, double> > p);
RcppExport SEXP _cppcontainers_map_show_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type p(pSEXP);
    map_show_s_d(p);
    return R_NilValue;
END_RCPP
}
// map_show_s_s
void map_show_s_s(Rcpp::XPtr<std::map<std::string, std::string> > p);
RcppExport SEXP _cppcontainers_map_show_s_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type p(pSEXP);
    map_show_s_s(p);
    return R_NilValue;
END_RCPP
}
// map_show_s_b
void map_show_s_b(Rcpp::XPtr<std::map<std::string, bool> > p);
RcppExport SEXP _cppcontainers_map_show_s_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type p(pSEXP);
    map_show_s_b(p);
    return R_NilValue;
END_RCPP
}
// map_show_b_i
void map_show_b_i(Rcpp::XPtr<std::map<bool, int> > p);
RcppExport SEXP _cppcontainers_map_show_b_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type p(pSEXP);
    map_show_b_i(p);
    return R_NilValue;
END_RCPP
}
// map_show_b_d
void map_show_b_d(Rcpp::XPtr<std::map<bool, double> > p);
RcppExport SEXP _cppcontainers_map_show_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type p(pSEXP);
    map_show_b_d(p);
    return R_NilValue;
END_RCPP
}
// map_show_b_s
void map_show_b_s(Rcpp::XPtr<std::map<bool, std::string> > p);
RcppExport SEXP _cppcontainers_map_show_b_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type p(pSEXP);
    map_show_b_s(p);
    return R_NilValue;
END_RCPP
}
// map_show_b_b
void map_show_b_b(Rcpp::XPtr<std::map<bool, bool> > p);
RcppExport SEXP _cppcontainers_map_show_b_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type p(pSEXP);
    map_show_b_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_i_i
void unordered_map_show_i_i(Rcpp::XPtr<std::unordered_map<int, int> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_i_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type p(pSEXP);
    unordered_map_show_i_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_i_d
void unordered_map_show_i_d(Rcpp::XPtr<std::unordered_map<int, double> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type p(pSEXP);
    unordered_map_show_i_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_i_s
void unordered_map_show_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_i_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type p(pSEXP);
    unordered_map_show_i_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_i_b
void unordered_map_show_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_i_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type p(pSEXP);
    unordered_map_show_i_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_d_i
void unordered_map_show_d_i(Rcpp::XPtr<std::unordered_map<double, int> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_d_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type p(pSEXP);
    unordered_map_show_d_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_d_d
void unordered_map_show_d_d(Rcpp::XPtr<std::unordered_map<double, double> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type p(pSEXP);
    unordered_map_show_d_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_d_s
void unordered_map_show_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_d_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type p(pSEXP);
    unordered_map_show_d_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_d_b
void unordered_map_show_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_d_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type p(pSEXP);
    unordered_map_show_d_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_s_i
void unordered_map_show_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_s_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type p(pSEXP);
    unordered_map_show_s_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_s_d
void unordered_map_show_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type p(pSEXP);
    unordered_map_show_s_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_s_s
void unordered_map_show_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_s_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type p(pSEXP);
    unordered_map_show_s_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_s_b
void unordered_map_show_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_s_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type p(pSEXP);
    unordered_map_show_s_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_b_i
void unordered_map_show_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_b_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type p(pSEXP);
    unordered_map_show_b_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_b_d
void unordered_map_show_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type p(pSEXP);
    unordered_map_show_b_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_b_s
void unordered_map_show_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_b_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type p(pSEXP);
    unordered_map_show_b_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_map_show_b_b
void unordered_map_show_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > p);
RcppExport SEXP _cppcontainers_unordered_map_show_b_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type p(pSEXP);
    unordered_map_show_b_b(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_i_i
void multimap_show_i_i(Rcpp::XPtr<std::multimap<int, int> > p);
RcppExport SEXP _cppcontainers_multimap_show_i_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type p(pSEXP);
    multimap_show_i_i(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_i_d
void multimap_show_i_d(Rcpp::XPtr<std::multimap<int, double> > p);
RcppExport SEXP _cppcontainers_multimap_show_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type p(pSEXP);
    multimap_show_i_d(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_i_s
void multimap_show_i_s(Rcpp::XPtr<std::multimap<int, std::string> > p);
RcppExport SEXP _cppcontainers_multimap_show_i_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type p(pSEXP);
    multimap_show_i_s(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_i_b
void multimap_show_i_b(Rcpp::XPtr<std::multimap<int, bool> > p);
RcppExport SEXP _cppcontainers_multimap_show_i_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type p(pSEXP);
    multimap_show_i_b(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_d_i
void multimap_show_d_i(Rcpp::XPtr<std::multimap<double, int> > p);
RcppExport SEXP _cppcontainers_multimap_show_d_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type p(pSEXP);
    multimap_show_d_i(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_d_d
void multimap_show_d_d(Rcpp::XPtr<std::multimap<double, double> > p);
RcppExport SEXP _cppcontainers_multimap_show_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type p(pSEXP);
    multimap_show_d_d(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_d_s
void multimap_show_d_s(Rcpp::XPtr<std::multimap<double, std::string> > p);
RcppExport SEXP _cppcontainers_multimap_show_d_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type p(pSEXP);
    multimap_show_d_s(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_d_b
void multimap_show_d_b(Rcpp::XPtr<std::multimap<double, bool> > p);
RcppExport SEXP _cppcontainers_multimap_show_d_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type p(pSEXP);
    multimap_show_d_b(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_s_i
void multimap_show_s_i(Rcpp::XPtr<std::multimap<std::string, int> > p);
RcppExport SEXP _cppcontainers_multimap_show_s_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type p(pSEXP);
    multimap_show_s_i(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_s_d
void multimap_show_s_d(Rcpp::XPtr<std::multimap<std::string, double> > p);
RcppExport SEXP _cppcontainers_multimap_show_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type p(pSEXP);
    multimap_show_s_d(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_s_s
void multimap_show_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > p);
RcppExport SEXP _cppcontainers_multimap_show_s_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type p(pSEXP);
    multimap_show_s_s(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_s_b
void multimap_show_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > p);
RcppExport SEXP _cppcontainers_multimap_show_s_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type p(pSEXP);
    multimap_show_s_b(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_b_i
void multimap_show_b_i(Rcpp::XPtr<std::multimap<bool, int> > p);
RcppExport SEXP _cppcontainers_multimap_show_b_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type p(pSEXP);
    multimap_show_b_i(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_b_d
void multimap_show_b_d(Rcpp::XPtr<std::multimap<bool, double> > p);
RcppExport SEXP _cppcontainers_multimap_show_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type p(pSEXP);
    multimap_show_b_d(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_b_s
void multimap_show_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > p);
RcppExport SEXP _cppcontainers_multimap_show_b_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type p(pSEXP);
    multimap_show_b_s(p);
    return R_NilValue;
END_RCPP
}
// multimap_show_b_b
void multimap_show_b_b(Rcpp::XPtr<std::multimap<bool, bool> > p);
RcppExport SEXP _cppcontainers_multimap_show_b_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type p(pSEXP);
    multimap_show_b_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_i_i
void unordered_multimap_show_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_i_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type p(pSEXP);
    unordered_multimap_show_i_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_i_d
void unordered_multimap_show_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type p(pSEXP);
    unordered_multimap_show_i_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_i_s
void unordered_multimap_show_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_i_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type p(pSEXP);
    unordered_multimap_show_i_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_i_b
void unordered_multimap_show_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_i_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type p(pSEXP);
    unordered_multimap_show_i_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_d_i
void unordered_multimap_show_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_d_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type p(pSEXP);
    unordered_multimap_show_d_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_d_d
void unordered_multimap_show_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type p(pSEXP);
    unordered_multimap_show_d_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_d_s
void unordered_multimap_show_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_d_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type p(pSEXP);
    unordered_multimap_show_d_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_d_b
void unordered_multimap_show_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_d_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type p(pSEXP);
    unordered_multimap_show_d_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_s_i
void unordered_multimap_show_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_s_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type p(pSEXP);
    unordered_multimap_show_s_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_s_d
void unordered_multimap_show_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type p(pSEXP);
    unordered_multimap_show_s_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_s_s
void unordered_multimap_show_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_s_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type p(pSEXP);
    unordered_multimap_show_s_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_s_b
void unordered_multimap_show_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_s_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type p(pSEXP);
    unordered_multimap_show_s_b(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_b_i
void unordered_multimap_show_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_b_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type p(pSEXP);
    unordered_multimap_show_b_i(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_b_d
void unordered_multimap_show_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type p(pSEXP);
    unordered_multimap_show_b_d(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_b_s
void unordered_multimap_show_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_b_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type p(pSEXP);
    unordered_multimap_show_b_s(p);
    return R_NilValue;
END_RCPP
}
// unordered_multimap_show_b_b
void unordered_multimap_show_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > p);
RcppExport SEXP _cppcontainers_unordered_multimap_show_b_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type p(pSEXP);
    unordered_multimap_show_b_b(p);
    return R_NilValue;
END_RCPP
}
// stack_show_i
void stack_show_i(Rcpp::XPtr<std::stack<int> > p);
RcppExport SEXP _cppcontainers_stack_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type p(pSEXP);
    stack_show_i(p);
    return R_NilValue;
END_RCPP
}
// stack_show_d
void stack_show_d(Rcpp::XPtr<std::stack<double> > p);
RcppExport SEXP _cppcontainers_stack_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type p(pSEXP);
    stack_show_d(p);
    return R_NilValue;
END_RCPP
}
// stack_show_s
void stack_show_s(Rcpp::XPtr<std::stack<std::string> > p);
RcppExport SEXP _cppcontainers_stack_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type p(pSEXP);
    stack_show_s(p);
    return R_NilValue;
END_RCPP
}
// stack_show_b
void stack_show_b(Rcpp::XPtr<std::stack<bool> > p);
RcppExport SEXP _cppcontainers_stack_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type p(pSEXP);
    stack_show_b(p);
    return R_NilValue;
END_RCPP
}
// queue_show_i
void queue_show_i(Rcpp::XPtr<std::queue<int> > p);
RcppExport SEXP _cppcontainers_queue_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type p(pSEXP);
    queue_show_i(p);
    return R_NilValue;
END_RCPP
}
// queue_show_d
void queue_show_d(Rcpp::XPtr<std::queue<double> > p);
RcppExport SEXP _cppcontainers_queue_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type p(pSEXP);
    queue_show_d(p);
    return R_NilValue;
END_RCPP
}
// queue_show_s
void queue_show_s(Rcpp::XPtr<std::queue<std::string> > p);
RcppExport SEXP _cppcontainers_queue_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type p(pSEXP);
    queue_show_s(p);
    return R_NilValue;
END_RCPP
}
// queue_show_b
void queue_show_b(Rcpp::XPtr<std::queue<bool> > p);
RcppExport SEXP _cppcontainers_queue_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type p(pSEXP);
    queue_show_b(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_i_d
void priority_queue_show_i_d(Rcpp::XPtr<std::priority_queue<int> > p);
RcppExport SEXP _cppcontainers_priority_queue_show_i_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type p(pSEXP);
    priority_queue_show_i_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_d_d
void priority_queue_show_d_d(Rcpp::XPtr<std::priority_queue<double> > p);
RcppExport SEXP _cppcontainers_priority_queue_show_d_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type p(pSEXP);
    priority_queue_show_d_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_s_d
void priority_queue_show_s_d(Rcpp::XPtr<std::priority_queue<std::string> > p);
RcppExport SEXP _cppcontainers_priority_queue_show_s_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type p(pSEXP);
    priority_queue_show_s_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_b_d
void priority_queue_show_b_d(Rcpp::XPtr<std::priority_queue<bool> > p);
RcppExport SEXP _cppcontainers_priority_queue_show_b_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type p(pSEXP);
    priority_queue_show_b_d(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_i_a
void priority_queue_show_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > p);
RcppExport SEXP _cppcontainers_priority_queue_show_i_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type p(pSEXP);
    priority_queue_show_i_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_d_a
void priority_queue_show_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > p);
RcppExport SEXP _cppcontainers_priority_queue_show_d_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type p(pSEXP);
    priority_queue_show_d_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_s_a
void priority_queue_show_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > p);
RcppExport SEXP _cppcontainers_priority_queue_show_s_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type p(pSEXP);
    priority_queue_show_s_a(p);
    return R_NilValue;
END_RCPP
}
// priority_queue_show_b_a
void priority_queue_show_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > p);
RcppExport SEXP _cppcontainers_priority_queue_show_b_a(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type p(pSEXP);
    priority_queue_show_b_a(p);
    return R_NilValue;
END_RCPP
}
// vector_show_i
void vector_show_i(Rcpp::XPtr<std::vector<int> > p);
RcppExport SEXP _cppcontainers_vector_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type p(pSEXP);
    vector_show_i(p);
    return R_NilValue;
END_RCPP
}
// vector_show_d
void vector_show_d(Rcpp::XPtr<std::vector<double> > p);
RcppExport SEXP _cppcontainers_vector_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type p(pSEXP);
    vector_show_d(p);
    return R_NilValue;
END_RCPP
}
// vector_show_s
void vector_show_s(Rcpp::XPtr<std::vector<std::string> > p);
RcppExport SEXP _cppcontainers_vector_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type p(pSEXP);
    vector_show_s(p);
    return R_NilValue;
END_RCPP
}
// vector_show_b
void vector_show_b(Rcpp::XPtr<std::vector<bool> > p);
RcppExport SEXP _cppcontainers_vector_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type p(pSEXP);
    vector_show_b(p);
    return R_NilValue;
END_RCPP
}
// deque_show_i
void deque_show_i(Rcpp::XPtr<std::deque<int> > p);
RcppExport SEXP _cppcontainers_deque_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type p(pSEXP);
    deque_show_i(p);
    return R_NilValue;
END_RCPP
}
// deque_show_d
void deque_show_d(Rcpp::XPtr<std::deque<double> > p);
RcppExport SEXP _cppcontainers_deque_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type p(pSEXP);
    deque_show_d(p);
    return R_NilValue;
END_RCPP
}
// deque_show_s
void deque_show_s(Rcpp::XPtr<std::deque<std::string> > p);
RcppExport SEXP _cppcontainers_deque_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type p(pSEXP);
    deque_show_s(p);
    return R_NilValue;
END_RCPP
}
// deque_show_b
void deque_show_b(Rcpp::XPtr<std::deque<bool> > p);
RcppExport SEXP _cppcontainers_deque_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type p(pSEXP);
    deque_show_b(p);
    return R_NilValue;
END_RCPP
}
// forward_list_show_i
void forward_list_show_i(Rcpp::XPtr<std::forward_list<int> > p);
RcppExport SEXP _cppcontainers_forward_list_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type p(pSEXP);
    forward_list_show_i(p);
    return R_NilValue;
END_RCPP
}
// forward_list_show_d
void forward_list_show_d(Rcpp::XPtr<std::forward_list<double> > p);
RcppExport SEXP _cppcontainers_forward_list_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type p(pSEXP);
    forward_list_show_d(p);
    return R_NilValue;
END_RCPP
}
// forward_list_show_s
void forward_list_show_s(Rcpp::XPtr<std::forward_list<std::string> > p);
RcppExport SEXP _cppcontainers_forward_list_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type p(pSEXP);
    forward_list_show_s(p);
    return R_NilValue;
END_RCPP
}
// forward_list_show_b
void forward_list_show_b(Rcpp::XPtr<std::forward_list<bool> > p);
RcppExport SEXP _cppcontainers_forward_list_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type p(pSEXP);
    forward_list_show_b(p);
    return R_NilValue;
END_RCPP
}
// list_show_i
void list_show_i(Rcpp::XPtr<std::list<int> > p);
RcppExport SEXP _cppcontainers_list_show_i(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type p(pSEXP);
    list_show_i(p);
    return R_NilValue;
END_RCPP
}
// list_show_d
void list_show_d(Rcpp::XPtr<std::list<double> > p);
RcppExport SEXP _cppcontainers_list_show_d(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type p(pSEXP);
    list_show_d(p);
    return R_NilValue;
END_RCPP
}
// list_show_s
void list_show_s(Rcpp::XPtr<std::list<std::string> > p);
RcppExport SEXP _cppcontainers_list_show_s(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type p(pSEXP);
    list_show_s(p);
    return R_NilValue;
END_RCPP
}
// list_show_b
void list_show_b(Rcpp::XPtr<std::list<bool> > p);
RcppExport SEXP _cppcontainers_list_show_b(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type p(pSEXP);
    list_show_b(p);
    return R_NilValue;
END_RCPP
}
// vector_shrink_to_fit_i
void vector_shrink_to_fit_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_shrink_to_fit_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    vector_shrink_to_fit_i(x);
    return R_NilValue;
END_RCPP
}
// vector_shrink_to_fit_d
void vector_shrink_to_fit_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_shrink_to_fit_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    vector_shrink_to_fit_d(x);
    return R_NilValue;
END_RCPP
}
// vector_shrink_to_fit_s
void vector_shrink_to_fit_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_shrink_to_fit_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    vector_shrink_to_fit_s(x);
    return R_NilValue;
END_RCPP
}
// vector_shrink_to_fit_b
void vector_shrink_to_fit_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_shrink_to_fit_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    vector_shrink_to_fit_b(x);
    return R_NilValue;
END_RCPP
}
// deque_shrink_to_fit_i
void deque_shrink_to_fit_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_shrink_to_fit_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    deque_shrink_to_fit_i(x);
    return R_NilValue;
END_RCPP
}
// deque_shrink_to_fit_d
void deque_shrink_to_fit_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_shrink_to_fit_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    deque_shrink_to_fit_d(x);
    return R_NilValue;
END_RCPP
}
// deque_shrink_to_fit_s
void deque_shrink_to_fit_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_shrink_to_fit_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    deque_shrink_to_fit_s(x);
    return R_NilValue;
END_RCPP
}
// deque_shrink_to_fit_b
void deque_shrink_to_fit_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_shrink_to_fit_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    deque_shrink_to_fit_b(x);
    return R_NilValue;
END_RCPP
}
// set_size_i
std::size_t set_size_i(Rcpp::XPtr<std::set<int> > x);
RcppExport SEXP _cppcontainers_set_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_d
std::size_t set_size_d(Rcpp::XPtr<std::set<double> > x);
RcppExport SEXP _cppcontainers_set_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_s
std::size_t set_size_s(Rcpp::XPtr<std::set<std::string> > x);
RcppExport SEXP _cppcontainers_set_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// set_size_b
std::size_t set_size_b(Rcpp::XPtr<std::set<bool> > x);
RcppExport SEXP _cppcontainers_set_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(set_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_i
std::size_t unordered_set_size_i(Rcpp::XPtr<std::unordered_set<int> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_d
std::size_t unordered_set_size_d(Rcpp::XPtr<std::unordered_set<double> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_s
std::size_t unordered_set_size_s(Rcpp::XPtr<std::unordered_set<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_size_b
std::size_t unordered_set_size_b(Rcpp::XPtr<std::unordered_set<bool> > x);
RcppExport SEXP _cppcontainers_unordered_set_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_size_i
std::size_t multiset_size_i(Rcpp::XPtr<std::multiset<int> > x);
RcppExport SEXP _cppcontainers_multiset_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_size_d
std::size_t multiset_size_d(Rcpp::XPtr<std::multiset<double> > x);
RcppExport SEXP _cppcontainers_multiset_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_size_s
std::size_t multiset_size_s(Rcpp::XPtr<std::multiset<std::string> > x);
RcppExport SEXP _cppcontainers_multiset_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multiset_size_b
std::size_t multiset_size_b(Rcpp::XPtr<std::multiset<bool> > x);
RcppExport SEXP _cppcontainers_multiset_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_size_i
std::size_t unordered_multiset_size_i(Rcpp::XPtr<std::unordered_multiset<int> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_size_d
std::size_t unordered_multiset_size_d(Rcpp::XPtr<std::unordered_multiset<double> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_size_s
std::size_t unordered_multiset_size_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_size_b
std::size_t unordered_multiset_size_b(Rcpp::XPtr<std::unordered_multiset<bool> > x);
RcppExport SEXP _cppcontainers_unordered_multiset_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_i_i
std::size_t map_size_i_i(Rcpp::XPtr<std::map<int, int> > x);
RcppExport SEXP _cppcontainers_map_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_i_d
std::size_t map_size_i_d(Rcpp::XPtr<std::map<int, double> > x);
RcppExport SEXP _cppcontainers_map_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_i_s
std::size_t map_size_i_s(Rcpp::XPtr<std::map<int, std::string> > x);
RcppExport SEXP _cppcontainers_map_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_i_b
std::size_t map_size_i_b(Rcpp::XPtr<std::map<int, bool> > x);
RcppExport SEXP _cppcontainers_map_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_d_i
std::size_t map_size_d_i(Rcpp::XPtr<std::map<double, int> > x);
RcppExport SEXP _cppcontainers_map_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_d_d
std::size_t map_size_d_d(Rcpp::XPtr<std::map<double, double> > x);
RcppExport SEXP _cppcontainers_map_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_d_s
std::size_t map_size_d_s(Rcpp::XPtr<std::map<double, std::string> > x);
RcppExport SEXP _cppcontainers_map_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_d_b
std::size_t map_size_d_b(Rcpp::XPtr<std::map<double, bool> > x);
RcppExport SEXP _cppcontainers_map_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_s_i
std::size_t map_size_s_i(Rcpp::XPtr<std::map<std::string, int> > x);
RcppExport SEXP _cppcontainers_map_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_s_d
std::size_t map_size_s_d(Rcpp::XPtr<std::map<std::string, double> > x);
RcppExport SEXP _cppcontainers_map_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_s_s
std::size_t map_size_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_map_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_s_b
std::size_t map_size_s_b(Rcpp::XPtr<std::map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_map_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_b_i
std::size_t map_size_b_i(Rcpp::XPtr<std::map<bool, int> > x);
RcppExport SEXP _cppcontainers_map_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_b_d
std::size_t map_size_b_d(Rcpp::XPtr<std::map<bool, double> > x);
RcppExport SEXP _cppcontainers_map_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_b_s
std::size_t map_size_b_s(Rcpp::XPtr<std::map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_map_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// map_size_b_b
std::size_t map_size_b_b(Rcpp::XPtr<std::map<bool, bool> > x);
RcppExport SEXP _cppcontainers_map_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(map_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_i_i
std::size_t unordered_map_size_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_i_d
std::size_t unordered_map_size_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_i_s
std::size_t unordered_map_size_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_i_b
std::size_t unordered_map_size_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_d_i
std::size_t unordered_map_size_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_d_d
std::size_t unordered_map_size_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_d_s
std::size_t unordered_map_size_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_d_b
std::size_t unordered_map_size_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_s_i
std::size_t unordered_map_size_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_s_d
std::size_t unordered_map_size_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_s_s
std::size_t unordered_map_size_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_s_b
std::size_t unordered_map_size_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_b_i
std::size_t unordered_map_size_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_b_d
std::size_t unordered_map_size_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_b_s
std::size_t unordered_map_size_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_size_b_b
std::size_t unordered_map_size_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_map_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_i_i
std::size_t multimap_size_i_i(Rcpp::XPtr<std::multimap<int, int> > x);
RcppExport SEXP _cppcontainers_multimap_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_i_d
std::size_t multimap_size_i_d(Rcpp::XPtr<std::multimap<int, double> > x);
RcppExport SEXP _cppcontainers_multimap_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_i_s
std::size_t multimap_size_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_i_b
std::size_t multimap_size_i_b(Rcpp::XPtr<std::multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_multimap_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_d_i
std::size_t multimap_size_d_i(Rcpp::XPtr<std::multimap<double, int> > x);
RcppExport SEXP _cppcontainers_multimap_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_d_d
std::size_t multimap_size_d_d(Rcpp::XPtr<std::multimap<double, double> > x);
RcppExport SEXP _cppcontainers_multimap_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_d_s
std::size_t multimap_size_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_d_b
std::size_t multimap_size_d_b(Rcpp::XPtr<std::multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_multimap_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_s_i
std::size_t multimap_size_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_multimap_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_s_d
std::size_t multimap_size_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_multimap_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_s_s
std::size_t multimap_size_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_s_b
std::size_t multimap_size_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_multimap_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_b_i
std::size_t multimap_size_b_i(Rcpp::XPtr<std::multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_multimap_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_b_d
std::size_t multimap_size_b_d(Rcpp::XPtr<std::multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_multimap_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_b_s
std::size_t multimap_size_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_multimap_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// multimap_size_b_b
std::size_t multimap_size_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_multimap_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_i_i
std::size_t unordered_multimap_size_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_i_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_i_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_i_d
std::size_t unordered_multimap_size_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_i_s
std::size_t unordered_multimap_size_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_i_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_i_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_i_b
std::size_t unordered_multimap_size_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_i_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_i_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_d_i
std::size_t unordered_multimap_size_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_d_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_d_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_d_d
std::size_t unordered_multimap_size_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_d_s
std::size_t unordered_multimap_size_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_d_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_d_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_d_b
std::size_t unordered_multimap_size_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_d_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_d_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_s_i
std::size_t unordered_multimap_size_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_s_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_s_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_s_d
std::size_t unordered_multimap_size_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_s_s
std::size_t unordered_multimap_size_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_s_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_s_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_s_b
std::size_t unordered_multimap_size_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_s_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_s_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_b_i
std::size_t unordered_multimap_size_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_b_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_b_i(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_b_d
std::size_t unordered_multimap_size_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_b_s
std::size_t unordered_multimap_size_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_b_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_b_s(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_size_b_b
std::size_t unordered_multimap_size_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x);
RcppExport SEXP _cppcontainers_unordered_multimap_size_b_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_size_b_b(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_size_i
std::size_t stack_size_i(Rcpp::XPtr<std::stack<int> > x);
RcppExport SEXP _cppcontainers_stack_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_size_d
std::size_t stack_size_d(Rcpp::XPtr<std::stack<double> > x);
RcppExport SEXP _cppcontainers_stack_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_size_s
std::size_t stack_size_s(Rcpp::XPtr<std::stack<std::string> > x);
RcppExport SEXP _cppcontainers_stack_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_size_b
std::size_t stack_size_b(Rcpp::XPtr<std::stack<bool> > x);
RcppExport SEXP _cppcontainers_stack_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_size_i
std::size_t queue_size_i(Rcpp::XPtr<std::queue<int> > x);
RcppExport SEXP _cppcontainers_queue_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_size_d
std::size_t queue_size_d(Rcpp::XPtr<std::queue<double> > x);
RcppExport SEXP _cppcontainers_queue_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_size_s
std::size_t queue_size_s(Rcpp::XPtr<std::queue<std::string> > x);
RcppExport SEXP _cppcontainers_queue_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// queue_size_b
std::size_t queue_size_b(Rcpp::XPtr<std::queue<bool> > x);
RcppExport SEXP _cppcontainers_queue_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_i_d
std::size_t priority_queue_size_i_d(Rcpp::XPtr<std::priority_queue<int> > x);
RcppExport SEXP _cppcontainers_priority_queue_size_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_d_d
std::size_t priority_queue_size_d_d(Rcpp::XPtr<std::priority_queue<double> > x);
RcppExport SEXP _cppcontainers_priority_queue_size_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_s_d
std::size_t priority_queue_size_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x);
RcppExport SEXP _cppcontainers_priority_queue_size_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_b_d
std::size_t priority_queue_size_b_d(Rcpp::XPtr<std::priority_queue<bool> > x);
RcppExport SEXP _cppcontainers_priority_queue_size_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_i_a
std::size_t priority_queue_size_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x);
RcppExport SEXP _cppcontainers_priority_queue_size_i_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_i_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_d_a
std::size_t priority_queue_size_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x);
RcppExport SEXP _cppcontainers_priority_queue_size_d_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_d_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_s_a
std::size_t priority_queue_size_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x);
RcppExport SEXP _cppcontainers_priority_queue_size_s_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_s_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_size_b_a
std::size_t priority_queue_size_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x);
RcppExport SEXP _cppcontainers_priority_queue_size_b_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_size_b_a(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_size_i
std::size_t vector_size_i(Rcpp::XPtr<std::vector<int> > x);
RcppExport SEXP _cppcontainers_vector_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_size_d
std::size_t vector_size_d(Rcpp::XPtr<std::vector<double> > x);
RcppExport SEXP _cppcontainers_vector_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_size_s
std::size_t vector_size_s(Rcpp::XPtr<std::vector<std::string> > x);
RcppExport SEXP _cppcontainers_vector_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_size_b
std::size_t vector_size_b(Rcpp::XPtr<std::vector<bool> > x);
RcppExport SEXP _cppcontainers_vector_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_size_i
std::size_t deque_size_i(Rcpp::XPtr<std::deque<int> > x);
RcppExport SEXP _cppcontainers_deque_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_size_d
std::size_t deque_size_d(Rcpp::XPtr<std::deque<double> > x);
RcppExport SEXP _cppcontainers_deque_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_size_s
std::size_t deque_size_s(Rcpp::XPtr<std::deque<std::string> > x);
RcppExport SEXP _cppcontainers_deque_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// deque_size_b
std::size_t deque_size_b(Rcpp::XPtr<std::deque<bool> > x);
RcppExport SEXP _cppcontainers_deque_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_size_i
std::size_t list_size_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_size_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_size_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_size_d
std::size_t list_size_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_size_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_size_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_size_s
std::size_t list_size_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_size_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_size_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_size_b
std::size_t list_size_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_size_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_size_b(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_sort_i
void forward_list_sort_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_sort_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    forward_list_sort_i(x);
    return R_NilValue;
END_RCPP
}
// forward_list_sort_d
void forward_list_sort_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_sort_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    forward_list_sort_d(x);
    return R_NilValue;
END_RCPP
}
// forward_list_sort_s
void forward_list_sort_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_sort_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    forward_list_sort_s(x);
    return R_NilValue;
END_RCPP
}
// forward_list_sort_b
void forward_list_sort_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_sort_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    forward_list_sort_b(x);
    return R_NilValue;
END_RCPP
}
// list_sort_i
void list_sort_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_sort_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    list_sort_i(x);
    return R_NilValue;
END_RCPP
}
// list_sort_d
void list_sort_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_sort_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    list_sort_d(x);
    return R_NilValue;
END_RCPP
}
// list_sort_s
void list_sort_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_sort_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    list_sort_s(x);
    return R_NilValue;
END_RCPP
}
// list_sort_b
void list_sort_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_sort_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    list_sort_b(x);
    return R_NilValue;
END_RCPP
}
// list_splice_i
void list_splice_i(Rcpp::XPtr<std::list<int> > x, Rcpp::XPtr<std::list<int> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_list_splice_i(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    list_splice_i(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// list_splice_d
void list_splice_d(Rcpp::XPtr<std::list<double> > x, Rcpp::XPtr<std::list<double> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_list_splice_d(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    list_splice_d(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// list_splice_s
void list_splice_s(Rcpp::XPtr<std::list<std::string> > x, Rcpp::XPtr<std::list<std::string> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_list_splice_s(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    list_splice_s(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// list_splice_b
void list_splice_b(Rcpp::XPtr<std::list<bool> > x, Rcpp::XPtr<std::list<bool> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_list_splice_b(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    list_splice_b(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// forward_list_splice_after_i
void forward_list_splice_after_i(Rcpp::XPtr<std::forward_list<int> > x, Rcpp::XPtr<std::forward_list<int> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_forward_list_splice_after_i(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    forward_list_splice_after_i(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// forward_list_splice_after_d
void forward_list_splice_after_d(Rcpp::XPtr<std::forward_list<double> > x, Rcpp::XPtr<std::forward_list<double> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_forward_list_splice_after_d(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    forward_list_splice_after_d(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// forward_list_splice_after_s
void forward_list_splice_after_s(Rcpp::XPtr<std::forward_list<std::string> > x, Rcpp::XPtr<std::forward_list<std::string> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_forward_list_splice_after_s(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    forward_list_splice_after_s(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// forward_list_splice_after_b
void forward_list_splice_after_b(Rcpp::XPtr<std::forward_list<bool> > x, Rcpp::XPtr<std::forward_list<bool> > y, const std::size_t x_position, const std::size_t y_from, const std::size_t y_to);
RcppExport SEXP _cppcontainers_forward_list_splice_after_b(SEXP xSEXP, SEXP ySEXP, SEXP x_positionSEXP, SEXP y_fromSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type x_position(x_positionSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type y_to(y_toSEXP);
    forward_list_splice_after_b(x, y, x_position, y_from, y_to);
    return R_NilValue;
END_RCPP
}
// stack_i
Rcpp::XPtr<std::stack<int> > stack_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_stack_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_i(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_d
Rcpp::XPtr<std::stack<double> > stack_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_stack_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_d(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_s
Rcpp::XPtr<std::stack<std::string> > stack_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_stack_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_s(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_b
Rcpp::XPtr<std::stack<bool> > stack_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_stack_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_b(v));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_i
Rcpp::IntegerVector set_to_r_i(Rcpp::XPtr<std::set<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_set_to_r_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_d
Rcpp::NumericVector set_to_r_d(Rcpp::XPtr<std::set<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_set_to_r_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_s
Rcpp::CharacterVector set_to_r_s(Rcpp::XPtr<std::set<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_set_to_r_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// set_to_r_b
Rcpp::LogicalVector set_to_r_b(Rcpp::XPtr<std::set<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_set_to_r_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(set_to_r_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_i
Rcpp::IntegerVector unordered_set_to_r_i(Rcpp::XPtr<std::unordered_set<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_d
Rcpp::NumericVector unordered_set_to_r_d(Rcpp::XPtr<std::unordered_set<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_s
Rcpp::CharacterVector unordered_set_to_r_s(Rcpp::XPtr<std::unordered_set<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_to_r_b
Rcpp::LogicalVector unordered_set_to_r_b(Rcpp::XPtr<std::unordered_set<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_set_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_set<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// multiset_to_r_i
Rcpp::IntegerVector multiset_to_r_i(Rcpp::XPtr<std::multiset<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multiset_to_r_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_to_r_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multiset_to_r_d
Rcpp::NumericVector multiset_to_r_d(Rcpp::XPtr<std::multiset<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multiset_to_r_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_to_r_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multiset_to_r_s
Rcpp::CharacterVector multiset_to_r_s(Rcpp::XPtr<std::multiset<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multiset_to_r_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_to_r_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multiset_to_r_b
Rcpp::LogicalVector multiset_to_r_b(Rcpp::XPtr<std::multiset<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multiset_to_r_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multiset_to_r_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_to_r_i
Rcpp::IntegerVector unordered_multiset_to_r_i(Rcpp::XPtr<std::unordered_multiset<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_to_r_d
Rcpp::NumericVector unordered_multiset_to_r_d(Rcpp::XPtr<std::unordered_multiset<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_to_r_s
Rcpp::CharacterVector unordered_multiset_to_r_s(Rcpp::XPtr<std::unordered_multiset<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_to_r_b
Rcpp::LogicalVector unordered_multiset_to_r_b(Rcpp::XPtr<std::unordered_multiset<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multiset_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multiset<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_i_i
Rcpp::DataFrame map_to_r_i_i(Rcpp::XPtr<std::map<int, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_to_r_i_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_i_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_i_d
Rcpp::DataFrame map_to_r_i_d(Rcpp::XPtr<std::map<int, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_to_r_i_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_i_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_i_s
Rcpp::DataFrame map_to_r_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_to_r_i_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_i_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_i_b
Rcpp::DataFrame map_to_r_i_b(Rcpp::XPtr<std::map<int, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_map_to_r_i_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_i_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_d_i
Rcpp::DataFrame map_to_r_d_i(Rcpp::XPtr<std::map<double, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_to_r_d_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_d_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_d_d
Rcpp::DataFrame map_to_r_d_d(Rcpp::XPtr<std::map<double, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_to_r_d_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_d_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_d_s
Rcpp::DataFrame map_to_r_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_to_r_d_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_d_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_d_b
Rcpp::DataFrame map_to_r_d_b(Rcpp::XPtr<std::map<double, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_map_to_r_d_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_d_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_s_i
Rcpp::DataFrame map_to_r_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_to_r_s_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_s_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_s_d
Rcpp::DataFrame map_to_r_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_to_r_s_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_s_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_s_s
Rcpp::DataFrame map_to_r_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_to_r_s_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_s_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_s_b
Rcpp::DataFrame map_to_r_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_map_to_r_s_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_s_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_b_i
Rcpp::DataFrame map_to_r_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_to_r_b_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_b_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_b_d
Rcpp::DataFrame map_to_r_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_to_r_b_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_b_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_b_s
Rcpp::DataFrame map_to_r_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_to_r_b_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_b_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// map_to_r_b_b
Rcpp::DataFrame map_to_r_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_map_to_r_b_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(map_to_r_b_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_i_i
Rcpp::DataFrame unordered_map_to_r_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_i_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_i_d
Rcpp::DataFrame unordered_map_to_r_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_i_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_i_s
Rcpp::DataFrame unordered_map_to_r_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_i_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_i_b
Rcpp::DataFrame unordered_map_to_r_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_i_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_d_i
Rcpp::DataFrame unordered_map_to_r_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_d_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_d_d
Rcpp::DataFrame unordered_map_to_r_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_d_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_d_s
Rcpp::DataFrame unordered_map_to_r_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_d_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_d_b
Rcpp::DataFrame unordered_map_to_r_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_d_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_s_i
Rcpp::DataFrame unordered_map_to_r_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_s_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_s_d
Rcpp::DataFrame unordered_map_to_r_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_s_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_s_s
Rcpp::DataFrame unordered_map_to_r_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_s_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_s_b
Rcpp::DataFrame unordered_map_to_r_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_s_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_b_i
Rcpp::DataFrame unordered_map_to_r_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_b_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_b_d
Rcpp::DataFrame unordered_map_to_r_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_b_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_b_s
Rcpp::DataFrame unordered_map_to_r_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_b_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_to_r_b_b
Rcpp::DataFrame unordered_map_to_r_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_map_to_r_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_to_r_b_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_i_i
Rcpp::DataFrame multimap_to_r_i_i(Rcpp::XPtr<std::multimap<int, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_to_r_i_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_i_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_i_d
Rcpp::DataFrame multimap_to_r_i_d(Rcpp::XPtr<std::multimap<int, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_to_r_i_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_i_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_i_s
Rcpp::DataFrame multimap_to_r_i_s(Rcpp::XPtr<std::multimap<int, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_to_r_i_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_i_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_i_b
Rcpp::DataFrame multimap_to_r_i_b(Rcpp::XPtr<std::multimap<int, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const int from, const bool use_to, const int to);
RcppExport SEXP _cppcontainers_multimap_to_r_i_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_i_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_d_i
Rcpp::DataFrame multimap_to_r_d_i(Rcpp::XPtr<std::multimap<double, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_to_r_d_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_d_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_d_d
Rcpp::DataFrame multimap_to_r_d_d(Rcpp::XPtr<std::multimap<double, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_to_r_d_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_d_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_d_s
Rcpp::DataFrame multimap_to_r_d_s(Rcpp::XPtr<std::multimap<double, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_to_r_d_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_d_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_d_b
Rcpp::DataFrame multimap_to_r_d_b(Rcpp::XPtr<std::multimap<double, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const double from, const bool use_to, const double to);
RcppExport SEXP _cppcontainers_multimap_to_r_d_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_d_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_s_i
Rcpp::DataFrame multimap_to_r_s_i(Rcpp::XPtr<std::multimap<std::string, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_to_r_s_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_s_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_s_d
Rcpp::DataFrame multimap_to_r_s_d(Rcpp::XPtr<std::multimap<std::string, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_to_r_s_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_s_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_s_s
Rcpp::DataFrame multimap_to_r_s_s(Rcpp::XPtr<std::multimap<std::string, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_to_r_s_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_s_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_s_b
Rcpp::DataFrame multimap_to_r_s_b(Rcpp::XPtr<std::multimap<std::string, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const std::string from, const bool use_to, const std::string to);
RcppExport SEXP _cppcontainers_multimap_to_r_s_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_s_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_b_i
Rcpp::DataFrame multimap_to_r_b_i(Rcpp::XPtr<std::multimap<bool, int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_to_r_b_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_b_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_b_d
Rcpp::DataFrame multimap_to_r_b_d(Rcpp::XPtr<std::multimap<bool, double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_to_r_b_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_b_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_b_s
Rcpp::DataFrame multimap_to_r_b_s(Rcpp::XPtr<std::multimap<bool, std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_to_r_b_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_b_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// multimap_to_r_b_b
Rcpp::DataFrame multimap_to_r_b_b(Rcpp::XPtr<std::multimap<bool, bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, const bool from, const bool use_to, const bool to);
RcppExport SEXP _cppcontainers_multimap_to_r_b_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< const bool >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(multimap_to_r_b_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_i_i
Rcpp::DataFrame unordered_multimap_to_r_i_i(Rcpp::XPtr<std::unordered_multimap<int, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_i_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_i_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_i_d
Rcpp::DataFrame unordered_multimap_to_r_i_d(Rcpp::XPtr<std::unordered_multimap<int, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_i_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_i_s
Rcpp::DataFrame unordered_multimap_to_r_i_s(Rcpp::XPtr<std::unordered_multimap<int, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_i_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_i_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_i_b
Rcpp::DataFrame unordered_multimap_to_r_i_b(Rcpp::XPtr<std::unordered_multimap<int, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_i_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_i_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_d_i
Rcpp::DataFrame unordered_multimap_to_r_d_i(Rcpp::XPtr<std::unordered_multimap<double, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_d_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_d_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_d_d
Rcpp::DataFrame unordered_multimap_to_r_d_d(Rcpp::XPtr<std::unordered_multimap<double, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_d_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_d_s
Rcpp::DataFrame unordered_multimap_to_r_d_s(Rcpp::XPtr<std::unordered_multimap<double, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_d_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_d_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_d_b
Rcpp::DataFrame unordered_multimap_to_r_d_b(Rcpp::XPtr<std::unordered_multimap<double, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_d_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_d_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_s_i
Rcpp::DataFrame unordered_multimap_to_r_s_i(Rcpp::XPtr<std::unordered_multimap<std::string, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_s_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_s_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_s_d
Rcpp::DataFrame unordered_multimap_to_r_s_d(Rcpp::XPtr<std::unordered_multimap<std::string, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_s_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_s_s
Rcpp::DataFrame unordered_multimap_to_r_s_s(Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_s_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_s_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_s_b
Rcpp::DataFrame unordered_multimap_to_r_s_b(Rcpp::XPtr<std::unordered_multimap<std::string, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_s_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_s_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_b_i
Rcpp::DataFrame unordered_multimap_to_r_b_i(Rcpp::XPtr<std::unordered_multimap<bool, int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_b_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_b_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_b_d
Rcpp::DataFrame unordered_multimap_to_r_b_d(Rcpp::XPtr<std::unordered_multimap<bool, double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_b_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_b_s
Rcpp::DataFrame unordered_multimap_to_r_b_s(Rcpp::XPtr<std::unordered_multimap<bool, std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_b_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_b_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_to_r_b_b
Rcpp::DataFrame unordered_multimap_to_r_b_b(Rcpp::XPtr<std::unordered_multimap<bool, bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_unordered_multimap_to_r_b_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_multimap<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_to_r_b_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// stack_to_r_i
Rcpp::IntegerVector stack_to_r_i(Rcpp::XPtr<std::stack<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_stack_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// stack_to_r_d
Rcpp::NumericVector stack_to_r_d(Rcpp::XPtr<std::stack<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_stack_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// stack_to_r_s
Rcpp::CharacterVector stack_to_r_s(Rcpp::XPtr<std::stack<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_stack_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// stack_to_r_b
Rcpp::LogicalVector stack_to_r_b(Rcpp::XPtr<std::stack<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_stack_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// queue_to_r_i
Rcpp::IntegerVector queue_to_r_i(Rcpp::XPtr<std::queue<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_queue_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// queue_to_r_d
Rcpp::NumericVector queue_to_r_d(Rcpp::XPtr<std::queue<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_queue_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// queue_to_r_s
Rcpp::CharacterVector queue_to_r_s(Rcpp::XPtr<std::queue<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_queue_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// queue_to_r_b
Rcpp::LogicalVector queue_to_r_b(Rcpp::XPtr<std::queue<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_queue_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(queue_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_i_d
Rcpp::IntegerVector priority_queue_to_r_i_d(Rcpp::XPtr<std::priority_queue<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_i_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_i_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_d_d
Rcpp::NumericVector priority_queue_to_r_d_d(Rcpp::XPtr<std::priority_queue<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_d_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_d_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_s_d
Rcpp::CharacterVector priority_queue_to_r_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_s_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_s_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_b_d
Rcpp::LogicalVector priority_queue_to_r_b_d(Rcpp::XPtr<std::priority_queue<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_b_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_b_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_i_a
Rcpp::IntegerVector priority_queue_to_r_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_i_a(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_i_a(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_d_a
Rcpp::NumericVector priority_queue_to_r_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_d_a(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_d_a(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_s_a
Rcpp::CharacterVector priority_queue_to_r_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_s_a(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_s_a(x, n));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_to_r_b_a
Rcpp::LogicalVector priority_queue_to_r_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x, std::size_t n);
RcppExport SEXP _cppcontainers_priority_queue_to_r_b_a(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_to_r_b_a(x, n));
    return rcpp_result_gen;
END_RCPP
}
// vector_to_r_i
Rcpp::IntegerVector vector_to_r_i(Rcpp::XPtr<std::vector<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_to_r_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_to_r_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// vector_to_r_d
Rcpp::NumericVector vector_to_r_d(Rcpp::XPtr<std::vector<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_to_r_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_to_r_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// vector_to_r_s
Rcpp::CharacterVector vector_to_r_s(Rcpp::XPtr<std::vector<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_to_r_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_to_r_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// vector_to_r_b
Rcpp::LogicalVector vector_to_r_b(Rcpp::XPtr<std::vector<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_vector_to_r_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::vector<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_to_r_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// deque_to_r_i
Rcpp::IntegerVector deque_to_r_i(Rcpp::XPtr<std::deque<int> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_to_r_i(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_to_r_i(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// deque_to_r_d
Rcpp::NumericVector deque_to_r_d(Rcpp::XPtr<std::deque<double> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_to_r_d(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_to_r_d(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// deque_to_r_s
Rcpp::CharacterVector deque_to_r_s(Rcpp::XPtr<std::deque<std::string> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_to_r_s(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_to_r_s(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// deque_to_r_b
Rcpp::LogicalVector deque_to_r_b(Rcpp::XPtr<std::deque<bool> > x, const bool use_n, std::size_t n, const bool reverse, const bool use_from, std::size_t from, const bool use_to, std::size_t to);
RcppExport SEXP _cppcontainers_deque_to_r_b(SEXP xSEXP, SEXP use_nSEXP, SEXP nSEXP, SEXP reverseSEXP, SEXP use_fromSEXP, SEXP fromSEXP, SEXP use_toSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::deque<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_n(use_nSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_from(use_fromSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_to(use_toSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(deque_to_r_b(x, use_n, n, reverse, use_from, from, use_to, to));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_to_r_i
Rcpp::IntegerVector forward_list_to_r_i(Rcpp::XPtr<std::forward_list<int> > x, std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_to_r_i(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_to_r_i(x, n));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_to_r_d
Rcpp::NumericVector forward_list_to_r_d(Rcpp::XPtr<std::forward_list<double> > x, std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_to_r_d(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_to_r_d(x, n));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_to_r_s
Rcpp::CharacterVector forward_list_to_r_s(Rcpp::XPtr<std::forward_list<std::string> > x, std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_to_r_s(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_to_r_s(x, n));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_to_r_b
Rcpp::LogicalVector forward_list_to_r_b(Rcpp::XPtr<std::forward_list<bool> > x, std::size_t n);
RcppExport SEXP _cppcontainers_forward_list_to_r_b(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_to_r_b(x, n));
    return rcpp_result_gen;
END_RCPP
}
// list_to_r_i
Rcpp::IntegerVector list_to_r_i(Rcpp::XPtr<std::list<int> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_to_r_i(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_r_i(x, n, reverse));
    return rcpp_result_gen;
END_RCPP
}
// list_to_r_d
Rcpp::NumericVector list_to_r_d(Rcpp::XPtr<std::list<double> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_to_r_d(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_r_d(x, n, reverse));
    return rcpp_result_gen;
END_RCPP
}
// list_to_r_s
Rcpp::CharacterVector list_to_r_s(Rcpp::XPtr<std::list<std::string> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_to_r_s(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_r_s(x, n, reverse));
    return rcpp_result_gen;
END_RCPP
}
// list_to_r_b
Rcpp::LogicalVector list_to_r_b(Rcpp::XPtr<std::list<bool> > x, std::size_t n, const bool reverse);
RcppExport SEXP _cppcontainers_list_to_r_b(SEXP xSEXP, SEXP nSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_r_b(x, n, reverse));
    return rcpp_result_gen;
END_RCPP
}
// stack_top_i
int stack_top_i(Rcpp::XPtr<std::stack<int> > x);
RcppExport SEXP _cppcontainers_stack_top_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_top_i(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_top_d
double stack_top_d(Rcpp::XPtr<std::stack<double> > x);
RcppExport SEXP _cppcontainers_stack_top_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_top_d(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_top_s
std::string stack_top_s(Rcpp::XPtr<std::stack<std::string> > x);
RcppExport SEXP _cppcontainers_stack_top_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_top_s(x));
    return rcpp_result_gen;
END_RCPP
}
// stack_top_b
bool stack_top_b(Rcpp::XPtr<std::stack<bool> > x);
RcppExport SEXP _cppcontainers_stack_top_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::stack<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_top_b(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_i_d
int priority_queue_top_i_d(Rcpp::XPtr<std::priority_queue<int> > x);
RcppExport SEXP _cppcontainers_priority_queue_top_i_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_i_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_d_d
double priority_queue_top_d_d(Rcpp::XPtr<std::priority_queue<double> > x);
RcppExport SEXP _cppcontainers_priority_queue_top_d_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_d_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_s_d
std::string priority_queue_top_s_d(Rcpp::XPtr<std::priority_queue<std::string> > x);
RcppExport SEXP _cppcontainers_priority_queue_top_s_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_s_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_b_d
bool priority_queue_top_b_d(Rcpp::XPtr<std::priority_queue<bool> > x);
RcppExport SEXP _cppcontainers_priority_queue_top_b_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_b_d(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_i_a
int priority_queue_top_i_a(Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > x);
RcppExport SEXP _cppcontainers_priority_queue_top_i_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<int, std::vector<int>, std::greater<int> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_i_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_d_a
double priority_queue_top_d_a(Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > x);
RcppExport SEXP _cppcontainers_priority_queue_top_d_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<double, std::vector<double>, std::greater<double> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_d_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_s_a
std::string priority_queue_top_s_a(Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > x);
RcppExport SEXP _cppcontainers_priority_queue_top_s_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<std::string, std::vector<std::string>, std::greater<std::string> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_s_a(x));
    return rcpp_result_gen;
END_RCPP
}
// priority_queue_top_b_a
bool priority_queue_top_b_a(Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > x);
RcppExport SEXP _cppcontainers_priority_queue_top_b_a(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::priority_queue<bool, std::vector<bool>, std::greater<bool> > > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priority_queue_top_b_a(x));
    return rcpp_result_gen;
END_RCPP
}
// map_try_emplace_i_i
void map_try_emplace_i_i(Rcpp::XPtr<std::map<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_map_try_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_try_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_i_d
void map_try_emplace_i_d(Rcpp::XPtr<std::map<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_map_try_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_try_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_i_s
void map_try_emplace_i_s(Rcpp::XPtr<std::map<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_map_try_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_try_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_i_b
void map_try_emplace_i_b(Rcpp::XPtr<std::map<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_map_try_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_try_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_d_i
void map_try_emplace_d_i(Rcpp::XPtr<std::map<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_map_try_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_try_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_d_d
void map_try_emplace_d_d(Rcpp::XPtr<std::map<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_map_try_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_try_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_d_s
void map_try_emplace_d_s(Rcpp::XPtr<std::map<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_map_try_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_try_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_d_b
void map_try_emplace_d_b(Rcpp::XPtr<std::map<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_map_try_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_try_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_s_i
void map_try_emplace_s_i(Rcpp::XPtr<std::map<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_map_try_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_try_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_s_d
void map_try_emplace_s_d(Rcpp::XPtr<std::map<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_map_try_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_try_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_s_s
void map_try_emplace_s_s(Rcpp::XPtr<std::map<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_map_try_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_try_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_s_b
void map_try_emplace_s_b(Rcpp::XPtr<std::map<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_map_try_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_try_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_b_i
void map_try_emplace_b_i(Rcpp::XPtr<std::map<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_map_try_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    map_try_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_b_d
void map_try_emplace_b_d(Rcpp::XPtr<std::map<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_map_try_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    map_try_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_b_s
void map_try_emplace_b_s(Rcpp::XPtr<std::map<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_map_try_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    map_try_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// map_try_emplace_b_b
void map_try_emplace_b_b(Rcpp::XPtr<std::map<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_map_try_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    map_try_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_i_i
void unordered_map_try_emplace_i_i(Rcpp::XPtr<std::unordered_map<int, int> > x, const int k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_i_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_try_emplace_i_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_i_d
void unordered_map_try_emplace_i_d(Rcpp::XPtr<std::unordered_map<int, double> > x, const int k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_i_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_try_emplace_i_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_i_s
void unordered_map_try_emplace_i_s(Rcpp::XPtr<std::unordered_map<int, std::string> > x, const int k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_i_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_try_emplace_i_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_i_b
void unordered_map_try_emplace_i_b(Rcpp::XPtr<std::unordered_map<int, bool> > x, const int k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_i_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<int, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_try_emplace_i_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_d_i
void unordered_map_try_emplace_d_i(Rcpp::XPtr<std::unordered_map<double, int> > x, const double k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_d_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_try_emplace_d_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_d_d
void unordered_map_try_emplace_d_d(Rcpp::XPtr<std::unordered_map<double, double> > x, const double k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_d_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_try_emplace_d_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_d_s
void unordered_map_try_emplace_d_s(Rcpp::XPtr<std::unordered_map<double, std::string> > x, const double k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_d_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_try_emplace_d_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_d_b
void unordered_map_try_emplace_d_b(Rcpp::XPtr<std::unordered_map<double, bool> > x, const double k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_d_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<double, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_try_emplace_d_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_s_i
void unordered_map_try_emplace_s_i(Rcpp::XPtr<std::unordered_map<std::string, int> > x, const std::string k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_s_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_try_emplace_s_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_s_d
void unordered_map_try_emplace_s_d(Rcpp::XPtr<std::unordered_map<std::string, double> > x, const std::string k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_s_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_try_emplace_s_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_s_s
void unordered_map_try_emplace_s_s(Rcpp::XPtr<std::unordered_map<std::string, std::string> > x, const std::string k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_s_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_try_emplace_s_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_s_b
void unordered_map_try_emplace_s_b(Rcpp::XPtr<std::unordered_map<std::string, bool> > x, const std::string k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_s_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<std::string, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_try_emplace_s_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_b_i
void unordered_map_try_emplace_b_i(Rcpp::XPtr<std::unordered_map<bool, int> > x, const bool k, const int v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_b_i(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, int> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type v(vSEXP);
    unordered_map_try_emplace_b_i(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_b_d
void unordered_map_try_emplace_b_d(Rcpp::XPtr<std::unordered_map<bool, double> > x, const bool k, const double v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_b_d(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, double> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    unordered_map_try_emplace_b_d(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_b_s
void unordered_map_try_emplace_b_s(Rcpp::XPtr<std::unordered_map<bool, std::string> > x, const bool k, const std::string v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_b_s(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, std::string> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type v(vSEXP);
    unordered_map_try_emplace_b_s(x, k, v);
    return R_NilValue;
END_RCPP
}
// unordered_map_try_emplace_b_b
void unordered_map_try_emplace_b_b(Rcpp::XPtr<std::unordered_map<bool, bool> > x, const bool k, const bool v);
RcppExport SEXP _cppcontainers_unordered_map_try_emplace_b_b(SEXP xSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::unordered_map<bool, bool> > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool >::type v(vSEXP);
    unordered_map_try_emplace_b_b(x, k, v);
    return R_NilValue;
END_RCPP
}
// forward_list_unique_i
std::size_t forward_list_unique_i(Rcpp::XPtr<std::forward_list<int> > x);
RcppExport SEXP _cppcontainers_forward_list_unique_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_unique_i(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_unique_d
std::size_t forward_list_unique_d(Rcpp::XPtr<std::forward_list<double> > x);
RcppExport SEXP _cppcontainers_forward_list_unique_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_unique_d(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_unique_s
std::size_t forward_list_unique_s(Rcpp::XPtr<std::forward_list<std::string> > x);
RcppExport SEXP _cppcontainers_forward_list_unique_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_unique_s(x));
    return rcpp_result_gen;
END_RCPP
}
// forward_list_unique_b
std::size_t forward_list_unique_b(Rcpp::XPtr<std::forward_list<bool> > x);
RcppExport SEXP _cppcontainers_forward_list_unique_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::forward_list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_list_unique_b(x));
    return rcpp_result_gen;
END_RCPP
}
// list_unique_i
std::size_t list_unique_i(Rcpp::XPtr<std::list<int> > x);
RcppExport SEXP _cppcontainers_list_unique_i(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<int> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_unique_i(x));
    return rcpp_result_gen;
END_RCPP
}
// list_unique_d
std::size_t list_unique_d(Rcpp::XPtr<std::list<double> > x);
RcppExport SEXP _cppcontainers_list_unique_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<double> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_unique_d(x));
    return rcpp_result_gen;
END_RCPP
}
// list_unique_s
std::size_t list_unique_s(Rcpp::XPtr<std::list<std::string> > x);
RcppExport SEXP _cppcontainers_list_unique_s(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<std::string> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_unique_s(x));
    return rcpp_result_gen;
END_RCPP
}
// list_unique_b
std::size_t list_unique_b(Rcpp::XPtr<std::list<bool> > x);
RcppExport SEXP _cppcontainers_list_unique_b(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<std::list<bool> > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list_unique_b(x));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_i_i
Rcpp::XPtr<std::unordered_map<int, int> > unordered_map_i_i(Rcpp::IntegerVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_map_i_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_i_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_i_d
Rcpp::XPtr<std::unordered_map<int, double> > unordered_map_i_d(Rcpp::IntegerVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_map_i_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_i_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_i_s
Rcpp::XPtr<std::unordered_map<int, std::string> > unordered_map_i_s(Rcpp::IntegerVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_map_i_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_i_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_i_b
Rcpp::XPtr<std::unordered_map<int, bool> > unordered_map_i_b(Rcpp::IntegerVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_map_i_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_i_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_d_i
Rcpp::XPtr<std::unordered_map<double, int> > unordered_map_d_i(Rcpp::NumericVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_map_d_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_d_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_d_d
Rcpp::XPtr<std::unordered_map<double, double> > unordered_map_d_d(Rcpp::NumericVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_map_d_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_d_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_d_s
Rcpp::XPtr<std::unordered_map<double, std::string> > unordered_map_d_s(Rcpp::NumericVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_map_d_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_d_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_d_b
Rcpp::XPtr<std::unordered_map<double, bool> > unordered_map_d_b(Rcpp::NumericVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_map_d_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_d_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_s_i
Rcpp::XPtr<std::unordered_map<std::string, int> > unordered_map_s_i(Rcpp::CharacterVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_map_s_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_s_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_s_d
Rcpp::XPtr<std::unordered_map<std::string, double> > unordered_map_s_d(Rcpp::CharacterVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_map_s_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_s_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_s_s
Rcpp::XPtr<std::unordered_map<std::string, std::string> > unordered_map_s_s(Rcpp::CharacterVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_map_s_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_s_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_s_b
Rcpp::XPtr<std::unordered_map<std::string, bool> > unordered_map_s_b(Rcpp::CharacterVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_map_s_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_s_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_b_i
Rcpp::XPtr<std::unordered_map<bool, int> > unordered_map_b_i(Rcpp::LogicalVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_map_b_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_b_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_b_d
Rcpp::XPtr<std::unordered_map<bool, double> > unordered_map_b_d(Rcpp::LogicalVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_map_b_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_b_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_b_s
Rcpp::XPtr<std::unordered_map<bool, std::string> > unordered_map_b_s(Rcpp::LogicalVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_map_b_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_b_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_map_b_b
Rcpp::XPtr<std::unordered_map<bool, bool> > unordered_map_b_b(Rcpp::LogicalVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_map_b_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_map_b_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_i_i
Rcpp::XPtr<std::unordered_multimap<int, int> > unordered_multimap_i_i(Rcpp::IntegerVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_i_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_i_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_i_d
Rcpp::XPtr<std::unordered_multimap<int, double> > unordered_multimap_i_d(Rcpp::IntegerVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_i_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_i_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_i_s
Rcpp::XPtr<std::unordered_multimap<int, std::string> > unordered_multimap_i_s(Rcpp::IntegerVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_i_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_i_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_i_b
Rcpp::XPtr<std::unordered_multimap<int, bool> > unordered_multimap_i_b(Rcpp::IntegerVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_i_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_i_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_d_i
Rcpp::XPtr<std::unordered_multimap<double, int> > unordered_multimap_d_i(Rcpp::NumericVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_d_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_d_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_d_d
Rcpp::XPtr<std::unordered_multimap<double, double> > unordered_multimap_d_d(Rcpp::NumericVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_d_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_d_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_d_s
Rcpp::XPtr<std::unordered_multimap<double, std::string> > unordered_multimap_d_s(Rcpp::NumericVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_d_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_d_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_d_b
Rcpp::XPtr<std::unordered_multimap<double, bool> > unordered_multimap_d_b(Rcpp::NumericVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_d_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_d_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_s_i
Rcpp::XPtr<std::unordered_multimap<std::string, int> > unordered_multimap_s_i(Rcpp::CharacterVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_s_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_s_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_s_d
Rcpp::XPtr<std::unordered_multimap<std::string, double> > unordered_multimap_s_d(Rcpp::CharacterVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_s_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_s_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_s_s
Rcpp::XPtr<std::unordered_multimap<std::string, std::string> > unordered_multimap_s_s(Rcpp::CharacterVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_s_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_s_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_s_b
Rcpp::XPtr<std::unordered_multimap<std::string, bool> > unordered_multimap_s_b(Rcpp::CharacterVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_s_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_s_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_b_i
Rcpp::XPtr<std::unordered_multimap<bool, int> > unordered_multimap_b_i(Rcpp::LogicalVector& keys, Rcpp::IntegerVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_b_i(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_b_i(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_b_d
Rcpp::XPtr<std::unordered_multimap<bool, double> > unordered_multimap_b_d(Rcpp::LogicalVector& keys, Rcpp::NumericVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_b_d(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_b_d(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_b_s
Rcpp::XPtr<std::unordered_multimap<bool, std::string> > unordered_multimap_b_s(Rcpp::LogicalVector& keys, Rcpp::CharacterVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_b_s(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_b_s(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multimap_b_b
Rcpp::XPtr<std::unordered_multimap<bool, bool> > unordered_multimap_b_b(Rcpp::LogicalVector& keys, Rcpp::LogicalVector& values);
RcppExport SEXP _cppcontainers_unordered_multimap_b_b(SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multimap_b_b(keys, values));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_i
Rcpp::XPtr<std::unordered_multiset<int> > unordered_multiset_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_i(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_d
Rcpp::XPtr<std::unordered_multiset<double> > unordered_multiset_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_d(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_s
Rcpp::XPtr<std::unordered_multiset<std::string> > unordered_multiset_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_s(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_multiset_b
Rcpp::XPtr<std::unordered_multiset<bool> > unordered_multiset_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_multiset_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_multiset_b(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_i
Rcpp::XPtr<std::unordered_set<int> > unordered_set_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_unordered_set_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_i(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_d
Rcpp::XPtr<std::unordered_set<double> > unordered_set_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_unordered_set_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_d(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_s
Rcpp::XPtr<std::unordered_set<std::string> > unordered_set_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_unordered_set_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_s(v));
    return rcpp_result_gen;
END_RCPP
}
// unordered_set_b
Rcpp::XPtr<std::unordered_set<bool> > unordered_set_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_unordered_set_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unordered_set_b(v));
    return rcpp_result_gen;
END_RCPP
}
// vector_i
Rcpp::XPtr<std::vector<int> > vector_i(Rcpp::IntegerVector& v);
RcppExport SEXP _cppcontainers_vector_i(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_i(v));
    return rcpp_result_gen;
END_RCPP
}
// vector_d
Rcpp::XPtr<std::vector<double> > vector_d(Rcpp::NumericVector& v);
RcppExport SEXP _cppcontainers_vector_d(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_d(v));
    return rcpp_result_gen;
END_RCPP
}
// vector_s
Rcpp::XPtr<std::vector<std::string> > vector_s(Rcpp::CharacterVector& v);
RcppExport SEXP _cppcontainers_vector_s(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_s(v));
    return rcpp_result_gen;
END_RCPP
}
// vector_b
Rcpp::XPtr<std::vector<bool> > vector_b(Rcpp::LogicalVector& v);
RcppExport SEXP _cppcontainers_vector_b(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_b(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppcontainers_vector_assign_i", (DL_FUNC) &_cppcontainers_vector_assign_i, 2},
    {"_cppcontainers_vector_assign_d", (DL_FUNC) &_cppcontainers_vector_assign_d, 2},
    {"_cppcontainers_vector_assign_s", (DL_FUNC) &_cppcontainers_vector_assign_s, 2},
    {"_cppcontainers_vector_assign_b", (DL_FUNC) &_cppcontainers_vector_assign_b, 2},
    {"_cppcontainers_deque_assign_i", (DL_FUNC) &_cppcontainers_deque_assign_i, 2},
    {"_cppcontainers_deque_assign_d", (DL_FUNC) &_cppcontainers_deque_assign_d, 2},
    {"_cppcontainers_deque_assign_s", (DL_FUNC) &_cppcontainers_deque_assign_s, 2},
    {"_cppcontainers_deque_assign_b", (DL_FUNC) &_cppcontainers_deque_assign_b, 2},
    {"_cppcontainers_forward_list_assign_i", (DL_FUNC) &_cppcontainers_forward_list_assign_i, 2},
    {"_cppcontainers_forward_list_assign_d", (DL_FUNC) &_cppcontainers_forward_list_assign_d, 2},
    {"_cppcontainers_forward_list_assign_s", (DL_FUNC) &_cppcontainers_forward_list_assign_s, 2},
    {"_cppcontainers_forward_list_assign_b", (DL_FUNC) &_cppcontainers_forward_list_assign_b, 2},
    {"_cppcontainers_list_assign_i", (DL_FUNC) &_cppcontainers_list_assign_i, 2},
    {"_cppcontainers_list_assign_d", (DL_FUNC) &_cppcontainers_list_assign_d, 2},
    {"_cppcontainers_list_assign_s", (DL_FUNC) &_cppcontainers_list_assign_s, 2},
    {"_cppcontainers_list_assign_b", (DL_FUNC) &_cppcontainers_list_assign_b, 2},
    {"_cppcontainers_map_at_i_i", (DL_FUNC) &_cppcontainers_map_at_i_i, 2},
    {"_cppcontainers_map_at_i_d", (DL_FUNC) &_cppcontainers_map_at_i_d, 2},
    {"_cppcontainers_map_at_i_s", (DL_FUNC) &_cppcontainers_map_at_i_s, 2},
    {"_cppcontainers_map_at_i_b", (DL_FUNC) &_cppcontainers_map_at_i_b, 2},
    {"_cppcontainers_map_at_d_i", (DL_FUNC) &_cppcontainers_map_at_d_i, 2},
    {"_cppcontainers_map_at_d_d", (DL_FUNC) &_cppcontainers_map_at_d_d, 2},
    {"_cppcontainers_map_at_d_s", (DL_FUNC) &_cppcontainers_map_at_d_s, 2},
    {"_cppcontainers_map_at_d_b", (DL_FUNC) &_cppcontainers_map_at_d_b, 2},
    {"_cppcontainers_map_at_s_i", (DL_FUNC) &_cppcontainers_map_at_s_i, 2},
    {"_cppcontainers_map_at_s_d", (DL_FUNC) &_cppcontainers_map_at_s_d, 2},
    {"_cppcontainers_map_at_s_s", (DL_FUNC) &_cppcontainers_map_at_s_s, 2},
    {"_cppcontainers_map_at_s_b", (DL_FUNC) &_cppcontainers_map_at_s_b, 2},
    {"_cppcontainers_map_at_b_i", (DL_FUNC) &_cppcontainers_map_at_b_i, 2},
    {"_cppcontainers_map_at_b_d", (DL_FUNC) &_cppcontainers_map_at_b_d, 2},
    {"_cppcontainers_map_at_b_s", (DL_FUNC) &_cppcontainers_map_at_b_s, 2},
    {"_cppcontainers_map_at_b_b", (DL_FUNC) &_cppcontainers_map_at_b_b, 2},
    {"_cppcontainers_unordered_map_at_i_i", (DL_FUNC) &_cppcontainers_unordered_map_at_i_i, 2},
    {"_cppcontainers_unordered_map_at_i_d", (DL_FUNC) &_cppcontainers_unordered_map_at_i_d, 2},
    {"_cppcontainers_unordered_map_at_i_s", (DL_FUNC) &_cppcontainers_unordered_map_at_i_s, 2},
    {"_cppcontainers_unordered_map_at_i_b", (DL_FUNC) &_cppcontainers_unordered_map_at_i_b, 2},
    {"_cppcontainers_unordered_map_at_d_i", (DL_FUNC) &_cppcontainers_unordered_map_at_d_i, 2},
    {"_cppcontainers_unordered_map_at_d_d", (DL_FUNC) &_cppcontainers_unordered_map_at_d_d, 2},
    {"_cppcontainers_unordered_map_at_d_s", (DL_FUNC) &_cppcontainers_unordered_map_at_d_s, 2},
    {"_cppcontainers_unordered_map_at_d_b", (DL_FUNC) &_cppcontainers_unordered_map_at_d_b, 2},
    {"_cppcontainers_unordered_map_at_s_i", (DL_FUNC) &_cppcontainers_unordered_map_at_s_i, 2},
    {"_cppcontainers_unordered_map_at_s_d", (DL_FUNC) &_cppcontainers_unordered_map_at_s_d, 2},
    {"_cppcontainers_unordered_map_at_s_s", (DL_FUNC) &_cppcontainers_unordered_map_at_s_s, 2},
    {"_cppcontainers_unordered_map_at_s_b", (DL_FUNC) &_cppcontainers_unordered_map_at_s_b, 2},
    {"_cppcontainers_unordered_map_at_b_i", (DL_FUNC) &_cppcontainers_unordered_map_at_b_i, 2},
    {"_cppcontainers_unordered_map_at_b_d", (DL_FUNC) &_cppcontainers_unordered_map_at_b_d, 2},
    {"_cppcontainers_unordered_map_at_b_s", (DL_FUNC) &_cppcontainers_unordered_map_at_b_s, 2},
    {"_cppcontainers_unordered_map_at_b_b", (DL_FUNC) &_cppcontainers_unordered_map_at_b_b, 2},
    {"_cppcontainers_vector_at_i", (DL_FUNC) &_cppcontainers_vector_at_i, 2},
    {"_cppcontainers_vector_at_d", (DL_FUNC) &_cppcontainers_vector_at_d, 2},
    {"_cppcontainers_vector_at_s", (DL_FUNC) &_cppcontainers_vector_at_s, 2},
    {"_cppcontainers_vector_at_b", (DL_FUNC) &_cppcontainers_vector_at_b, 2},
    {"_cppcontainers_deque_at_i", (DL_FUNC) &_cppcontainers_deque_at_i, 2},
    {"_cppcontainers_deque_at_d", (DL_FUNC) &_cppcontainers_deque_at_d, 2},
    {"_cppcontainers_deque_at_s", (DL_FUNC) &_cppcontainers_deque_at_s, 2},
    {"_cppcontainers_deque_at_b", (DL_FUNC) &_cppcontainers_deque_at_b, 2},
    {"_cppcontainers_queue_back_i", (DL_FUNC) &_cppcontainers_queue_back_i, 1},
    {"_cppcontainers_queue_back_d", (DL_FUNC) &_cppcontainers_queue_back_d, 1},
    {"_cppcontainers_queue_back_s", (DL_FUNC) &_cppcontainers_queue_back_s, 1},
    {"_cppcontainers_queue_back_b", (DL_FUNC) &_cppcontainers_queue_back_b, 1},
    {"_cppcontainers_vector_back_i", (DL_FUNC) &_cppcontainers_vector_back_i, 1},
    {"_cppcontainers_vector_back_d", (DL_FUNC) &_cppcontainers_vector_back_d, 1},
    {"_cppcontainers_vector_back_s", (DL_FUNC) &_cppcontainers_vector_back_s, 1},
    {"_cppcontainers_vector_back_b", (DL_FUNC) &_cppcontainers_vector_back_b, 1},
    {"_cppcontainers_deque_back_i", (DL_FUNC) &_cppcontainers_deque_back_i, 1},
    {"_cppcontainers_deque_back_d", (DL_FUNC) &_cppcontainers_deque_back_d, 1},
    {"_cppcontainers_deque_back_s", (DL_FUNC) &_cppcontainers_deque_back_s, 1},
    {"_cppcontainers_deque_back_b", (DL_FUNC) &_cppcontainers_deque_back_b, 1},
    {"_cppcontainers_list_back_i", (DL_FUNC) &_cppcontainers_list_back_i, 1},
    {"_cppcontainers_list_back_d", (DL_FUNC) &_cppcontainers_list_back_d, 1},
    {"_cppcontainers_list_back_s", (DL_FUNC) &_cppcontainers_list_back_s, 1},
    {"_cppcontainers_list_back_b", (DL_FUNC) &_cppcontainers_list_back_b, 1},
    {"_cppcontainers_unordered_set_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_i, 1},
    {"_cppcontainers_unordered_set_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_d, 1},
    {"_cppcontainers_unordered_set_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_s, 1},
    {"_cppcontainers_unordered_set_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_set_bucket_count_b, 1},
    {"_cppcontainers_unordered_multiset_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_multiset_bucket_count_i, 1},
    {"_cppcontainers_unordered_multiset_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_multiset_bucket_count_d, 1},
    {"_cppcontainers_unordered_multiset_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_multiset_bucket_count_s, 1},
    {"_cppcontainers_unordered_multiset_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_multiset_bucket_count_b, 1},
    {"_cppcontainers_unordered_map_bucket_count_i_i", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_i_i, 1},
    {"_cppcontainers_unordered_map_bucket_count_i_d", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_i_d, 1},
    {"_cppcontainers_unordered_map_bucket_count_i_s", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_i_s, 1},
    {"_cppcontainers_unordered_map_bucket_count_i_b", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_i_b, 1},
    {"_cppcontainers_unordered_map_bucket_count_d_i", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_d_i, 1},
    {"_cppcontainers_unordered_map_bucket_count_d_d", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_d_d, 1},
    {"_cppcontainers_unordered_map_bucket_count_d_s", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_d_s, 1},
    {"_cppcontainers_unordered_map_bucket_count_d_b", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_d_b, 1},
    {"_cppcontainers_unordered_map_bucket_count_s_i", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_s_i, 1},
    {"_cppcontainers_unordered_map_bucket_count_s_d", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_s_d, 1},
    {"_cppcontainers_unordered_map_bucket_count_s_s", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_s_s, 1},
    {"_cppcontainers_unordered_map_bucket_count_s_b", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_s_b, 1},
    {"_cppcontainers_unordered_map_bucket_count_b_i", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_b_i, 1},
    {"_cppcontainers_unordered_map_bucket_count_b_d", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_b_d, 1},
    {"_cppcontainers_unordered_map_bucket_count_b_s", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_b_s, 1},
    {"_cppcontainers_unordered_map_bucket_count_b_b", (DL_FUNC) &_cppcontainers_unordered_map_bucket_count_b_b, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_i_i, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_i_d, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_i_s, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_i_b, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_d_i, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_d_d, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_d_s, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_d_b, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_s_i, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_s_d, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_s_s, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_s_b, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_b_i, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_b_d, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_b_s, 1},
    {"_cppcontainers_unordered_multimap_bucket_count_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_bucket_count_b_b, 1},
    {"_cppcontainers_vector_capacity_i", (DL_FUNC) &_cppcontainers_vector_capacity_i, 1},
    {"_cppcontainers_vector_capacity_d", (DL_FUNC) &_cppcontainers_vector_capacity_d, 1},
    {"_cppcontainers_vector_capacity_s", (DL_FUNC) &_cppcontainers_vector_capacity_s, 1},
    {"_cppcontainers_vector_capacity_b", (DL_FUNC) &_cppcontainers_vector_capacity_b, 1},
    {"_cppcontainers_set_clear_i", (DL_FUNC) &_cppcontainers_set_clear_i, 1},
    {"_cppcontainers_set_clear_d", (DL_FUNC) &_cppcontainers_set_clear_d, 1},
    {"_cppcontainers_set_clear_s", (DL_FUNC) &_cppcontainers_set_clear_s, 1},
    {"_cppcontainers_set_clear_b", (DL_FUNC) &_cppcontainers_set_clear_b, 1},
    {"_cppcontainers_unordered_set_clear_i", (DL_FUNC) &_cppcontainers_unordered_set_clear_i, 1},
    {"_cppcontainers_unordered_set_clear_d", (DL_FUNC) &_cppcontainers_unordered_set_clear_d, 1},
    {"_cppcontainers_unordered_set_clear_s", (DL_FUNC) &_cppcontainers_unordered_set_clear_s, 1},
    {"_cppcontainers_unordered_set_clear_b", (DL_FUNC) &_cppcontainers_unordered_set_clear_b, 1},
    {"_cppcontainers_multiset_clear_i", (DL_FUNC) &_cppcontainers_multiset_clear_i, 1},
    {"_cppcontainers_multiset_clear_d", (DL_FUNC) &_cppcontainers_multiset_clear_d, 1},
    {"_cppcontainers_multiset_clear_s", (DL_FUNC) &_cppcontainers_multiset_clear_s, 1},
    {"_cppcontainers_multiset_clear_b", (DL_FUNC) &_cppcontainers_multiset_clear_b, 1},
    {"_cppcontainers_unordered_multiset_clear_i", (DL_FUNC) &_cppcontainers_unordered_multiset_clear_i, 1},
    {"_cppcontainers_unordered_multiset_clear_d", (DL_FUNC) &_cppcontainers_unordered_multiset_clear_d, 1},
    {"_cppcontainers_unordered_multiset_clear_s", (DL_FUNC) &_cppcontainers_unordered_multiset_clear_s, 1},
    {"_cppcontainers_unordered_multiset_clear_b", (DL_FUNC) &_cppcontainers_unordered_multiset_clear_b, 1},
    {"_cppcontainers_map_clear_i_i", (DL_FUNC) &_cppcontainers_map_clear_i_i, 1},
    {"_cppcontainers_map_clear_i_d", (DL_FUNC) &_cppcontainers_map_clear_i_d, 1},
    {"_cppcontainers_map_clear_i_s", (DL_FUNC) &_cppcontainers_map_clear_i_s, 1},
    {"_cppcontainers_map_clear_i_b", (DL_FUNC) &_cppcontainers_map_clear_i_b, 1},
    {"_cppcontainers_map_clear_d_i", (DL_FUNC) &_cppcontainers_map_clear_d_i, 1},
    {"_cppcontainers_map_clear_d_d", (DL_FUNC) &_cppcontainers_map_clear_d_d, 1},
    {"_cppcontainers_map_clear_d_s", (DL_FUNC) &_cppcontainers_map_clear_d_s, 1},
    {"_cppcontainers_map_clear_d_b", (DL_FUNC) &_cppcontainers_map_clear_d_b, 1},
    {"_cppcontainers_map_clear_s_i", (DL_FUNC) &_cppcontainers_map_clear_s_i, 1},
    {"_cppcontainers_map_clear_s_d", (DL_FUNC) &_cppcontainers_map_clear_s_d, 1},
    {"_cppcontainers_map_clear_s_s", (DL_FUNC) &_cppcontainers_map_clear_s_s, 1},
    {"_cppcontainers_map_clear_s_b", (DL_FUNC) &_cppcontainers_map_clear_s_b, 1},
    {"_cppcontainers_map_clear_b_i", (DL_FUNC) &_cppcontainers_map_clear_b_i, 1},
    {"_cppcontainers_map_clear_b_d", (DL_FUNC) &_cppcontainers_map_clear_b_d, 1},
    {"_cppcontainers_map_clear_b_s", (DL_FUNC) &_cppcontainers_map_clear_b_s, 1},
    {"_cppcontainers_map_clear_b_b", (DL_FUNC) &_cppcontainers_map_clear_b_b, 1},
    {"_cppcontainers_unordered_map_clear_i_i", (DL_FUNC) &_cppcontainers_unordered_map_clear_i_i, 1},
    {"_cppcontainers_unordered_map_clear_i_d", (DL_FUNC) &_cppcontainers_unordered_map_clear_i_d, 1},
    {"_cppcontainers_unordered_map_clear_i_s", (DL_FUNC) &_cppcontainers_unordered_map_clear_i_s, 1},
    {"_cppcontainers_unordered_map_clear_i_b", (DL_FUNC) &_cppcontainers_unordered_map_clear_i_b, 1},
    {"_cppcontainers_unordered_map_clear_d_i", (DL_FUNC) &_cppcontainers_unordered_map_clear_d_i, 1},
    {"_cppcontainers_unordered_map_clear_d_d", (DL_FUNC) &_cppcontainers_unordered_map_clear_d_d, 1},
    {"_cppcontainers_unordered_map_clear_d_s", (DL_FUNC) &_cppcontainers_unordered_map_clear_d_s, 1},
    {"_cppcontainers_unordered_map_clear_d_b", (DL_FUNC) &_cppcontainers_unordered_map_clear_d_b, 1},
    {"_cppcontainers_unordered_map_clear_s_i", (DL_FUNC) &_cppcontainers_unordered_map_clear_s_i, 1},
    {"_cppcontainers_unordered_map_clear_s_d", (DL_FUNC) &_cppcontainers_unordered_map_clear_s_d, 1},
    {"_cppcontainers_unordered_map_clear_s_s", (DL_FUNC) &_cppcontainers_unordered_map_clear_s_s, 1},
    {"_cppcontainers_unordered_map_clear_s_b", (DL_FUNC) &_cppcontainers_unordered_map_clear_s_b, 1},
    {"_cppcontainers_unordered_map_clear_b_i", (DL_FUNC) &_cppcontainers_unordered_map_clear_b_i, 1},
    {"_cppcontainers_unordered_map_clear_b_d", (DL_FUNC) &_cppcontainers_unordered_map_clear_b_d, 1},
    {"_cppcontainers_unordered_map_clear_b_s", (DL_FUNC) &_cppcontainers_unordered_map_clear_b_s, 1},
    {"_cppcontainers_unordered_map_clear_b_b", (DL_FUNC) &_cppcontainers_unordered_map_clear_b_b, 1},
    {"_cppcontainers_multimap_clear_i_i", (DL_FUNC) &_cppcontainers_multimap_clear_i_i, 1},
    {"_cppcontainers_multimap_clear_i_d", (DL_FUNC) &_cppcontainers_multimap_clear_i_d, 1},
    {"_cppcontainers_multimap_clear_i_s", (DL_FUNC) &_cppcontainers_multimap_clear_i_s, 1},
    {"_cppcontainers_multimap_clear_i_b", (DL_FUNC) &_cppcontainers_multimap_clear_i_b, 1},
    {"_cppcontainers_multimap_clear_d_i", (DL_FUNC) &_cppcontainers_multimap_clear_d_i, 1},
    {"_cppcontainers_multimap_clear_d_d", (DL_FUNC) &_cppcontainers_multimap_clear_d_d, 1},
    {"_cppcontainers_multimap_clear_d_s", (DL_FUNC) &_cppcontainers_multimap_clear_d_s, 1},
    {"_cppcontainers_multimap_clear_d_b", (DL_FUNC) &_cppcontainers_multimap_clear_d_b, 1},
    {"_cppcontainers_multimap_clear_s_i", (DL_FUNC) &_cppcontainers_multimap_clear_s_i, 1},
    {"_cppcontainers_multimap_clear_s_d", (DL_FUNC) &_cppcontainers_multimap_clear_s_d, 1},
    {"_cppcontainers_multimap_clear_s_s", (DL_FUNC) &_cppcontainers_multimap_clear_s_s, 1},
    {"_cppcontainers_multimap_clear_s_b", (DL_FUNC) &_cppcontainers_multimap_clear_s_b, 1},
    {"_cppcontainers_multimap_clear_b_i", (DL_FUNC) &_cppcontainers_multimap_clear_b_i, 1},
    {"_cppcontainers_multimap_clear_b_d", (DL_FUNC) &_cppcontainers_multimap_clear_b_d, 1},
    {"_cppcontainers_multimap_clear_b_s", (DL_FUNC) &_cppcontainers_multimap_clear_b_s, 1},
    {"_cppcontainers_multimap_clear_b_b", (DL_FUNC) &_cppcontainers_multimap_clear_b_b, 1},
    {"_cppcontainers_unordered_multimap_clear_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_i_i, 1},
    {"_cppcontainers_unordered_multimap_clear_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_i_d, 1},
    {"_cppcontainers_unordered_multimap_clear_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_i_s, 1},
    {"_cppcontainers_unordered_multimap_clear_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_i_b, 1},
    {"_cppcontainers_unordered_multimap_clear_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_d_i, 1},
    {"_cppcontainers_unordered_multimap_clear_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_d_d, 1},
    {"_cppcontainers_unordered_multimap_clear_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_d_s, 1},
    {"_cppcontainers_unordered_multimap_clear_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_d_b, 1},
    {"_cppcontainers_unordered_multimap_clear_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_s_i, 1},
    {"_cppcontainers_unordered_multimap_clear_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_s_d, 1},
    {"_cppcontainers_unordered_multimap_clear_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_s_s, 1},
    {"_cppcontainers_unordered_multimap_clear_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_s_b, 1},
    {"_cppcontainers_unordered_multimap_clear_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_b_i, 1},
    {"_cppcontainers_unordered_multimap_clear_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_b_d, 1},
    {"_cppcontainers_unordered_multimap_clear_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_b_s, 1},
    {"_cppcontainers_unordered_multimap_clear_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_clear_b_b, 1},
    {"_cppcontainers_vector_clear_i", (DL_FUNC) &_cppcontainers_vector_clear_i, 1},
    {"_cppcontainers_vector_clear_d", (DL_FUNC) &_cppcontainers_vector_clear_d, 1},
    {"_cppcontainers_vector_clear_s", (DL_FUNC) &_cppcontainers_vector_clear_s, 1},
    {"_cppcontainers_vector_clear_b", (DL_FUNC) &_cppcontainers_vector_clear_b, 1},
    {"_cppcontainers_deque_clear_i", (DL_FUNC) &_cppcontainers_deque_clear_i, 1},
    {"_cppcontainers_deque_clear_d", (DL_FUNC) &_cppcontainers_deque_clear_d, 1},
    {"_cppcontainers_deque_clear_s", (DL_FUNC) &_cppcontainers_deque_clear_s, 1},
    {"_cppcontainers_deque_clear_b", (DL_FUNC) &_cppcontainers_deque_clear_b, 1},
    {"_cppcontainers_forward_list_clear_i", (DL_FUNC) &_cppcontainers_forward_list_clear_i, 1},
    {"_cppcontainers_forward_list_clear_d", (DL_FUNC) &_cppcontainers_forward_list_clear_d, 1},
    {"_cppcontainers_forward_list_clear_s", (DL_FUNC) &_cppcontainers_forward_list_clear_s, 1},
    {"_cppcontainers_forward_list_clear_b", (DL_FUNC) &_cppcontainers_forward_list_clear_b, 1},
    {"_cppcontainers_list_clear_i", (DL_FUNC) &_cppcontainers_list_clear_i, 1},
    {"_cppcontainers_list_clear_d", (DL_FUNC) &_cppcontainers_list_clear_d, 1},
    {"_cppcontainers_list_clear_s", (DL_FUNC) &_cppcontainers_list_clear_s, 1},
    {"_cppcontainers_list_clear_b", (DL_FUNC) &_cppcontainers_list_clear_b, 1},
    {"_cppcontainers_set_contains_i", (DL_FUNC) &_cppcontainers_set_contains_i, 2},
    {"_cppcontainers_set_contains_d", (DL_FUNC) &_cppcontainers_set_contains_d, 2},
    {"_cppcontainers_set_contains_s", (DL_FUNC) &_cppcontainers_set_contains_s, 2},
    {"_cppcontainers_set_contains_b", (DL_FUNC) &_cppcontainers_set_contains_b, 2},
    {"_cppcontainers_unordered_set_contains_i", (DL_FUNC) &_cppcontainers_unordered_set_contains_i, 2},
    {"_cppcontainers_unordered_set_contains_d", (DL_FUNC) &_cppcontainers_unordered_set_contains_d, 2},
    {"_cppcontainers_unordered_set_contains_s", (DL_FUNC) &_cppcontainers_unordered_set_contains_s, 2},
    {"_cppcontainers_unordered_set_contains_b", (DL_FUNC) &_cppcontainers_unordered_set_contains_b, 2},
    {"_cppcontainers_multiset_contains_i", (DL_FUNC) &_cppcontainers_multiset_contains_i, 2},
    {"_cppcontainers_multiset_contains_d", (DL_FUNC) &_cppcontainers_multiset_contains_d, 2},
    {"_cppcontainers_multiset_contains_s", (DL_FUNC) &_cppcontainers_multiset_contains_s, 2},
    {"_cppcontainers_multiset_contains_b", (DL_FUNC) &_cppcontainers_multiset_contains_b, 2},
    {"_cppcontainers_unordered_multiset_contains_i", (DL_FUNC) &_cppcontainers_unordered_multiset_contains_i, 2},
    {"_cppcontainers_unordered_multiset_contains_d", (DL_FUNC) &_cppcontainers_unordered_multiset_contains_d, 2},
    {"_cppcontainers_unordered_multiset_contains_s", (DL_FUNC) &_cppcontainers_unordered_multiset_contains_s, 2},
    {"_cppcontainers_unordered_multiset_contains_b", (DL_FUNC) &_cppcontainers_unordered_multiset_contains_b, 2},
    {"_cppcontainers_map_contains_i_i", (DL_FUNC) &_cppcontainers_map_contains_i_i, 2},
    {"_cppcontainers_map_contains_i_d", (DL_FUNC) &_cppcontainers_map_contains_i_d, 2},
    {"_cppcontainers_map_contains_i_s", (DL_FUNC) &_cppcontainers_map_contains_i_s, 2},
    {"_cppcontainers_map_contains_i_b", (DL_FUNC) &_cppcontainers_map_contains_i_b, 2},
    {"_cppcontainers_map_contains_d_i", (DL_FUNC) &_cppcontainers_map_contains_d_i, 2},
    {"_cppcontainers_map_contains_d_d", (DL_FUNC) &_cppcontainers_map_contains_d_d, 2},
    {"_cppcontainers_map_contains_d_s", (DL_FUNC) &_cppcontainers_map_contains_d_s, 2},
    {"_cppcontainers_map_contains_d_b", (DL_FUNC) &_cppcontainers_map_contains_d_b, 2},
    {"_cppcontainers_map_contains_s_i", (DL_FUNC) &_cppcontainers_map_contains_s_i, 2},
    {"_cppcontainers_map_contains_s_d", (DL_FUNC) &_cppcontainers_map_contains_s_d, 2},
    {"_cppcontainers_map_contains_s_s", (DL_FUNC) &_cppcontainers_map_contains_s_s, 2},
    {"_cppcontainers_map_contains_s_b", (DL_FUNC) &_cppcontainers_map_contains_s_b, 2},
    {"_cppcontainers_map_contains_b_i", (DL_FUNC) &_cppcontainers_map_contains_b_i, 2},
    {"_cppcontainers_map_contains_b_d", (DL_FUNC) &_cppcontainers_map_contains_b_d, 2},
    {"_cppcontainers_map_contains_b_s", (DL_FUNC) &_cppcontainers_map_contains_b_s, 2},
    {"_cppcontainers_map_contains_b_b", (DL_FUNC) &_cppcontainers_map_contains_b_b, 2},
    {"_cppcontainers_unordered_map_contains_i_i", (DL_FUNC) &_cppcontainers_unordered_map_contains_i_i, 2},
    {"_cppcontainers_unordered_map_contains_i_d", (DL_FUNC) &_cppcontainers_unordered_map_contains_i_d, 2},
    {"_cppcontainers_unordered_map_contains_i_s", (DL_FUNC) &_cppcontainers_unordered_map_contains_i_s, 2},
    {"_cppcontainers_unordered_map_contains_i_b", (DL_FUNC) &_cppcontainers_unordered_map_contains_i_b, 2},
    {"_cppcontainers_unordered_map_contains_d_i", (DL_FUNC) &_cppcontainers_unordered_map_contains_d_i, 2},
    {"_cppcontainers_unordered_map_contains_d_d", (DL_FUNC) &_cppcontainers_unordered_map_contains_d_d, 2},
    {"_cppcontainers_unordered_map_contains_d_s", (DL_FUNC) &_cppcontainers_unordered_map_contains_d_s, 2},
    {"_cppcontainers_unordered_map_contains_d_b", (DL_FUNC) &_cppcontainers_unordered_map_contains_d_b, 2},
    {"_cppcontainers_unordered_map_contains_s_i", (DL_FUNC) &_cppcontainers_unordered_map_contains_s_i, 2},
    {"_cppcontainers_unordered_map_contains_s_d", (DL_FUNC) &_cppcontainers_unordered_map_contains_s_d, 2},
    {"_cppcontainers_unordered_map_contains_s_s", (DL_FUNC) &_cppcontainers_unordered_map_contains_s_s, 2},
    {"_cppcontainers_unordered_map_contains_s_b", (DL_FUNC) &_cppcontainers_unordered_map_contains_s_b, 2},
    {"_cppcontainers_unordered_map_contains_b_i", (DL_FUNC) &_cppcontainers_unordered_map_contains_b_i, 2},
    {"_cppcontainers_unordered_map_contains_b_d", (DL_FUNC) &_cppcontainers_unordered_map_contains_b_d, 2},
    {"_cppcontainers_unordered_map_contains_b_s", (DL_FUNC) &_cppcontainers_unordered_map_contains_b_s, 2},
    {"_cppcontainers_unordered_map_contains_b_b", (DL_FUNC) &_cppcontainers_unordered_map_contains_b_b, 2},
    {"_cppcontainers_multimap_contains_i_i", (DL_FUNC) &_cppcontainers_multimap_contains_i_i, 2},
    {"_cppcontainers_multimap_contains_i_d", (DL_FUNC) &_cppcontainers_multimap_contains_i_d, 2},
    {"_cppcontainers_multimap_contains_i_s", (DL_FUNC) &_cppcontainers_multimap_contains_i_s, 2},
    {"_cppcontainers_multimap_contains_i_b", (DL_FUNC) &_cppcontainers_multimap_contains_i_b, 2},
    {"_cppcontainers_multimap_contains_d_i", (DL_FUNC) &_cppcontainers_multimap_contains_d_i, 2},
    {"_cppcontainers_multimap_contains_d_d", (DL_FUNC) &_cppcontainers_multimap_contains_d_d, 2},
    {"_cppcontainers_multimap_contains_d_s", (DL_FUNC) &_cppcontainers_multimap_contains_d_s, 2},
    {"_cppcontainers_multimap_contains_d_b", (DL_FUNC) &_cppcontainers_multimap_contains_d_b, 2},
    {"_cppcontainers_multimap_contains_s_i", (DL_FUNC) &_cppcontainers_multimap_contains_s_i, 2},
    {"_cppcontainers_multimap_contains_s_d", (DL_FUNC) &_cppcontainers_multimap_contains_s_d, 2},
    {"_cppcontainers_multimap_contains_s_s", (DL_FUNC) &_cppcontainers_multimap_contains_s_s, 2},
    {"_cppcontainers_multimap_contains_s_b", (DL_FUNC) &_cppcontainers_multimap_contains_s_b, 2},
    {"_cppcontainers_multimap_contains_b_i", (DL_FUNC) &_cppcontainers_multimap_contains_b_i, 2},
    {"_cppcontainers_multimap_contains_b_d", (DL_FUNC) &_cppcontainers_multimap_contains_b_d, 2},
    {"_cppcontainers_multimap_contains_b_s", (DL_FUNC) &_cppcontainers_multimap_contains_b_s, 2},
    {"_cppcontainers_multimap_contains_b_b", (DL_FUNC) &_cppcontainers_multimap_contains_b_b, 2},
    {"_cppcontainers_unordered_multimap_contains_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_i_i, 2},
    {"_cppcontainers_unordered_multimap_contains_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_i_d, 2},
    {"_cppcontainers_unordered_multimap_contains_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_i_s, 2},
    {"_cppcontainers_unordered_multimap_contains_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_i_b, 2},
    {"_cppcontainers_unordered_multimap_contains_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_d_i, 2},
    {"_cppcontainers_unordered_multimap_contains_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_d_d, 2},
    {"_cppcontainers_unordered_multimap_contains_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_d_s, 2},
    {"_cppcontainers_unordered_multimap_contains_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_d_b, 2},
    {"_cppcontainers_unordered_multimap_contains_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_s_i, 2},
    {"_cppcontainers_unordered_multimap_contains_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_s_d, 2},
    {"_cppcontainers_unordered_multimap_contains_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_s_s, 2},
    {"_cppcontainers_unordered_multimap_contains_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_s_b, 2},
    {"_cppcontainers_unordered_multimap_contains_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_b_i, 2},
    {"_cppcontainers_unordered_multimap_contains_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_b_d, 2},
    {"_cppcontainers_unordered_multimap_contains_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_b_s, 2},
    {"_cppcontainers_unordered_multimap_contains_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_contains_b_b, 2},
    {"_cppcontainers_set_count_i", (DL_FUNC) &_cppcontainers_set_count_i, 2},
    {"_cppcontainers_set_count_d", (DL_FUNC) &_cppcontainers_set_count_d, 2},
    {"_cppcontainers_set_count_s", (DL_FUNC) &_cppcontainers_set_count_s, 2},
    {"_cppcontainers_set_count_b", (DL_FUNC) &_cppcontainers_set_count_b, 2},
    {"_cppcontainers_unordered_set_count_i", (DL_FUNC) &_cppcontainers_unordered_set_count_i, 2},
    {"_cppcontainers_unordered_set_count_d", (DL_FUNC) &_cppcontainers_unordered_set_count_d, 2},
    {"_cppcontainers_unordered_set_count_s", (DL_FUNC) &_cppcontainers_unordered_set_count_s, 2},
    {"_cppcontainers_unordered_set_count_b", (DL_FUNC) &_cppcontainers_unordered_set_count_b, 2},
    {"_cppcontainers_multiset_count_i", (DL_FUNC) &_cppcontainers_multiset_count_i, 2},
    {"_cppcontainers_multiset_count_d", (DL_FUNC) &_cppcontainers_multiset_count_d, 2},
    {"_cppcontainers_multiset_count_s", (DL_FUNC) &_cppcontainers_multiset_count_s, 2},
    {"_cppcontainers_multiset_count_b", (DL_FUNC) &_cppcontainers_multiset_count_b, 2},
    {"_cppcontainers_unordered_multiset_count_i", (DL_FUNC) &_cppcontainers_unordered_multiset_count_i, 2},
    {"_cppcontainers_unordered_multiset_count_d", (DL_FUNC) &_cppcontainers_unordered_multiset_count_d, 2},
    {"_cppcontainers_unordered_multiset_count_s", (DL_FUNC) &_cppcontainers_unordered_multiset_count_s, 2},
    {"_cppcontainers_unordered_multiset_count_b", (DL_FUNC) &_cppcontainers_unordered_multiset_count_b, 2},
    {"_cppcontainers_map_count_i_i", (DL_FUNC) &_cppcontainers_map_count_i_i, 2},
    {"_cppcontainers_map_count_i_d", (DL_FUNC) &_cppcontainers_map_count_i_d, 2},
    {"_cppcontainers_map_count_i_s", (DL_FUNC) &_cppcontainers_map_count_i_s, 2},
    {"_cppcontainers_map_count_i_b", (DL_FUNC) &_cppcontainers_map_count_i_b, 2},
    {"_cppcontainers_map_count_d_i", (DL_FUNC) &_cppcontainers_map_count_d_i, 2},
    {"_cppcontainers_map_count_d_d", (DL_FUNC) &_cppcontainers_map_count_d_d, 2},
    {"_cppcontainers_map_count_d_s", (DL_FUNC) &_cppcontainers_map_count_d_s, 2},
    {"_cppcontainers_map_count_d_b", (DL_FUNC) &_cppcontainers_map_count_d_b, 2},
    {"_cppcontainers_map_count_s_i", (DL_FUNC) &_cppcontainers_map_count_s_i, 2},
    {"_cppcontainers_map_count_s_d", (DL_FUNC) &_cppcontainers_map_count_s_d, 2},
    {"_cppcontainers_map_count_s_s", (DL_FUNC) &_cppcontainers_map_count_s_s, 2},
    {"_cppcontainers_map_count_s_b", (DL_FUNC) &_cppcontainers_map_count_s_b, 2},
    {"_cppcontainers_map_count_b_i", (DL_FUNC) &_cppcontainers_map_count_b_i, 2},
    {"_cppcontainers_map_count_b_d", (DL_FUNC) &_cppcontainers_map_count_b_d, 2},
    {"_cppcontainers_map_count_b_s", (DL_FUNC) &_cppcontainers_map_count_b_s, 2},
    {"_cppcontainers_map_count_b_b", (DL_FUNC) &_cppcontainers_map_count_b_b, 2},
    {"_cppcontainers_unordered_map_count_i_i", (DL_FUNC) &_cppcontainers_unordered_map_count_i_i, 2},
    {"_cppcontainers_unordered_map_count_i_d", (DL_FUNC) &_cppcontainers_unordered_map_count_i_d, 2},
    {"_cppcontainers_unordered_map_count_i_s", (DL_FUNC) &_cppcontainers_unordered_map_count_i_s, 2},
    {"_cppcontainers_unordered_map_count_i_b", (DL_FUNC) &_cppcontainers_unordered_map_count_i_b, 2},
    {"_cppcontainers_unordered_map_count_d_i", (DL_FUNC) &_cppcontainers_unordered_map_count_d_i, 2},
    {"_cppcontainers_unordered_map_count_d_d", (DL_FUNC) &_cppcontainers_unordered_map_count_d_d, 2},
    {"_cppcontainers_unordered_map_count_d_s", (DL_FUNC) &_cppcontainers_unordered_map_count_d_s, 2},
    {"_cppcontainers_unordered_map_count_d_b", (DL_FUNC) &_cppcontainers_unordered_map_count_d_b, 2},
    {"_cppcontainers_unordered_map_count_s_i", (DL_FUNC) &_cppcontainers_unordered_map_count_s_i, 2},
    {"_cppcontainers_unordered_map_count_s_d", (DL_FUNC) &_cppcontainers_unordered_map_count_s_d, 2},
    {"_cppcontainers_unordered_map_count_s_s", (DL_FUNC) &_cppcontainers_unordered_map_count_s_s, 2},
    {"_cppcontainers_unordered_map_count_s_b", (DL_FUNC) &_cppcontainers_unordered_map_count_s_b, 2},
    {"_cppcontainers_unordered_map_count_b_i", (DL_FUNC) &_cppcontainers_unordered_map_count_b_i, 2},
    {"_cppcontainers_unordered_map_count_b_d", (DL_FUNC) &_cppcontainers_unordered_map_count_b_d, 2},
    {"_cppcontainers_unordered_map_count_b_s", (DL_FUNC) &_cppcontainers_unordered_map_count_b_s, 2},
    {"_cppcontainers_unordered_map_count_b_b", (DL_FUNC) &_cppcontainers_unordered_map_count_b_b, 2},
    {"_cppcontainers_multimap_count_i_i", (DL_FUNC) &_cppcontainers_multimap_count_i_i, 2},
    {"_cppcontainers_multimap_count_i_d", (DL_FUNC) &_cppcontainers_multimap_count_i_d, 2},
    {"_cppcontainers_multimap_count_i_s", (DL_FUNC) &_cppcontainers_multimap_count_i_s, 2},
    {"_cppcontainers_multimap_count_i_b", (DL_FUNC) &_cppcontainers_multimap_count_i_b, 2},
    {"_cppcontainers_multimap_count_d_i", (DL_FUNC) &_cppcontainers_multimap_count_d_i, 2},
    {"_cppcontainers_multimap_count_d_d", (DL_FUNC) &_cppcontainers_multimap_count_d_d, 2},
    {"_cppcontainers_multimap_count_d_s", (DL_FUNC) &_cppcontainers_multimap_count_d_s, 2},
    {"_cppcontainers_multimap_count_d_b", (DL_FUNC) &_cppcontainers_multimap_count_d_b, 2},
    {"_cppcontainers_multimap_count_s_i", (DL_FUNC) &_cppcontainers_multimap_count_s_i, 2},
    {"_cppcontainers_multimap_count_s_d", (DL_FUNC) &_cppcontainers_multimap_count_s_d, 2},
    {"_cppcontainers_multimap_count_s_s", (DL_FUNC) &_cppcontainers_multimap_count_s_s, 2},
    {"_cppcontainers_multimap_count_s_b", (DL_FUNC) &_cppcontainers_multimap_count_s_b, 2},
    {"_cppcontainers_multimap_count_b_i", (DL_FUNC) &_cppcontainers_multimap_count_b_i, 2},
    {"_cppcontainers_multimap_count_b_d", (DL_FUNC) &_cppcontainers_multimap_count_b_d, 2},
    {"_cppcontainers_multimap_count_b_s", (DL_FUNC) &_cppcontainers_multimap_count_b_s, 2},
    {"_cppcontainers_multimap_count_b_b", (DL_FUNC) &_cppcontainers_multimap_count_b_b, 2},
    {"_cppcontainers_unordered_multimap_count_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_count_i_i, 2},
    {"_cppcontainers_unordered_multimap_count_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_count_i_d, 2},
    {"_cppcontainers_unordered_multimap_count_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_count_i_s, 2},
    {"_cppcontainers_unordered_multimap_count_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_count_i_b, 2},
    {"_cppcontainers_unordered_multimap_count_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_count_d_i, 2},
    {"_cppcontainers_unordered_multimap_count_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_count_d_d, 2},
    {"_cppcontainers_unordered_multimap_count_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_count_d_s, 2},
    {"_cppcontainers_unordered_multimap_count_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_count_d_b, 2},
    {"_cppcontainers_unordered_multimap_count_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_count_s_i, 2},
    {"_cppcontainers_unordered_multimap_count_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_count_s_d, 2},
    {"_cppcontainers_unordered_multimap_count_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_count_s_s, 2},
    {"_cppcontainers_unordered_multimap_count_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_count_s_b, 2},
    {"_cppcontainers_unordered_multimap_count_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_count_b_i, 2},
    {"_cppcontainers_unordered_multimap_count_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_count_b_d, 2},
    {"_cppcontainers_unordered_multimap_count_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_count_b_s, 2},
    {"_cppcontainers_unordered_multimap_count_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_count_b_b, 2},
    {"_cppcontainers_deque_i", (DL_FUNC) &_cppcontainers_deque_i, 1},
    {"_cppcontainers_deque_d", (DL_FUNC) &_cppcontainers_deque_d, 1},
    {"_cppcontainers_deque_s", (DL_FUNC) &_cppcontainers_deque_s, 1},
    {"_cppcontainers_deque_b", (DL_FUNC) &_cppcontainers_deque_b, 1},
    {"_cppcontainers_set_emplace_i", (DL_FUNC) &_cppcontainers_set_emplace_i, 2},
    {"_cppcontainers_set_emplace_d", (DL_FUNC) &_cppcontainers_set_emplace_d, 2},
    {"_cppcontainers_set_emplace_s", (DL_FUNC) &_cppcontainers_set_emplace_s, 2},
    {"_cppcontainers_set_emplace_b", (DL_FUNC) &_cppcontainers_set_emplace_b, 2},
    {"_cppcontainers_unordered_set_emplace_i", (DL_FUNC) &_cppcontainers_unordered_set_emplace_i, 2},
    {"_cppcontainers_unordered_set_emplace_d", (DL_FUNC) &_cppcontainers_unordered_set_emplace_d, 2},
    {"_cppcontainers_unordered_set_emplace_s", (DL_FUNC) &_cppcontainers_unordered_set_emplace_s, 2},
    {"_cppcontainers_unordered_set_emplace_b", (DL_FUNC) &_cppcontainers_unordered_set_emplace_b, 2},
    {"_cppcontainers_multiset_emplace_i", (DL_FUNC) &_cppcontainers_multiset_emplace_i, 2},
    {"_cppcontainers_multiset_emplace_d", (DL_FUNC) &_cppcontainers_multiset_emplace_d, 2},
    {"_cppcontainers_multiset_emplace_s", (DL_FUNC) &_cppcontainers_multiset_emplace_s, 2},
    {"_cppcontainers_multiset_emplace_b", (DL_FUNC) &_cppcontainers_multiset_emplace_b, 2},
    {"_cppcontainers_unordered_multiset_emplace_i", (DL_FUNC) &_cppcontainers_unordered_multiset_emplace_i, 2},
    {"_cppcontainers_unordered_multiset_emplace_d", (DL_FUNC) &_cppcontainers_unordered_multiset_emplace_d, 2},
    {"_cppcontainers_unordered_multiset_emplace_s", (DL_FUNC) &_cppcontainers_unordered_multiset_emplace_s, 2},
    {"_cppcontainers_unordered_multiset_emplace_b", (DL_FUNC) &_cppcontainers_unordered_multiset_emplace_b, 2},
    {"_cppcontainers_map_emplace_i_i", (DL_FUNC) &_cppcontainers_map_emplace_i_i, 3},
    {"_cppcontainers_map_emplace_i_d", (DL_FUNC) &_cppcontainers_map_emplace_i_d, 3},
    {"_cppcontainers_map_emplace_i_s", (DL_FUNC) &_cppcontainers_map_emplace_i_s, 3},
    {"_cppcontainers_map_emplace_i_b", (DL_FUNC) &_cppcontainers_map_emplace_i_b, 3},
    {"_cppcontainers_map_emplace_d_i", (DL_FUNC) &_cppcontainers_map_emplace_d_i, 3},
    {"_cppcontainers_map_emplace_d_d", (DL_FUNC) &_cppcontainers_map_emplace_d_d, 3},
    {"_cppcontainers_map_emplace_d_s", (DL_FUNC) &_cppcontainers_map_emplace_d_s, 3},
    {"_cppcontainers_map_emplace_d_b", (DL_FUNC) &_cppcontainers_map_emplace_d_b, 3},
    {"_cppcontainers_map_emplace_s_i", (DL_FUNC) &_cppcontainers_map_emplace_s_i, 3},
    {"_cppcontainers_map_emplace_s_d", (DL_FUNC) &_cppcontainers_map_emplace_s_d, 3},
    {"_cppcontainers_map_emplace_s_s", (DL_FUNC) &_cppcontainers_map_emplace_s_s, 3},
    {"_cppcontainers_map_emplace_s_b", (DL_FUNC) &_cppcontainers_map_emplace_s_b, 3},
    {"_cppcontainers_map_emplace_b_i", (DL_FUNC) &_cppcontainers_map_emplace_b_i, 3},
    {"_cppcontainers_map_emplace_b_d", (DL_FUNC) &_cppcontainers_map_emplace_b_d, 3},
    {"_cppcontainers_map_emplace_b_s", (DL_FUNC) &_cppcontainers_map_emplace_b_s, 3},
    {"_cppcontainers_map_emplace_b_b", (DL_FUNC) &_cppcontainers_map_emplace_b_b, 3},
    {"_cppcontainers_unordered_map_emplace_i_i", (DL_FUNC) &_cppcontainers_unordered_map_emplace_i_i, 3},
    {"_cppcontainers_unordered_map_emplace_i_d", (DL_FUNC) &_cppcontainers_unordered_map_emplace_i_d, 3},
    {"_cppcontainers_unordered_map_emplace_i_s", (DL_FUNC) &_cppcontainers_unordered_map_emplace_i_s, 3},
    {"_cppcontainers_unordered_map_emplace_i_b", (DL_FUNC) &_cppcontainers_unordered_map_emplace_i_b, 3},
    {"_cppcontainers_unordered_map_emplace_d_i", (DL_FUNC) &_cppcontainers_unordered_map_emplace_d_i, 3},
    {"_cppcontainers_unordered_map_emplace_d_d", (DL_FUNC) &_cppcontainers_unordered_map_emplace_d_d, 3},
    {"_cppcontainers_unordered_map_emplace_d_s", (DL_FUNC) &_cppcontainers_unordered_map_emplace_d_s, 3},
    {"_cppcontainers_unordered_map_emplace_d_b", (DL_FUNC) &_cppcontainers_unordered_map_emplace_d_b, 3},
    {"_cppcontainers_unordered_map_emplace_s_i", (DL_FUNC) &_cppcontainers_unordered_map_emplace_s_i, 3},
    {"_cppcontainers_unordered_map_emplace_s_d", (DL_FUNC) &_cppcontainers_unordered_map_emplace_s_d, 3},
    {"_cppcontainers_unordered_map_emplace_s_s", (DL_FUNC) &_cppcontainers_unordered_map_emplace_s_s, 3},
    {"_cppcontainers_unordered_map_emplace_s_b", (DL_FUNC) &_cppcontainers_unordered_map_emplace_s_b, 3},
    {"_cppcontainers_unordered_map_emplace_b_i", (DL_FUNC) &_cppcontainers_unordered_map_emplace_b_i, 3},
    {"_cppcontainers_unordered_map_emplace_b_d", (DL_FUNC) &_cppcontainers_unordered_map_emplace_b_d, 3},
    {"_cppcontainers_unordered_map_emplace_b_s", (DL_FUNC) &_cppcontainers_unordered_map_emplace_b_s, 3},
    {"_cppcontainers_unordered_map_emplace_b_b", (DL_FUNC) &_cppcontainers_unordered_map_emplace_b_b, 3},
    {"_cppcontainers_multimap_emplace_i_i", (DL_FUNC) &_cppcontainers_multimap_emplace_i_i, 3},
    {"_cppcontainers_multimap_emplace_i_d", (DL_FUNC) &_cppcontainers_multimap_emplace_i_d, 3},
    {"_cppcontainers_multimap_emplace_i_s", (DL_FUNC) &_cppcontainers_multimap_emplace_i_s, 3},
    {"_cppcontainers_multimap_emplace_i_b", (DL_FUNC) &_cppcontainers_multimap_emplace_i_b, 3},
    {"_cppcontainers_multimap_emplace_d_i", (DL_FUNC) &_cppcontainers_multimap_emplace_d_i, 3},
    {"_cppcontainers_multimap_emplace_d_d", (DL_FUNC) &_cppcontainers_multimap_emplace_d_d, 3},
    {"_cppcontainers_multimap_emplace_d_s", (DL_FUNC) &_cppcontainers_multimap_emplace_d_s, 3},
    {"_cppcontainers_multimap_emplace_d_b", (DL_FUNC) &_cppcontainers_multimap_emplace_d_b, 3},
    {"_cppcontainers_multimap_emplace_s_i", (DL_FUNC) &_cppcontainers_multimap_emplace_s_i, 3},
    {"_cppcontainers_multimap_emplace_s_d", (DL_FUNC) &_cppcontainers_multimap_emplace_s_d, 3},
    {"_cppcontainers_multimap_emplace_s_s", (DL_FUNC) &_cppcontainers_multimap_emplace_s_s, 3},
    {"_cppcontainers_multimap_emplace_s_b", (DL_FUNC) &_cppcontainers_multimap_emplace_s_b, 3},
    {"_cppcontainers_multimap_emplace_b_i", (DL_FUNC) &_cppcontainers_multimap_emplace_b_i, 3},
    {"_cppcontainers_multimap_emplace_b_d", (DL_FUNC) &_cppcontainers_multimap_emplace_b_d, 3},
    {"_cppcontainers_multimap_emplace_b_s", (DL_FUNC) &_cppcontainers_multimap_emplace_b_s, 3},
    {"_cppcontainers_multimap_emplace_b_b", (DL_FUNC) &_cppcontainers_multimap_emplace_b_b, 3},
    {"_cppcontainers_unordered_multimap_emplace_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_i_i, 3},
    {"_cppcontainers_unordered_multimap_emplace_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_i_d, 3},
    {"_cppcontainers_unordered_multimap_emplace_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_i_s, 3},
    {"_cppcontainers_unordered_multimap_emplace_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_i_b, 3},
    {"_cppcontainers_unordered_multimap_emplace_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_d_i, 3},
    {"_cppcontainers_unordered_multimap_emplace_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_d_d, 3},
    {"_cppcontainers_unordered_multimap_emplace_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_d_s, 3},
    {"_cppcontainers_unordered_multimap_emplace_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_d_b, 3},
    {"_cppcontainers_unordered_multimap_emplace_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_s_i, 3},
    {"_cppcontainers_unordered_multimap_emplace_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_s_d, 3},
    {"_cppcontainers_unordered_multimap_emplace_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_s_s, 3},
    {"_cppcontainers_unordered_multimap_emplace_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_s_b, 3},
    {"_cppcontainers_unordered_multimap_emplace_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_b_i, 3},
    {"_cppcontainers_unordered_multimap_emplace_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_b_d, 3},
    {"_cppcontainers_unordered_multimap_emplace_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_b_s, 3},
    {"_cppcontainers_unordered_multimap_emplace_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_emplace_b_b, 3},
    {"_cppcontainers_stack_emplace_i", (DL_FUNC) &_cppcontainers_stack_emplace_i, 2},
    {"_cppcontainers_stack_emplace_d", (DL_FUNC) &_cppcontainers_stack_emplace_d, 2},
    {"_cppcontainers_stack_emplace_s", (DL_FUNC) &_cppcontainers_stack_emplace_s, 2},
    {"_cppcontainers_stack_emplace_b", (DL_FUNC) &_cppcontainers_stack_emplace_b, 2},
    {"_cppcontainers_queue_emplace_i", (DL_FUNC) &_cppcontainers_queue_emplace_i, 2},
    {"_cppcontainers_queue_emplace_d", (DL_FUNC) &_cppcontainers_queue_emplace_d, 2},
    {"_cppcontainers_queue_emplace_s", (DL_FUNC) &_cppcontainers_queue_emplace_s, 2},
    {"_cppcontainers_queue_emplace_b", (DL_FUNC) &_cppcontainers_queue_emplace_b, 2},
    {"_cppcontainers_priority_queue_emplace_i_d", (DL_FUNC) &_cppcontainers_priority_queue_emplace_i_d, 2},
    {"_cppcontainers_priority_queue_emplace_d_d", (DL_FUNC) &_cppcontainers_priority_queue_emplace_d_d, 2},
    {"_cppcontainers_priority_queue_emplace_s_d", (DL_FUNC) &_cppcontainers_priority_queue_emplace_s_d, 2},
    {"_cppcontainers_priority_queue_emplace_b_d", (DL_FUNC) &_cppcontainers_priority_queue_emplace_b_d, 2},
    {"_cppcontainers_priority_queue_emplace_i_a", (DL_FUNC) &_cppcontainers_priority_queue_emplace_i_a, 2},
    {"_cppcontainers_priority_queue_emplace_d_a", (DL_FUNC) &_cppcontainers_priority_queue_emplace_d_a, 2},
    {"_cppcontainers_priority_queue_emplace_s_a", (DL_FUNC) &_cppcontainers_priority_queue_emplace_s_a, 2},
    {"_cppcontainers_priority_queue_emplace_b_a", (DL_FUNC) &_cppcontainers_priority_queue_emplace_b_a, 2},
    {"_cppcontainers_vector_emplace_i", (DL_FUNC) &_cppcontainers_vector_emplace_i, 3},
    {"_cppcontainers_vector_emplace_d", (DL_FUNC) &_cppcontainers_vector_emplace_d, 3},
    {"_cppcontainers_vector_emplace_s", (DL_FUNC) &_cppcontainers_vector_emplace_s, 3},
    {"_cppcontainers_vector_emplace_b", (DL_FUNC) &_cppcontainers_vector_emplace_b, 3},
    {"_cppcontainers_deque_emplace_i", (DL_FUNC) &_cppcontainers_deque_emplace_i, 3},
    {"_cppcontainers_deque_emplace_d", (DL_FUNC) &_cppcontainers_deque_emplace_d, 3},
    {"_cppcontainers_deque_emplace_s", (DL_FUNC) &_cppcontainers_deque_emplace_s, 3},
    {"_cppcontainers_deque_emplace_b", (DL_FUNC) &_cppcontainers_deque_emplace_b, 3},
    {"_cppcontainers_list_emplace_i", (DL_FUNC) &_cppcontainers_list_emplace_i, 3},
    {"_cppcontainers_list_emplace_d", (DL_FUNC) &_cppcontainers_list_emplace_d, 3},
    {"_cppcontainers_list_emplace_s", (DL_FUNC) &_cppcontainers_list_emplace_s, 3},
    {"_cppcontainers_list_emplace_b", (DL_FUNC) &_cppcontainers_list_emplace_b, 3},
    {"_cppcontainers_forward_list_emplace_after_i", (DL_FUNC) &_cppcontainers_forward_list_emplace_after_i, 3},
    {"_cppcontainers_forward_list_emplace_after_d", (DL_FUNC) &_cppcontainers_forward_list_emplace_after_d, 3},
    {"_cppcontainers_forward_list_emplace_after_s", (DL_FUNC) &_cppcontainers_forward_list_emplace_after_s, 3},
    {"_cppcontainers_forward_list_emplace_after_b", (DL_FUNC) &_cppcontainers_forward_list_emplace_after_b, 3},
    {"_cppcontainers_vector_emplace_back_i", (DL_FUNC) &_cppcontainers_vector_emplace_back_i, 2},
    {"_cppcontainers_vector_emplace_back_d", (DL_FUNC) &_cppcontainers_vector_emplace_back_d, 2},
    {"_cppcontainers_vector_emplace_back_s", (DL_FUNC) &_cppcontainers_vector_emplace_back_s, 2},
    {"_cppcontainers_vector_emplace_back_b", (DL_FUNC) &_cppcontainers_vector_emplace_back_b, 2},
    {"_cppcontainers_deque_emplace_back_i", (DL_FUNC) &_cppcontainers_deque_emplace_back_i, 2},
    {"_cppcontainers_deque_emplace_back_d", (DL_FUNC) &_cppcontainers_deque_emplace_back_d, 2},
    {"_cppcontainers_deque_emplace_back_s", (DL_FUNC) &_cppcontainers_deque_emplace_back_s, 2},
    {"_cppcontainers_deque_emplace_back_b", (DL_FUNC) &_cppcontainers_deque_emplace_back_b, 2},
    {"_cppcontainers_list_emplace_back_i", (DL_FUNC) &_cppcontainers_list_emplace_back_i, 2},
    {"_cppcontainers_list_emplace_back_d", (DL_FUNC) &_cppcontainers_list_emplace_back_d, 2},
    {"_cppcontainers_list_emplace_back_s", (DL_FUNC) &_cppcontainers_list_emplace_back_s, 2},
    {"_cppcontainers_list_emplace_back_b", (DL_FUNC) &_cppcontainers_list_emplace_back_b, 2},
    {"_cppcontainers_deque_emplace_front_i", (DL_FUNC) &_cppcontainers_deque_emplace_front_i, 2},
    {"_cppcontainers_deque_emplace_front_d", (DL_FUNC) &_cppcontainers_deque_emplace_front_d, 2},
    {"_cppcontainers_deque_emplace_front_s", (DL_FUNC) &_cppcontainers_deque_emplace_front_s, 2},
    {"_cppcontainers_deque_emplace_front_b", (DL_FUNC) &_cppcontainers_deque_emplace_front_b, 2},
    {"_cppcontainers_forward_list_emplace_front_i", (DL_FUNC) &_cppcontainers_forward_list_emplace_front_i, 2},
    {"_cppcontainers_forward_list_emplace_front_d", (DL_FUNC) &_cppcontainers_forward_list_emplace_front_d, 2},
    {"_cppcontainers_forward_list_emplace_front_s", (DL_FUNC) &_cppcontainers_forward_list_emplace_front_s, 2},
    {"_cppcontainers_forward_list_emplace_front_b", (DL_FUNC) &_cppcontainers_forward_list_emplace_front_b, 2},
    {"_cppcontainers_list_emplace_front_i", (DL_FUNC) &_cppcontainers_list_emplace_front_i, 2},
    {"_cppcontainers_list_emplace_front_d", (DL_FUNC) &_cppcontainers_list_emplace_front_d, 2},
    {"_cppcontainers_list_emplace_front_s", (DL_FUNC) &_cppcontainers_list_emplace_front_s, 2},
    {"_cppcontainers_list_emplace_front_b", (DL_FUNC) &_cppcontainers_list_emplace_front_b, 2},
    {"_cppcontainers_set_empty_i", (DL_FUNC) &_cppcontainers_set_empty_i, 1},
    {"_cppcontainers_set_empty_d", (DL_FUNC) &_cppcontainers_set_empty_d, 1},
    {"_cppcontainers_set_empty_s", (DL_FUNC) &_cppcontainers_set_empty_s, 1},
    {"_cppcontainers_set_empty_b", (DL_FUNC) &_cppcontainers_set_empty_b, 1},
    {"_cppcontainers_unordered_set_empty_i", (DL_FUNC) &_cppcontainers_unordered_set_empty_i, 1},
    {"_cppcontainers_unordered_set_empty_d", (DL_FUNC) &_cppcontainers_unordered_set_empty_d, 1},
    {"_cppcontainers_unordered_set_empty_s", (DL_FUNC) &_cppcontainers_unordered_set_empty_s, 1},
    {"_cppcontainers_unordered_set_empty_b", (DL_FUNC) &_cppcontainers_unordered_set_empty_b, 1},
    {"_cppcontainers_multiset_empty_i", (DL_FUNC) &_cppcontainers_multiset_empty_i, 1},
    {"_cppcontainers_multiset_empty_d", (DL_FUNC) &_cppcontainers_multiset_empty_d, 1},
    {"_cppcontainers_multiset_empty_s", (DL_FUNC) &_cppcontainers_multiset_empty_s, 1},
    {"_cppcontainers_multiset_empty_b", (DL_FUNC) &_cppcontainers_multiset_empty_b, 1},
    {"_cppcontainers_unordered_multiset_empty_i", (DL_FUNC) &_cppcontainers_unordered_multiset_empty_i, 1},
    {"_cppcontainers_unordered_multiset_empty_d", (DL_FUNC) &_cppcontainers_unordered_multiset_empty_d, 1},
    {"_cppcontainers_unordered_multiset_empty_s", (DL_FUNC) &_cppcontainers_unordered_multiset_empty_s, 1},
    {"_cppcontainers_unordered_multiset_empty_b", (DL_FUNC) &_cppcontainers_unordered_multiset_empty_b, 1},
    {"_cppcontainers_map_empty_i_i", (DL_FUNC) &_cppcontainers_map_empty_i_i, 1},
    {"_cppcontainers_map_empty_i_d", (DL_FUNC) &_cppcontainers_map_empty_i_d, 1},
    {"_cppcontainers_map_empty_i_s", (DL_FUNC) &_cppcontainers_map_empty_i_s, 1},
    {"_cppcontainers_map_empty_i_b", (DL_FUNC) &_cppcontainers_map_empty_i_b, 1},
    {"_cppcontainers_map_empty_d_i", (DL_FUNC) &_cppcontainers_map_empty_d_i, 1},
    {"_cppcontainers_map_empty_d_d", (DL_FUNC) &_cppcontainers_map_empty_d_d, 1},
    {"_cppcontainers_map_empty_d_s", (DL_FUNC) &_cppcontainers_map_empty_d_s, 1},
    {"_cppcontainers_map_empty_d_b", (DL_FUNC) &_cppcontainers_map_empty_d_b, 1},
    {"_cppcontainers_map_empty_s_i", (DL_FUNC) &_cppcontainers_map_empty_s_i, 1},
    {"_cppcontainers_map_empty_s_d", (DL_FUNC) &_cppcontainers_map_empty_s_d, 1},
    {"_cppcontainers_map_empty_s_s", (DL_FUNC) &_cppcontainers_map_empty_s_s, 1},
    {"_cppcontainers_map_empty_s_b", (DL_FUNC) &_cppcontainers_map_empty_s_b, 1},
    {"_cppcontainers_map_empty_b_i", (DL_FUNC) &_cppcontainers_map_empty_b_i, 1},
    {"_cppcontainers_map_empty_b_d", (DL_FUNC) &_cppcontainers_map_empty_b_d, 1},
    {"_cppcontainers_map_empty_b_s", (DL_FUNC) &_cppcontainers_map_empty_b_s, 1},
    {"_cppcontainers_map_empty_b_b", (DL_FUNC) &_cppcontainers_map_empty_b_b, 1},
    {"_cppcontainers_unordered_map_empty_i_i", (DL_FUNC) &_cppcontainers_unordered_map_empty_i_i, 1},
    {"_cppcontainers_unordered_map_empty_i_d", (DL_FUNC) &_cppcontainers_unordered_map_empty_i_d, 1},
    {"_cppcontainers_unordered_map_empty_i_s", (DL_FUNC) &_cppcontainers_unordered_map_empty_i_s, 1},
    {"_cppcontainers_unordered_map_empty_i_b", (DL_FUNC) &_cppcontainers_unordered_map_empty_i_b, 1},
    {"_cppcontainers_unordered_map_empty_d_i", (DL_FUNC) &_cppcontainers_unordered_map_empty_d_i, 1},
    {"_cppcontainers_unordered_map_empty_d_d", (DL_FUNC) &_cppcontainers_unordered_map_empty_d_d, 1},
    {"_cppcontainers_unordered_map_empty_d_s", (DL_FUNC) &_cppcontainers_unordered_map_empty_d_s, 1},
    {"_cppcontainers_unordered_map_empty_d_b", (DL_FUNC) &_cppcontainers_unordered_map_empty_d_b, 1},
    {"_cppcontainers_unordered_map_empty_s_i", (DL_FUNC) &_cppcontainers_unordered_map_empty_s_i, 1},
    {"_cppcontainers_unordered_map_empty_s_d", (DL_FUNC) &_cppcontainers_unordered_map_empty_s_d, 1},
    {"_cppcontainers_unordered_map_empty_s_s", (DL_FUNC) &_cppcontainers_unordered_map_empty_s_s, 1},
    {"_cppcontainers_unordered_map_empty_s_b", (DL_FUNC) &_cppcontainers_unordered_map_empty_s_b, 1},
    {"_cppcontainers_unordered_map_empty_b_i", (DL_FUNC) &_cppcontainers_unordered_map_empty_b_i, 1},
    {"_cppcontainers_unordered_map_empty_b_d", (DL_FUNC) &_cppcontainers_unordered_map_empty_b_d, 1},
    {"_cppcontainers_unordered_map_empty_b_s", (DL_FUNC) &_cppcontainers_unordered_map_empty_b_s, 1},
    {"_cppcontainers_unordered_map_empty_b_b", (DL_FUNC) &_cppcontainers_unordered_map_empty_b_b, 1},
    {"_cppcontainers_multimap_empty_i_i", (DL_FUNC) &_cppcontainers_multimap_empty_i_i, 1},
    {"_cppcontainers_multimap_empty_i_d", (DL_FUNC) &_cppcontainers_multimap_empty_i_d, 1},
    {"_cppcontainers_multimap_empty_i_s", (DL_FUNC) &_cppcontainers_multimap_empty_i_s, 1},
    {"_cppcontainers_multimap_empty_i_b", (DL_FUNC) &_cppcontainers_multimap_empty_i_b, 1},
    {"_cppcontainers_multimap_empty_d_i", (DL_FUNC) &_cppcontainers_multimap_empty_d_i, 1},
    {"_cppcontainers_multimap_empty_d_d", (DL_FUNC) &_cppcontainers_multimap_empty_d_d, 1},
    {"_cppcontainers_multimap_empty_d_s", (DL_FUNC) &_cppcontainers_multimap_empty_d_s, 1},
    {"_cppcontainers_multimap_empty_d_b", (DL_FUNC) &_cppcontainers_multimap_empty_d_b, 1},
    {"_cppcontainers_multimap_empty_s_i", (DL_FUNC) &_cppcontainers_multimap_empty_s_i, 1},
    {"_cppcontainers_multimap_empty_s_d", (DL_FUNC) &_cppcontainers_multimap_empty_s_d, 1},
    {"_cppcontainers_multimap_empty_s_s", (DL_FUNC) &_cppcontainers_multimap_empty_s_s, 1},
    {"_cppcontainers_multimap_empty_s_b", (DL_FUNC) &_cppcontainers_multimap_empty_s_b, 1},
    {"_cppcontainers_multimap_empty_b_i", (DL_FUNC) &_cppcontainers_multimap_empty_b_i, 1},
    {"_cppcontainers_multimap_empty_b_d", (DL_FUNC) &_cppcontainers_multimap_empty_b_d, 1},
    {"_cppcontainers_multimap_empty_b_s", (DL_FUNC) &_cppcontainers_multimap_empty_b_s, 1},
    {"_cppcontainers_multimap_empty_b_b", (DL_FUNC) &_cppcontainers_multimap_empty_b_b, 1},
    {"_cppcontainers_unordered_multimap_empty_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_i_i, 1},
    {"_cppcontainers_unordered_multimap_empty_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_i_d, 1},
    {"_cppcontainers_unordered_multimap_empty_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_i_s, 1},
    {"_cppcontainers_unordered_multimap_empty_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_i_b, 1},
    {"_cppcontainers_unordered_multimap_empty_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_d_i, 1},
    {"_cppcontainers_unordered_multimap_empty_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_d_d, 1},
    {"_cppcontainers_unordered_multimap_empty_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_d_s, 1},
    {"_cppcontainers_unordered_multimap_empty_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_d_b, 1},
    {"_cppcontainers_unordered_multimap_empty_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_s_i, 1},
    {"_cppcontainers_unordered_multimap_empty_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_s_d, 1},
    {"_cppcontainers_unordered_multimap_empty_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_s_s, 1},
    {"_cppcontainers_unordered_multimap_empty_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_s_b, 1},
    {"_cppcontainers_unordered_multimap_empty_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_b_i, 1},
    {"_cppcontainers_unordered_multimap_empty_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_b_d, 1},
    {"_cppcontainers_unordered_multimap_empty_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_b_s, 1},
    {"_cppcontainers_unordered_multimap_empty_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_empty_b_b, 1},
    {"_cppcontainers_stack_empty_i", (DL_FUNC) &_cppcontainers_stack_empty_i, 1},
    {"_cppcontainers_stack_empty_d", (DL_FUNC) &_cppcontainers_stack_empty_d, 1},
    {"_cppcontainers_stack_empty_s", (DL_FUNC) &_cppcontainers_stack_empty_s, 1},
    {"_cppcontainers_stack_empty_b", (DL_FUNC) &_cppcontainers_stack_empty_b, 1},
    {"_cppcontainers_queue_empty_i", (DL_FUNC) &_cppcontainers_queue_empty_i, 1},
    {"_cppcontainers_queue_empty_d", (DL_FUNC) &_cppcontainers_queue_empty_d, 1},
    {"_cppcontainers_queue_empty_s", (DL_FUNC) &_cppcontainers_queue_empty_s, 1},
    {"_cppcontainers_queue_empty_b", (DL_FUNC) &_cppcontainers_queue_empty_b, 1},
    {"_cppcontainers_priority_queue_empty_i_d", (DL_FUNC) &_cppcontainers_priority_queue_empty_i_d, 1},
    {"_cppcontainers_priority_queue_empty_d_d", (DL_FUNC) &_cppcontainers_priority_queue_empty_d_d, 1},
    {"_cppcontainers_priority_queue_empty_s_d", (DL_FUNC) &_cppcontainers_priority_queue_empty_s_d, 1},
    {"_cppcontainers_priority_queue_empty_b_d", (DL_FUNC) &_cppcontainers_priority_queue_empty_b_d, 1},
    {"_cppcontainers_priority_queue_empty_i_a", (DL_FUNC) &_cppcontainers_priority_queue_empty_i_a, 1},
    {"_cppcontainers_priority_queue_empty_d_a", (DL_FUNC) &_cppcontainers_priority_queue_empty_d_a, 1},
    {"_cppcontainers_priority_queue_empty_s_a", (DL_FUNC) &_cppcontainers_priority_queue_empty_s_a, 1},
    {"_cppcontainers_priority_queue_empty_b_a", (DL_FUNC) &_cppcontainers_priority_queue_empty_b_a, 1},
    {"_cppcontainers_vector_empty_i", (DL_FUNC) &_cppcontainers_vector_empty_i, 1},
    {"_cppcontainers_vector_empty_d", (DL_FUNC) &_cppcontainers_vector_empty_d, 1},
    {"_cppcontainers_vector_empty_s", (DL_FUNC) &_cppcontainers_vector_empty_s, 1},
    {"_cppcontainers_vector_empty_b", (DL_FUNC) &_cppcontainers_vector_empty_b, 1},
    {"_cppcontainers_deque_empty_i", (DL_FUNC) &_cppcontainers_deque_empty_i, 1},
    {"_cppcontainers_deque_empty_d", (DL_FUNC) &_cppcontainers_deque_empty_d, 1},
    {"_cppcontainers_deque_empty_s", (DL_FUNC) &_cppcontainers_deque_empty_s, 1},
    {"_cppcontainers_deque_empty_b", (DL_FUNC) &_cppcontainers_deque_empty_b, 1},
    {"_cppcontainers_forward_list_empty_i", (DL_FUNC) &_cppcontainers_forward_list_empty_i, 1},
    {"_cppcontainers_forward_list_empty_d", (DL_FUNC) &_cppcontainers_forward_list_empty_d, 1},
    {"_cppcontainers_forward_list_empty_s", (DL_FUNC) &_cppcontainers_forward_list_empty_s, 1},
    {"_cppcontainers_forward_list_empty_b", (DL_FUNC) &_cppcontainers_forward_list_empty_b, 1},
    {"_cppcontainers_list_empty_i", (DL_FUNC) &_cppcontainers_list_empty_i, 1},
    {"_cppcontainers_list_empty_d", (DL_FUNC) &_cppcontainers_list_empty_d, 1},
    {"_cppcontainers_list_empty_s", (DL_FUNC) &_cppcontainers_list_empty_s, 1},
    {"_cppcontainers_list_empty_b", (DL_FUNC) &_cppcontainers_list_empty_b, 1},
    {"_cppcontainers_set_erase_i", (DL_FUNC) &_cppcontainers_set_erase_i, 2},
    {"_cppcontainers_set_erase_d", (DL_FUNC) &_cppcontainers_set_erase_d, 2},
    {"_cppcontainers_set_erase_s", (DL_FUNC) &_cppcontainers_set_erase_s, 2},
    {"_cppcontainers_set_erase_b", (DL_FUNC) &_cppcontainers_set_erase_b, 2},
    {"_cppcontainers_unordered_set_erase_i", (DL_FUNC) &_cppcontainers_unordered_set_erase_i, 2},
    {"_cppcontainers_unordered_set_erase_d", (DL_FUNC) &_cppcontainers_unordered_set_erase_d, 2},
    {"_cppcontainers_unordered_set_erase_s", (DL_FUNC) &_cppcontainers_unordered_set_erase_s, 2},
    {"_cppcontainers_unordered_set_erase_b", (DL_FUNC) &_cppcontainers_unordered_set_erase_b, 2},
    {"_cppcontainers_multiset_erase_i", (DL_FUNC) &_cppcontainers_multiset_erase_i, 2},
    {"_cppcontainers_multiset_erase_d", (DL_FUNC) &_cppcontainers_multiset_erase_d, 2},
    {"_cppcontainers_multiset_erase_s", (DL_FUNC) &_cppcontainers_multiset_erase_s, 2},
    {"_cppcontainers_multiset_erase_b", (DL_FUNC) &_cppcontainers_multiset_erase_b, 2},
    {"_cppcontainers_unordered_multiset_erase_i", (DL_FUNC) &_cppcontainers_unordered_multiset_erase_i, 2},
    {"_cppcontainers_unordered_multiset_erase_d", (DL_FUNC) &_cppcontainers_unordered_multiset_erase_d, 2},
    {"_cppcontainers_unordered_multiset_erase_s", (DL_FUNC) &_cppcontainers_unordered_multiset_erase_s, 2},
    {"_cppcontainers_unordered_multiset_erase_b", (DL_FUNC) &_cppcontainers_unordered_multiset_erase_b, 2},
    {"_cppcontainers_map_erase_i_i", (DL_FUNC) &_cppcontainers_map_erase_i_i, 2},
    {"_cppcontainers_map_erase_i_d", (DL_FUNC) &_cppcontainers_map_erase_i_d, 2},
    {"_cppcontainers_map_erase_i_s", (DL_FUNC) &_cppcontainers_map_erase_i_s, 2},
    {"_cppcontainers_map_erase_i_b", (DL_FUNC) &_cppcontainers_map_erase_i_b, 2},
    {"_cppcontainers_map_erase_d_i", (DL_FUNC) &_cppcontainers_map_erase_d_i, 2},
    {"_cppcontainers_map_erase_d_d", (DL_FUNC) &_cppcontainers_map_erase_d_d, 2},
    {"_cppcontainers_map_erase_d_s", (DL_FUNC) &_cppcontainers_map_erase_d_s, 2},
    {"_cppcontainers_map_erase_d_b", (DL_FUNC) &_cppcontainers_map_erase_d_b, 2},
    {"_cppcontainers_map_erase_s_i", (DL_FUNC) &_cppcontainers_map_erase_s_i, 2},
    {"_cppcontainers_map_erase_s_d", (DL_FUNC) &_cppcontainers_map_erase_s_d, 2},
    {"_cppcontainers_map_erase_s_s", (DL_FUNC) &_cppcontainers_map_erase_s_s, 2},
    {"_cppcontainers_map_erase_s_b", (DL_FUNC) &_cppcontainers_map_erase_s_b, 2},
    {"_cppcontainers_map_erase_b_i", (DL_FUNC) &_cppcontainers_map_erase_b_i, 2},
    {"_cppcontainers_map_erase_b_d", (DL_FUNC) &_cppcontainers_map_erase_b_d, 2},
    {"_cppcontainers_map_erase_b_s", (DL_FUNC) &_cppcontainers_map_erase_b_s, 2},
    {"_cppcontainers_map_erase_b_b", (DL_FUNC) &_cppcontainers_map_erase_b_b, 2},
    {"_cppcontainers_unordered_map_erase_i_i", (DL_FUNC) &_cppcontainers_unordered_map_erase_i_i, 2},
    {"_cppcontainers_unordered_map_erase_i_d", (DL_FUNC) &_cppcontainers_unordered_map_erase_i_d, 2},
    {"_cppcontainers_unordered_map_erase_i_s", (DL_FUNC) &_cppcontainers_unordered_map_erase_i_s, 2},
    {"_cppcontainers_unordered_map_erase_i_b", (DL_FUNC) &_cppcontainers_unordered_map_erase_i_b, 2},
    {"_cppcontainers_unordered_map_erase_d_i", (DL_FUNC) &_cppcontainers_unordered_map_erase_d_i, 2},
    {"_cppcontainers_unordered_map_erase_d_d", (DL_FUNC) &_cppcontainers_unordered_map_erase_d_d, 2},
    {"_cppcontainers_unordered_map_erase_d_s", (DL_FUNC) &_cppcontainers_unordered_map_erase_d_s, 2},
    {"_cppcontainers_unordered_map_erase_d_b", (DL_FUNC) &_cppcontainers_unordered_map_erase_d_b, 2},
    {"_cppcontainers_unordered_map_erase_s_i", (DL_FUNC) &_cppcontainers_unordered_map_erase_s_i, 2},
    {"_cppcontainers_unordered_map_erase_s_d", (DL_FUNC) &_cppcontainers_unordered_map_erase_s_d, 2},
    {"_cppcontainers_unordered_map_erase_s_s", (DL_FUNC) &_cppcontainers_unordered_map_erase_s_s, 2},
    {"_cppcontainers_unordered_map_erase_s_b", (DL_FUNC) &_cppcontainers_unordered_map_erase_s_b, 2},
    {"_cppcontainers_unordered_map_erase_b_i", (DL_FUNC) &_cppcontainers_unordered_map_erase_b_i, 2},
    {"_cppcontainers_unordered_map_erase_b_d", (DL_FUNC) &_cppcontainers_unordered_map_erase_b_d, 2},
    {"_cppcontainers_unordered_map_erase_b_s", (DL_FUNC) &_cppcontainers_unordered_map_erase_b_s, 2},
    {"_cppcontainers_unordered_map_erase_b_b", (DL_FUNC) &_cppcontainers_unordered_map_erase_b_b, 2},
    {"_cppcontainers_multimap_erase_i_i", (DL_FUNC) &_cppcontainers_multimap_erase_i_i, 2},
    {"_cppcontainers_multimap_erase_i_d", (DL_FUNC) &_cppcontainers_multimap_erase_i_d, 2},
    {"_cppcontainers_multimap_erase_i_s", (DL_FUNC) &_cppcontainers_multimap_erase_i_s, 2},
    {"_cppcontainers_multimap_erase_i_b", (DL_FUNC) &_cppcontainers_multimap_erase_i_b, 2},
    {"_cppcontainers_multimap_erase_d_i", (DL_FUNC) &_cppcontainers_multimap_erase_d_i, 2},
    {"_cppcontainers_multimap_erase_d_d", (DL_FUNC) &_cppcontainers_multimap_erase_d_d, 2},
    {"_cppcontainers_multimap_erase_d_s", (DL_FUNC) &_cppcontainers_multimap_erase_d_s, 2},
    {"_cppcontainers_multimap_erase_d_b", (DL_FUNC) &_cppcontainers_multimap_erase_d_b, 2},
    {"_cppcontainers_multimap_erase_s_i", (DL_FUNC) &_cppcontainers_multimap_erase_s_i, 2},
    {"_cppcontainers_multimap_erase_s_d", (DL_FUNC) &_cppcontainers_multimap_erase_s_d, 2},
    {"_cppcontainers_multimap_erase_s_s", (DL_FUNC) &_cppcontainers_multimap_erase_s_s, 2},
    {"_cppcontainers_multimap_erase_s_b", (DL_FUNC) &_cppcontainers_multimap_erase_s_b, 2},
    {"_cppcontainers_multimap_erase_b_i", (DL_FUNC) &_cppcontainers_multimap_erase_b_i, 2},
    {"_cppcontainers_multimap_erase_b_d", (DL_FUNC) &_cppcontainers_multimap_erase_b_d, 2},
    {"_cppcontainers_multimap_erase_b_s", (DL_FUNC) &_cppcontainers_multimap_erase_b_s, 2},
    {"_cppcontainers_multimap_erase_b_b", (DL_FUNC) &_cppcontainers_multimap_erase_b_b, 2},
    {"_cppcontainers_unordered_multimap_erase_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_i_i, 2},
    {"_cppcontainers_unordered_multimap_erase_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_i_d, 2},
    {"_cppcontainers_unordered_multimap_erase_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_i_s, 2},
    {"_cppcontainers_unordered_multimap_erase_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_i_b, 2},
    {"_cppcontainers_unordered_multimap_erase_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_d_i, 2},
    {"_cppcontainers_unordered_multimap_erase_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_d_d, 2},
    {"_cppcontainers_unordered_multimap_erase_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_d_s, 2},
    {"_cppcontainers_unordered_multimap_erase_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_d_b, 2},
    {"_cppcontainers_unordered_multimap_erase_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_s_i, 2},
    {"_cppcontainers_unordered_multimap_erase_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_s_d, 2},
    {"_cppcontainers_unordered_multimap_erase_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_s_s, 2},
    {"_cppcontainers_unordered_multimap_erase_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_s_b, 2},
    {"_cppcontainers_unordered_multimap_erase_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_b_i, 2},
    {"_cppcontainers_unordered_multimap_erase_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_b_d, 2},
    {"_cppcontainers_unordered_multimap_erase_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_b_s, 2},
    {"_cppcontainers_unordered_multimap_erase_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_erase_b_b, 2},
    {"_cppcontainers_vector_erase_i", (DL_FUNC) &_cppcontainers_vector_erase_i, 3},
    {"_cppcontainers_vector_erase_d", (DL_FUNC) &_cppcontainers_vector_erase_d, 3},
    {"_cppcontainers_vector_erase_s", (DL_FUNC) &_cppcontainers_vector_erase_s, 3},
    {"_cppcontainers_vector_erase_b", (DL_FUNC) &_cppcontainers_vector_erase_b, 3},
    {"_cppcontainers_deque_erase_i", (DL_FUNC) &_cppcontainers_deque_erase_i, 3},
    {"_cppcontainers_deque_erase_d", (DL_FUNC) &_cppcontainers_deque_erase_d, 3},
    {"_cppcontainers_deque_erase_s", (DL_FUNC) &_cppcontainers_deque_erase_s, 3},
    {"_cppcontainers_deque_erase_b", (DL_FUNC) &_cppcontainers_deque_erase_b, 3},
    {"_cppcontainers_list_erase_i", (DL_FUNC) &_cppcontainers_list_erase_i, 3},
    {"_cppcontainers_list_erase_d", (DL_FUNC) &_cppcontainers_list_erase_d, 3},
    {"_cppcontainers_list_erase_s", (DL_FUNC) &_cppcontainers_list_erase_s, 3},
    {"_cppcontainers_list_erase_b", (DL_FUNC) &_cppcontainers_list_erase_b, 3},
    {"_cppcontainers_forward_list_erase_after_i", (DL_FUNC) &_cppcontainers_forward_list_erase_after_i, 3},
    {"_cppcontainers_forward_list_erase_after_d", (DL_FUNC) &_cppcontainers_forward_list_erase_after_d, 3},
    {"_cppcontainers_forward_list_erase_after_s", (DL_FUNC) &_cppcontainers_forward_list_erase_after_s, 3},
    {"_cppcontainers_forward_list_erase_after_b", (DL_FUNC) &_cppcontainers_forward_list_erase_after_b, 3},
    {"_cppcontainers_vector_flip_b", (DL_FUNC) &_cppcontainers_vector_flip_b, 1},
    {"_cppcontainers_forward_list_i", (DL_FUNC) &_cppcontainers_forward_list_i, 1},
    {"_cppcontainers_forward_list_d", (DL_FUNC) &_cppcontainers_forward_list_d, 1},
    {"_cppcontainers_forward_list_s", (DL_FUNC) &_cppcontainers_forward_list_s, 1},
    {"_cppcontainers_forward_list_b", (DL_FUNC) &_cppcontainers_forward_list_b, 1},
    {"_cppcontainers_queue_front_i", (DL_FUNC) &_cppcontainers_queue_front_i, 1},
    {"_cppcontainers_queue_front_d", (DL_FUNC) &_cppcontainers_queue_front_d, 1},
    {"_cppcontainers_queue_front_s", (DL_FUNC) &_cppcontainers_queue_front_s, 1},
    {"_cppcontainers_queue_front_b", (DL_FUNC) &_cppcontainers_queue_front_b, 1},
    {"_cppcontainers_vector_front_i", (DL_FUNC) &_cppcontainers_vector_front_i, 1},
    {"_cppcontainers_vector_front_d", (DL_FUNC) &_cppcontainers_vector_front_d, 1},
    {"_cppcontainers_vector_front_s", (DL_FUNC) &_cppcontainers_vector_front_s, 1},
    {"_cppcontainers_vector_front_b", (DL_FUNC) &_cppcontainers_vector_front_b, 1},
    {"_cppcontainers_deque_front_i", (DL_FUNC) &_cppcontainers_deque_front_i, 1},
    {"_cppcontainers_deque_front_d", (DL_FUNC) &_cppcontainers_deque_front_d, 1},
    {"_cppcontainers_deque_front_s", (DL_FUNC) &_cppcontainers_deque_front_s, 1},
    {"_cppcontainers_deque_front_b", (DL_FUNC) &_cppcontainers_deque_front_b, 1},
    {"_cppcontainers_forward_list_front_i", (DL_FUNC) &_cppcontainers_forward_list_front_i, 1},
    {"_cppcontainers_forward_list_front_d", (DL_FUNC) &_cppcontainers_forward_list_front_d, 1},
    {"_cppcontainers_forward_list_front_s", (DL_FUNC) &_cppcontainers_forward_list_front_s, 1},
    {"_cppcontainers_forward_list_front_b", (DL_FUNC) &_cppcontainers_forward_list_front_b, 1},
    {"_cppcontainers_list_front_i", (DL_FUNC) &_cppcontainers_list_front_i, 1},
    {"_cppcontainers_list_front_d", (DL_FUNC) &_cppcontainers_list_front_d, 1},
    {"_cppcontainers_list_front_s", (DL_FUNC) &_cppcontainers_list_front_s, 1},
    {"_cppcontainers_list_front_b", (DL_FUNC) &_cppcontainers_list_front_b, 1},
    {"_cppcontainers_set_insert_i", (DL_FUNC) &_cppcontainers_set_insert_i, 2},
    {"_cppcontainers_set_insert_d", (DL_FUNC) &_cppcontainers_set_insert_d, 2},
    {"_cppcontainers_set_insert_s", (DL_FUNC) &_cppcontainers_set_insert_s, 2},
    {"_cppcontainers_set_insert_b", (DL_FUNC) &_cppcontainers_set_insert_b, 2},
    {"_cppcontainers_unordered_set_insert_i", (DL_FUNC) &_cppcontainers_unordered_set_insert_i, 2},
    {"_cppcontainers_unordered_set_insert_d", (DL_FUNC) &_cppcontainers_unordered_set_insert_d, 2},
    {"_cppcontainers_unordered_set_insert_s", (DL_FUNC) &_cppcontainers_unordered_set_insert_s, 2},
    {"_cppcontainers_unordered_set_insert_b", (DL_FUNC) &_cppcontainers_unordered_set_insert_b, 2},
    {"_cppcontainers_multiset_insert_i", (DL_FUNC) &_cppcontainers_multiset_insert_i, 2},
    {"_cppcontainers_multiset_insert_d", (DL_FUNC) &_cppcontainers_multiset_insert_d, 2},
    {"_cppcontainers_multiset_insert_s", (DL_FUNC) &_cppcontainers_multiset_insert_s, 2},
    {"_cppcontainers_multiset_insert_b", (DL_FUNC) &_cppcontainers_multiset_insert_b, 2},
    {"_cppcontainers_unordered_multiset_insert_i", (DL_FUNC) &_cppcontainers_unordered_multiset_insert_i, 2},
    {"_cppcontainers_unordered_multiset_insert_d", (DL_FUNC) &_cppcontainers_unordered_multiset_insert_d, 2},
    {"_cppcontainers_unordered_multiset_insert_s", (DL_FUNC) &_cppcontainers_unordered_multiset_insert_s, 2},
    {"_cppcontainers_unordered_multiset_insert_b", (DL_FUNC) &_cppcontainers_unordered_multiset_insert_b, 2},
    {"_cppcontainers_map_insert_i_i", (DL_FUNC) &_cppcontainers_map_insert_i_i, 3},
    {"_cppcontainers_map_insert_i_d", (DL_FUNC) &_cppcontainers_map_insert_i_d, 3},
    {"_cppcontainers_map_insert_i_s", (DL_FUNC) &_cppcontainers_map_insert_i_s, 3},
    {"_cppcontainers_map_insert_i_b", (DL_FUNC) &_cppcontainers_map_insert_i_b, 3},
    {"_cppcontainers_map_insert_d_i", (DL_FUNC) &_cppcontainers_map_insert_d_i, 3},
    {"_cppcontainers_map_insert_d_d", (DL_FUNC) &_cppcontainers_map_insert_d_d, 3},
    {"_cppcontainers_map_insert_d_s", (DL_FUNC) &_cppcontainers_map_insert_d_s, 3},
    {"_cppcontainers_map_insert_d_b", (DL_FUNC) &_cppcontainers_map_insert_d_b, 3},
    {"_cppcontainers_map_insert_s_i", (DL_FUNC) &_cppcontainers_map_insert_s_i, 3},
    {"_cppcontainers_map_insert_s_d", (DL_FUNC) &_cppcontainers_map_insert_s_d, 3},
    {"_cppcontainers_map_insert_s_s", (DL_FUNC) &_cppcontainers_map_insert_s_s, 3},
    {"_cppcontainers_map_insert_s_b", (DL_FUNC) &_cppcontainers_map_insert_s_b, 3},
    {"_cppcontainers_map_insert_b_i", (DL_FUNC) &_cppcontainers_map_insert_b_i, 3},
    {"_cppcontainers_map_insert_b_d", (DL_FUNC) &_cppcontainers_map_insert_b_d, 3},
    {"_cppcontainers_map_insert_b_s", (DL_FUNC) &_cppcontainers_map_insert_b_s, 3},
    {"_cppcontainers_map_insert_b_b", (DL_FUNC) &_cppcontainers_map_insert_b_b, 3},
    {"_cppcontainers_unordered_map_insert_i_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_i_i, 3},
    {"_cppcontainers_unordered_map_insert_i_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_i_d, 3},
    {"_cppcontainers_unordered_map_insert_i_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_i_s, 3},
    {"_cppcontainers_unordered_map_insert_i_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_i_b, 3},
    {"_cppcontainers_unordered_map_insert_d_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_d_i, 3},
    {"_cppcontainers_unordered_map_insert_d_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_d_d, 3},
    {"_cppcontainers_unordered_map_insert_d_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_d_s, 3},
    {"_cppcontainers_unordered_map_insert_d_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_d_b, 3},
    {"_cppcontainers_unordered_map_insert_s_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_s_i, 3},
    {"_cppcontainers_unordered_map_insert_s_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_s_d, 3},
    {"_cppcontainers_unordered_map_insert_s_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_s_s, 3},
    {"_cppcontainers_unordered_map_insert_s_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_s_b, 3},
    {"_cppcontainers_unordered_map_insert_b_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_b_i, 3},
    {"_cppcontainers_unordered_map_insert_b_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_b_d, 3},
    {"_cppcontainers_unordered_map_insert_b_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_b_s, 3},
    {"_cppcontainers_unordered_map_insert_b_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_b_b, 3},
    {"_cppcontainers_multimap_insert_i_i", (DL_FUNC) &_cppcontainers_multimap_insert_i_i, 3},
    {"_cppcontainers_multimap_insert_i_d", (DL_FUNC) &_cppcontainers_multimap_insert_i_d, 3},
    {"_cppcontainers_multimap_insert_i_s", (DL_FUNC) &_cppcontainers_multimap_insert_i_s, 3},
    {"_cppcontainers_multimap_insert_i_b", (DL_FUNC) &_cppcontainers_multimap_insert_i_b, 3},
    {"_cppcontainers_multimap_insert_d_i", (DL_FUNC) &_cppcontainers_multimap_insert_d_i, 3},
    {"_cppcontainers_multimap_insert_d_d", (DL_FUNC) &_cppcontainers_multimap_insert_d_d, 3},
    {"_cppcontainers_multimap_insert_d_s", (DL_FUNC) &_cppcontainers_multimap_insert_d_s, 3},
    {"_cppcontainers_multimap_insert_d_b", (DL_FUNC) &_cppcontainers_multimap_insert_d_b, 3},
    {"_cppcontainers_multimap_insert_s_i", (DL_FUNC) &_cppcontainers_multimap_insert_s_i, 3},
    {"_cppcontainers_multimap_insert_s_d", (DL_FUNC) &_cppcontainers_multimap_insert_s_d, 3},
    {"_cppcontainers_multimap_insert_s_s", (DL_FUNC) &_cppcontainers_multimap_insert_s_s, 3},
    {"_cppcontainers_multimap_insert_s_b", (DL_FUNC) &_cppcontainers_multimap_insert_s_b, 3},
    {"_cppcontainers_multimap_insert_b_i", (DL_FUNC) &_cppcontainers_multimap_insert_b_i, 3},
    {"_cppcontainers_multimap_insert_b_d", (DL_FUNC) &_cppcontainers_multimap_insert_b_d, 3},
    {"_cppcontainers_multimap_insert_b_s", (DL_FUNC) &_cppcontainers_multimap_insert_b_s, 3},
    {"_cppcontainers_multimap_insert_b_b", (DL_FUNC) &_cppcontainers_multimap_insert_b_b, 3},
    {"_cppcontainers_unordered_multimap_insert_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_i_i, 3},
    {"_cppcontainers_unordered_multimap_insert_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_i_d, 3},
    {"_cppcontainers_unordered_multimap_insert_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_i_s, 3},
    {"_cppcontainers_unordered_multimap_insert_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_i_b, 3},
    {"_cppcontainers_unordered_multimap_insert_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_d_i, 3},
    {"_cppcontainers_unordered_multimap_insert_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_d_d, 3},
    {"_cppcontainers_unordered_multimap_insert_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_d_s, 3},
    {"_cppcontainers_unordered_multimap_insert_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_d_b, 3},
    {"_cppcontainers_unordered_multimap_insert_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_s_i, 3},
    {"_cppcontainers_unordered_multimap_insert_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_s_d, 3},
    {"_cppcontainers_unordered_multimap_insert_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_s_s, 3},
    {"_cppcontainers_unordered_multimap_insert_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_s_b, 3},
    {"_cppcontainers_unordered_multimap_insert_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_b_i, 3},
    {"_cppcontainers_unordered_multimap_insert_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_b_d, 3},
    {"_cppcontainers_unordered_multimap_insert_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_b_s, 3},
    {"_cppcontainers_unordered_multimap_insert_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_insert_b_b, 3},
    {"_cppcontainers_vector_insert_i", (DL_FUNC) &_cppcontainers_vector_insert_i, 3},
    {"_cppcontainers_vector_insert_d", (DL_FUNC) &_cppcontainers_vector_insert_d, 3},
    {"_cppcontainers_vector_insert_s", (DL_FUNC) &_cppcontainers_vector_insert_s, 3},
    {"_cppcontainers_vector_insert_b", (DL_FUNC) &_cppcontainers_vector_insert_b, 3},
    {"_cppcontainers_deque_insert_i", (DL_FUNC) &_cppcontainers_deque_insert_i, 3},
    {"_cppcontainers_deque_insert_d", (DL_FUNC) &_cppcontainers_deque_insert_d, 3},
    {"_cppcontainers_deque_insert_s", (DL_FUNC) &_cppcontainers_deque_insert_s, 3},
    {"_cppcontainers_deque_insert_b", (DL_FUNC) &_cppcontainers_deque_insert_b, 3},
    {"_cppcontainers_list_insert_i", (DL_FUNC) &_cppcontainers_list_insert_i, 3},
    {"_cppcontainers_list_insert_d", (DL_FUNC) &_cppcontainers_list_insert_d, 3},
    {"_cppcontainers_list_insert_s", (DL_FUNC) &_cppcontainers_list_insert_s, 3},
    {"_cppcontainers_list_insert_b", (DL_FUNC) &_cppcontainers_list_insert_b, 3},
    {"_cppcontainers_forward_list_insert_after_i", (DL_FUNC) &_cppcontainers_forward_list_insert_after_i, 3},
    {"_cppcontainers_forward_list_insert_after_d", (DL_FUNC) &_cppcontainers_forward_list_insert_after_d, 3},
    {"_cppcontainers_forward_list_insert_after_s", (DL_FUNC) &_cppcontainers_forward_list_insert_after_s, 3},
    {"_cppcontainers_forward_list_insert_after_b", (DL_FUNC) &_cppcontainers_forward_list_insert_after_b, 3},
    {"_cppcontainers_map_insert_or_assign_i_i", (DL_FUNC) &_cppcontainers_map_insert_or_assign_i_i, 3},
    {"_cppcontainers_map_insert_or_assign_i_d", (DL_FUNC) &_cppcontainers_map_insert_or_assign_i_d, 3},
    {"_cppcontainers_map_insert_or_assign_i_s", (DL_FUNC) &_cppcontainers_map_insert_or_assign_i_s, 3},
    {"_cppcontainers_map_insert_or_assign_i_b", (DL_FUNC) &_cppcontainers_map_insert_or_assign_i_b, 3},
    {"_cppcontainers_map_insert_or_assign_d_i", (DL_FUNC) &_cppcontainers_map_insert_or_assign_d_i, 3},
    {"_cppcontainers_map_insert_or_assign_d_d", (DL_FUNC) &_cppcontainers_map_insert_or_assign_d_d, 3},
    {"_cppcontainers_map_insert_or_assign_d_s", (DL_FUNC) &_cppcontainers_map_insert_or_assign_d_s, 3},
    {"_cppcontainers_map_insert_or_assign_d_b", (DL_FUNC) &_cppcontainers_map_insert_or_assign_d_b, 3},
    {"_cppcontainers_map_insert_or_assign_s_i", (DL_FUNC) &_cppcontainers_map_insert_or_assign_s_i, 3},
    {"_cppcontainers_map_insert_or_assign_s_d", (DL_FUNC) &_cppcontainers_map_insert_or_assign_s_d, 3},
    {"_cppcontainers_map_insert_or_assign_s_s", (DL_FUNC) &_cppcontainers_map_insert_or_assign_s_s, 3},
    {"_cppcontainers_map_insert_or_assign_s_b", (DL_FUNC) &_cppcontainers_map_insert_or_assign_s_b, 3},
    {"_cppcontainers_map_insert_or_assign_b_i", (DL_FUNC) &_cppcontainers_map_insert_or_assign_b_i, 3},
    {"_cppcontainers_map_insert_or_assign_b_d", (DL_FUNC) &_cppcontainers_map_insert_or_assign_b_d, 3},
    {"_cppcontainers_map_insert_or_assign_b_s", (DL_FUNC) &_cppcontainers_map_insert_or_assign_b_s, 3},
    {"_cppcontainers_map_insert_or_assign_b_b", (DL_FUNC) &_cppcontainers_map_insert_or_assign_b_b, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_i_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_i_i, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_i_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_i_d, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_i_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_i_s, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_i_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_i_b, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_d_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_d_i, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_d_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_d_d, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_d_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_d_s, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_d_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_d_b, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_s_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_s_i, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_s_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_s_d, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_s_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_s_s, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_s_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_s_b, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_b_i", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_b_i, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_b_d", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_b_d, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_b_s", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_b_s, 3},
    {"_cppcontainers_unordered_map_insert_or_assign_b_b", (DL_FUNC) &_cppcontainers_unordered_map_insert_or_assign_b_b, 3},
    {"_cppcontainers_list_i", (DL_FUNC) &_cppcontainers_list_i, 1},
    {"_cppcontainers_list_d", (DL_FUNC) &_cppcontainers_list_d, 1},
    {"_cppcontainers_list_s", (DL_FUNC) &_cppcontainers_list_s, 1},
    {"_cppcontainers_list_b", (DL_FUNC) &_cppcontainers_list_b, 1},
    {"_cppcontainers_unordered_set_load_factor_i", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_i, 1},
    {"_cppcontainers_unordered_set_load_factor_d", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_d, 1},
    {"_cppcontainers_unordered_set_load_factor_s", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_s, 1},
    {"_cppcontainers_unordered_set_load_factor_b", (DL_FUNC) &_cppcontainers_unordered_set_load_factor_b, 1},
    {"_cppcontainers_unordered_multiset_load_factor_i", (DL_FUNC) &_cppcontainers_unordered_multiset_load_factor_i, 1},
    {"_cppcontainers_unordered_multiset_load_factor_d", (DL_FUNC) &_cppcontainers_unordered_multiset_load_factor_d, 1},
    {"_cppcontainers_unordered_multiset_load_factor_s", (DL_FUNC) &_cppcontainers_unordered_multiset_load_factor_s, 1},
    {"_cppcontainers_unordered_multiset_load_factor_b", (DL_FUNC) &_cppcontainers_unordered_multiset_load_factor_b, 1},
    {"_cppcontainers_unordered_map_load_factor_i_i", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_i_i, 1},
    {"_cppcontainers_unordered_map_load_factor_i_d", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_i_d, 1},
    {"_cppcontainers_unordered_map_load_factor_i_s", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_i_s, 1},
    {"_cppcontainers_unordered_map_load_factor_i_b", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_i_b, 1},
    {"_cppcontainers_unordered_map_load_factor_d_i", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_d_i, 1},
    {"_cppcontainers_unordered_map_load_factor_d_d", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_d_d, 1},
    {"_cppcontainers_unordered_map_load_factor_d_s", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_d_s, 1},
    {"_cppcontainers_unordered_map_load_factor_d_b", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_d_b, 1},
    {"_cppcontainers_unordered_map_load_factor_s_i", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_s_i, 1},
    {"_cppcontainers_unordered_map_load_factor_s_d", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_s_d, 1},
    {"_cppcontainers_unordered_map_load_factor_s_s", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_s_s, 1},
    {"_cppcontainers_unordered_map_load_factor_s_b", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_s_b, 1},
    {"_cppcontainers_unordered_map_load_factor_b_i", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_b_i, 1},
    {"_cppcontainers_unordered_map_load_factor_b_d", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_b_d, 1},
    {"_cppcontainers_unordered_map_load_factor_b_s", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_b_s, 1},
    {"_cppcontainers_unordered_map_load_factor_b_b", (DL_FUNC) &_cppcontainers_unordered_map_load_factor_b_b, 1},
    {"_cppcontainers_unordered_multimap_load_factor_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_i_i, 1},
    {"_cppcontainers_unordered_multimap_load_factor_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_i_d, 1},
    {"_cppcontainers_unordered_multimap_load_factor_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_i_s, 1},
    {"_cppcontainers_unordered_multimap_load_factor_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_i_b, 1},
    {"_cppcontainers_unordered_multimap_load_factor_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_d_i, 1},
    {"_cppcontainers_unordered_multimap_load_factor_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_d_d, 1},
    {"_cppcontainers_unordered_multimap_load_factor_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_d_s, 1},
    {"_cppcontainers_unordered_multimap_load_factor_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_d_b, 1},
    {"_cppcontainers_unordered_multimap_load_factor_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_s_i, 1},
    {"_cppcontainers_unordered_multimap_load_factor_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_s_d, 1},
    {"_cppcontainers_unordered_multimap_load_factor_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_s_s, 1},
    {"_cppcontainers_unordered_multimap_load_factor_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_s_b, 1},
    {"_cppcontainers_unordered_multimap_load_factor_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_b_i, 1},
    {"_cppcontainers_unordered_multimap_load_factor_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_b_d, 1},
    {"_cppcontainers_unordered_multimap_load_factor_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_b_s, 1},
    {"_cppcontainers_unordered_multimap_load_factor_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_load_factor_b_b, 1},
    {"_cppcontainers_map_i_i", (DL_FUNC) &_cppcontainers_map_i_i, 2},
    {"_cppcontainers_map_i_d", (DL_FUNC) &_cppcontainers_map_i_d, 2},
    {"_cppcontainers_map_i_s", (DL_FUNC) &_cppcontainers_map_i_s, 2},
    {"_cppcontainers_map_i_b", (DL_FUNC) &_cppcontainers_map_i_b, 2},
    {"_cppcontainers_map_d_i", (DL_FUNC) &_cppcontainers_map_d_i, 2},
    {"_cppcontainers_map_d_d", (DL_FUNC) &_cppcontainers_map_d_d, 2},
    {"_cppcontainers_map_d_s", (DL_FUNC) &_cppcontainers_map_d_s, 2},
    {"_cppcontainers_map_d_b", (DL_FUNC) &_cppcontainers_map_d_b, 2},
    {"_cppcontainers_map_s_i", (DL_FUNC) &_cppcontainers_map_s_i, 2},
    {"_cppcontainers_map_s_d", (DL_FUNC) &_cppcontainers_map_s_d, 2},
    {"_cppcontainers_map_s_s", (DL_FUNC) &_cppcontainers_map_s_s, 2},
    {"_cppcontainers_map_s_b", (DL_FUNC) &_cppcontainers_map_s_b, 2},
    {"_cppcontainers_map_b_i", (DL_FUNC) &_cppcontainers_map_b_i, 2},
    {"_cppcontainers_map_b_d", (DL_FUNC) &_cppcontainers_map_b_d, 2},
    {"_cppcontainers_map_b_s", (DL_FUNC) &_cppcontainers_map_b_s, 2},
    {"_cppcontainers_map_b_b", (DL_FUNC) &_cppcontainers_map_b_b, 2},
    {"_cppcontainers_unordered_set_max_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_i, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_d, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_s, 1},
    {"_cppcontainers_unordered_set_max_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_set_max_bucket_count_b, 1},
    {"_cppcontainers_unordered_multiset_max_bucket_count_i", (DL_FUNC) &_cppcontainers_unordered_multiset_max_bucket_count_i, 1},
    {"_cppcontainers_unordered_multiset_max_bucket_count_d", (DL_FUNC) &_cppcontainers_unordered_multiset_max_bucket_count_d, 1},
    {"_cppcontainers_unordered_multiset_max_bucket_count_s", (DL_FUNC) &_cppcontainers_unordered_multiset_max_bucket_count_s, 1},
    {"_cppcontainers_unordered_multiset_max_bucket_count_b", (DL_FUNC) &_cppcontainers_unordered_multiset_max_bucket_count_b, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_i_i", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_i_i, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_i_d", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_i_d, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_i_s", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_i_s, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_i_b", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_i_b, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_d_i", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_d_i, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_d_d", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_d_d, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_d_s", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_d_s, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_d_b", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_d_b, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_s_i", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_s_i, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_s_d", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_s_d, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_s_s", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_s_s, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_s_b", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_s_b, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_b_i", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_b_i, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_b_d", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_b_d, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_b_s", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_b_s, 1},
    {"_cppcontainers_unordered_map_max_bucket_count_b_b", (DL_FUNC) &_cppcontainers_unordered_map_max_bucket_count_b_b, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_i_i, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_i_d, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_i_s, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_i_b, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_d_i, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_d_d, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_d_s, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_d_b, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_s_i, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_s_d, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_s_s, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_s_b, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_b_i, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_b_d, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_b_s, 1},
    {"_cppcontainers_unordered_multimap_max_bucket_count_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_bucket_count_b_b, 1},
    {"_cppcontainers_unordered_set_max_load_factor_i_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_i_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_d_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_d_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_s_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_s_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_b_get", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_b_get, 1},
    {"_cppcontainers_unordered_set_max_load_factor_i_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_i_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_d_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_d_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_s_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_s_set, 2},
    {"_cppcontainers_unordered_set_max_load_factor_b_set", (DL_FUNC) &_cppcontainers_unordered_set_max_load_factor_b_set, 2},
    {"_cppcontainers_unordered_multiset_max_load_factor_i_get", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_i_get, 1},
    {"_cppcontainers_unordered_multiset_max_load_factor_d_get", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_d_get, 1},
    {"_cppcontainers_unordered_multiset_max_load_factor_s_get", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_s_get, 1},
    {"_cppcontainers_unordered_multiset_max_load_factor_b_get", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_b_get, 1},
    {"_cppcontainers_unordered_multiset_max_load_factor_i_set", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_i_set, 2},
    {"_cppcontainers_unordered_multiset_max_load_factor_d_set", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_d_set, 2},
    {"_cppcontainers_unordered_multiset_max_load_factor_s_set", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_s_set, 2},
    {"_cppcontainers_unordered_multiset_max_load_factor_b_set", (DL_FUNC) &_cppcontainers_unordered_multiset_max_load_factor_b_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_i_i_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_i_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_i_d_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_d_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_i_s_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_s_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_i_b_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_b_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_d_i_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_i_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_d_d_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_d_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_d_s_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_s_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_d_b_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_b_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_s_i_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_i_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_s_d_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_d_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_s_s_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_s_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_s_b_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_b_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_b_i_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_i_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_b_d_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_d_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_b_s_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_s_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_b_b_get", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_b_get, 1},
    {"_cppcontainers_unordered_map_max_load_factor_i_i_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_i_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_i_d_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_d_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_i_s_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_s_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_i_b_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_i_b_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_d_i_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_i_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_d_d_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_d_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_d_s_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_s_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_d_b_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_d_b_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_s_i_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_i_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_s_d_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_d_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_s_s_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_s_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_s_b_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_s_b_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_b_i_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_i_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_b_d_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_d_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_b_s_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_s_set, 2},
    {"_cppcontainers_unordered_map_max_load_factor_b_b_set", (DL_FUNC) &_cppcontainers_unordered_map_max_load_factor_b_b_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_i_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_i_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_d_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_d_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_s_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_s_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_b_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_b_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_i_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_i_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_d_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_d_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_s_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_s_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_b_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_b_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_i_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_i_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_d_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_d_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_s_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_s_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_b_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_b_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_i_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_i_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_d_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_d_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_s_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_s_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_b_get", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_b_get, 1},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_i_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_i_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_d_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_d_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_s_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_s_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_i_b_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_i_b_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_i_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_i_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_d_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_d_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_s_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_s_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_d_b_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_d_b_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_i_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_i_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_d_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_d_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_s_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_s_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_s_b_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_s_b_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_i_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_i_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_d_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_d_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_s_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_s_set, 2},
    {"_cppcontainers_unordered_multimap_max_load_factor_b_b_set", (DL_FUNC) &_cppcontainers_unordered_multimap_max_load_factor_b_b_set, 2},
    {"_cppcontainers_set_max_size_i", (DL_FUNC) &_cppcontainers_set_max_size_i, 1},
    {"_cppcontainers_set_max_size_d", (DL_FUNC) &_cppcontainers_set_max_size_d, 1},
    {"_cppcontainers_set_max_size_s", (DL_FUNC) &_cppcontainers_set_max_size_s, 1},
    {"_cppcontainers_set_max_size_b", (DL_FUNC) &_cppcontainers_set_max_size_b, 1},
    {"_cppcontainers_unordered_set_max_size_i", (DL_FUNC) &_cppcontainers_unordered_set_max_size_i, 1},
    {"_cppcontainers_unordered_set_max_size_d", (DL_FUNC) &_cppcontainers_unordered_set_max_size_d, 1},
    {"_cppcontainers_unordered_set_max_size_s", (DL_FUNC) &_cppcontainers_unordered_set_max_size_s, 1},
    {"_cppcontainers_unordered_set_max_size_b", (DL_FUNC) &_cppcontainers_unordered_set_max_size_b, 1},
    {"_cppcontainers_multiset_max_size_i", (DL_FUNC) &_cppcontainers_multiset_max_size_i, 1},
    {"_cppcontainers_multiset_max_size_d", (DL_FUNC) &_cppcontainers_multiset_max_size_d, 1},
    {"_cppcontainers_multiset_max_size_s", (DL_FUNC) &_cppcontainers_multiset_max_size_s, 1},
    {"_cppcontainers_multiset_max_size_b", (DL_FUNC) &_cppcontainers_multiset_max_size_b, 1},
    {"_cppcontainers_unordered_multiset_max_size_i", (DL_FUNC) &_cppcontainers_unordered_multiset_max_size_i, 1},
    {"_cppcontainers_unordered_multiset_max_size_d", (DL_FUNC) &_cppcontainers_unordered_multiset_max_size_d, 1},
    {"_cppcontainers_unordered_multiset_max_size_s", (DL_FUNC) &_cppcontainers_unordered_multiset_max_size_s, 1},
    {"_cppcontainers_unordered_multiset_max_size_b", (DL_FUNC) &_cppcontainers_unordered_multiset_max_size_b, 1},
    {"_cppcontainers_map_max_size_i_i", (DL_FUNC) &_cppcontainers_map_max_size_i_i, 1},
    {"_cppcontainers_map_max_size_i_d", (DL_FUNC) &_cppcontainers_map_max_size_i_d, 1},
    {"_cppcontainers_map_max_size_i_s", (DL_FUNC) &_cppcontainers_map_max_size_i_s, 1},
    {"_cppcontainers_map_max_size_i_b", (DL_FUNC) &_cppcontainers_map_max_size_i_b, 1},
    {"_cppcontainers_map_max_size_d_i", (DL_FUNC) &_cppcontainers_map_max_size_d_i, 1},
    {"_cppcontainers_map_max_size_d_d", (DL_FUNC) &_cppcontainers_map_max_size_d_d, 1},
    {"_cppcontainers_map_max_size_d_s", (DL_FUNC) &_cppcontainers_map_max_size_d_s, 1},
    {"_cppcontainers_map_max_size_d_b", (DL_FUNC) &_cppcontainers_map_max_size_d_b, 1},
    {"_cppcontainers_map_max_size_s_i", (DL_FUNC) &_cppcontainers_map_max_size_s_i, 1},
    {"_cppcontainers_map_max_size_s_d", (DL_FUNC) &_cppcontainers_map_max_size_s_d, 1},
    {"_cppcontainers_map_max_size_s_s", (DL_FUNC) &_cppcontainers_map_max_size_s_s, 1},
    {"_cppcontainers_map_max_size_s_b", (DL_FUNC) &_cppcontainers_map_max_size_s_b, 1},
    {"_cppcontainers_map_max_size_b_i", (DL_FUNC) &_cppcontainers_map_max_size_b_i, 1},
    {"_cppcontainers_map_max_size_b_d", (DL_FUNC) &_cppcontainers_map_max_size_b_d, 1},
    {"_cppcontainers_map_max_size_b_s", (DL_FUNC) &_cppcontainers_map_max_size_b_s, 1},
    {"_cppcontainers_map_max_size_b_b", (DL_FUNC) &_cppcontainers_map_max_size_b_b, 1},
    {"_cppcontainers_unordered_map_max_size_i_i", (DL_FUNC) &_cppcontainers_unordered_map_max_size_i_i, 1},
    {"_cppcontainers_unordered_map_max_size_i_d", (DL_FUNC) &_cppcontainers_unordered_map_max_size_i_d, 1},
    {"_cppcontainers_unordered_map_max_size_i_s", (DL_FUNC) &_cppcontainers_unordered_map_max_size_i_s, 1},
    {"_cppcontainers_unordered_map_max_size_i_b", (DL_FUNC) &_cppcontainers_unordered_map_max_size_i_b, 1},
    {"_cppcontainers_unordered_map_max_size_d_i", (DL_FUNC) &_cppcontainers_unordered_map_max_size_d_i, 1},
    {"_cppcontainers_unordered_map_max_size_d_d", (DL_FUNC) &_cppcontainers_unordered_map_max_size_d_d, 1},
    {"_cppcontainers_unordered_map_max_size_d_s", (DL_FUNC) &_cppcontainers_unordered_map_max_size_d_s, 1},
    {"_cppcontainers_unordered_map_max_size_d_b", (DL_FUNC) &_cppcontainers_unordered_map_max_size_d_b, 1},
    {"_cppcontainers_unordered_map_max_size_s_i", (DL_FUNC) &_cppcontainers_unordered_map_max_size_s_i, 1},
    {"_cppcontainers_unordered_map_max_size_s_d", (DL_FUNC) &_cppcontainers_unordered_map_max_size_s_d, 1},
    {"_cppcontainers_unordered_map_max_size_s_s", (DL_FUNC) &_cppcontainers_unordered_map_max_size_s_s, 1},
    {"_cppcontainers_unordered_map_max_size_s_b", (DL_FUNC) &_cppcontainers_unordered_map_max_size_s_b, 1},
    {"_cppcontainers_unordered_map_max_size_b_i", (DL_FUNC) &_cppcontainers_unordered_map_max_size_b_i, 1},
    {"_cppcontainers_unordered_map_max_size_b_d", (DL_FUNC) &_cppcontainers_unordered_map_max_size_b_d, 1},
    {"_cppcontainers_unordered_map_max_size_b_s", (DL_FUNC) &_cppcontainers_unordered_map_max_size_b_s, 1},
    {"_cppcontainers_unordered_map_max_size_b_b", (DL_FUNC) &_cppcontainers_unordered_map_max_size_b_b, 1},
    {"_cppcontainers_multimap_max_size_i_i", (DL_FUNC) &_cppcontainers_multimap_max_size_i_i, 1},
    {"_cppcontainers_multimap_max_size_i_d", (DL_FUNC) &_cppcontainers_multimap_max_size_i_d, 1},
    {"_cppcontainers_multimap_max_size_i_s", (DL_FUNC) &_cppcontainers_multimap_max_size_i_s, 1},
    {"_cppcontainers_multimap_max_size_i_b", (DL_FUNC) &_cppcontainers_multimap_max_size_i_b, 1},
    {"_cppcontainers_multimap_max_size_d_i", (DL_FUNC) &_cppcontainers_multimap_max_size_d_i, 1},
    {"_cppcontainers_multimap_max_size_d_d", (DL_FUNC) &_cppcontainers_multimap_max_size_d_d, 1},
    {"_cppcontainers_multimap_max_size_d_s", (DL_FUNC) &_cppcontainers_multimap_max_size_d_s, 1},
    {"_cppcontainers_multimap_max_size_d_b", (DL_FUNC) &_cppcontainers_multimap_max_size_d_b, 1},
    {"_cppcontainers_multimap_max_size_s_i", (DL_FUNC) &_cppcontainers_multimap_max_size_s_i, 1},
    {"_cppcontainers_multimap_max_size_s_d", (DL_FUNC) &_cppcontainers_multimap_max_size_s_d, 1},
    {"_cppcontainers_multimap_max_size_s_s", (DL_FUNC) &_cppcontainers_multimap_max_size_s_s, 1},
    {"_cppcontainers_multimap_max_size_s_b", (DL_FUNC) &_cppcontainers_multimap_max_size_s_b, 1},
    {"_cppcontainers_multimap_max_size_b_i", (DL_FUNC) &_cppcontainers_multimap_max_size_b_i, 1},
    {"_cppcontainers_multimap_max_size_b_d", (DL_FUNC) &_cppcontainers_multimap_max_size_b_d, 1},
    {"_cppcontainers_multimap_max_size_b_s", (DL_FUNC) &_cppcontainers_multimap_max_size_b_s, 1},
    {"_cppcontainers_multimap_max_size_b_b", (DL_FUNC) &_cppcontainers_multimap_max_size_b_b, 1},
    {"_cppcontainers_unordered_multimap_max_size_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_i_i, 1},
    {"_cppcontainers_unordered_multimap_max_size_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_i_d, 1},
    {"_cppcontainers_unordered_multimap_max_size_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_i_s, 1},
    {"_cppcontainers_unordered_multimap_max_size_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_i_b, 1},
    {"_cppcontainers_unordered_multimap_max_size_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_d_i, 1},
    {"_cppcontainers_unordered_multimap_max_size_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_d_d, 1},
    {"_cppcontainers_unordered_multimap_max_size_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_d_s, 1},
    {"_cppcontainers_unordered_multimap_max_size_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_d_b, 1},
    {"_cppcontainers_unordered_multimap_max_size_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_s_i, 1},
    {"_cppcontainers_unordered_multimap_max_size_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_s_d, 1},
    {"_cppcontainers_unordered_multimap_max_size_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_s_s, 1},
    {"_cppcontainers_unordered_multimap_max_size_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_s_b, 1},
    {"_cppcontainers_unordered_multimap_max_size_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_b_i, 1},
    {"_cppcontainers_unordered_multimap_max_size_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_b_d, 1},
    {"_cppcontainers_unordered_multimap_max_size_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_b_s, 1},
    {"_cppcontainers_unordered_multimap_max_size_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_max_size_b_b, 1},
    {"_cppcontainers_vector_max_size_i", (DL_FUNC) &_cppcontainers_vector_max_size_i, 1},
    {"_cppcontainers_vector_max_size_d", (DL_FUNC) &_cppcontainers_vector_max_size_d, 1},
    {"_cppcontainers_vector_max_size_s", (DL_FUNC) &_cppcontainers_vector_max_size_s, 1},
    {"_cppcontainers_vector_max_size_b", (DL_FUNC) &_cppcontainers_vector_max_size_b, 1},
    {"_cppcontainers_deque_max_size_i", (DL_FUNC) &_cppcontainers_deque_max_size_i, 1},
    {"_cppcontainers_deque_max_size_d", (DL_FUNC) &_cppcontainers_deque_max_size_d, 1},
    {"_cppcontainers_deque_max_size_s", (DL_FUNC) &_cppcontainers_deque_max_size_s, 1},
    {"_cppcontainers_deque_max_size_b", (DL_FUNC) &_cppcontainers_deque_max_size_b, 1},
    {"_cppcontainers_forward_list_max_size_i", (DL_FUNC) &_cppcontainers_forward_list_max_size_i, 1},
    {"_cppcontainers_forward_list_max_size_d", (DL_FUNC) &_cppcontainers_forward_list_max_size_d, 1},
    {"_cppcontainers_forward_list_max_size_s", (DL_FUNC) &_cppcontainers_forward_list_max_size_s, 1},
    {"_cppcontainers_forward_list_max_size_b", (DL_FUNC) &_cppcontainers_forward_list_max_size_b, 1},
    {"_cppcontainers_list_max_size_i", (DL_FUNC) &_cppcontainers_list_max_size_i, 1},
    {"_cppcontainers_list_max_size_d", (DL_FUNC) &_cppcontainers_list_max_size_d, 1},
    {"_cppcontainers_list_max_size_s", (DL_FUNC) &_cppcontainers_list_max_size_s, 1},
    {"_cppcontainers_list_max_size_b", (DL_FUNC) &_cppcontainers_list_max_size_b, 1},
    {"_cppcontainers_set_merge_i", (DL_FUNC) &_cppcontainers_set_merge_i, 2},
    {"_cppcontainers_set_merge_d", (DL_FUNC) &_cppcontainers_set_merge_d, 2},
    {"_cppcontainers_set_merge_s", (DL_FUNC) &_cppcontainers_set_merge_s, 2},
    {"_cppcontainers_set_merge_b", (DL_FUNC) &_cppcontainers_set_merge_b, 2},
    {"_cppcontainers_unordered_set_merge_i", (DL_FUNC) &_cppcontainers_unordered_set_merge_i, 2},
    {"_cppcontainers_unordered_set_merge_d", (DL_FUNC) &_cppcontainers_unordered_set_merge_d, 2},
    {"_cppcontainers_unordered_set_merge_s", (DL_FUNC) &_cppcontainers_unordered_set_merge_s, 2},
    {"_cppcontainers_unordered_set_merge_b", (DL_FUNC) &_cppcontainers_unordered_set_merge_b, 2},
    {"_cppcontainers_multiset_merge_i", (DL_FUNC) &_cppcontainers_multiset_merge_i, 2},
    {"_cppcontainers_multiset_merge_d", (DL_FUNC) &_cppcontainers_multiset_merge_d, 2},
    {"_cppcontainers_multiset_merge_s", (DL_FUNC) &_cppcontainers_multiset_merge_s, 2},
    {"_cppcontainers_multiset_merge_b", (DL_FUNC) &_cppcontainers_multiset_merge_b, 2},
    {"_cppcontainers_unordered_multiset_merge_i", (DL_FUNC) &_cppcontainers_unordered_multiset_merge_i, 2},
    {"_cppcontainers_unordered_multiset_merge_d", (DL_FUNC) &_cppcontainers_unordered_multiset_merge_d, 2},
    {"_cppcontainers_unordered_multiset_merge_s", (DL_FUNC) &_cppcontainers_unordered_multiset_merge_s, 2},
    {"_cppcontainers_unordered_multiset_merge_b", (DL_FUNC) &_cppcontainers_unordered_multiset_merge_b, 2},
    {"_cppcontainers_map_merge_i_i", (DL_FUNC) &_cppcontainers_map_merge_i_i, 2},
    {"_cppcontainers_map_merge_i_d", (DL_FUNC) &_cppcontainers_map_merge_i_d, 2},
    {"_cppcontainers_map_merge_i_s", (DL_FUNC) &_cppcontainers_map_merge_i_s, 2},
    {"_cppcontainers_map_merge_i_b", (DL_FUNC) &_cppcontainers_map_merge_i_b, 2},
    {"_cppcontainers_map_merge_d_i", (DL_FUNC) &_cppcontainers_map_merge_d_i, 2},
    {"_cppcontainers_map_merge_d_d", (DL_FUNC) &_cppcontainers_map_merge_d_d, 2},
    {"_cppcontainers_map_merge_d_s", (DL_FUNC) &_cppcontainers_map_merge_d_s, 2},
    {"_cppcontainers_map_merge_d_b", (DL_FUNC) &_cppcontainers_map_merge_d_b, 2},
    {"_cppcontainers_map_merge_s_i", (DL_FUNC) &_cppcontainers_map_merge_s_i, 2},
    {"_cppcontainers_map_merge_s_d", (DL_FUNC) &_cppcontainers_map_merge_s_d, 2},
    {"_cppcontainers_map_merge_s_s", (DL_FUNC) &_cppcontainers_map_merge_s_s, 2},
    {"_cppcontainers_map_merge_s_b", (DL_FUNC) &_cppcontainers_map_merge_s_b, 2},
    {"_cppcontainers_map_merge_b_i", (DL_FUNC) &_cppcontainers_map_merge_b_i, 2},
    {"_cppcontainers_map_merge_b_d", (DL_FUNC) &_cppcontainers_map_merge_b_d, 2},
    {"_cppcontainers_map_merge_b_s", (DL_FUNC) &_cppcontainers_map_merge_b_s, 2},
    {"_cppcontainers_map_merge_b_b", (DL_FUNC) &_cppcontainers_map_merge_b_b, 2},
    {"_cppcontainers_unordered_map_merge_i_i", (DL_FUNC) &_cppcontainers_unordered_map_merge_i_i, 2},
    {"_cppcontainers_unordered_map_merge_i_d", (DL_FUNC) &_cppcontainers_unordered_map_merge_i_d, 2},
    {"_cppcontainers_unordered_map_merge_i_s", (DL_FUNC) &_cppcontainers_unordered_map_merge_i_s, 2},
    {"_cppcontainers_unordered_map_merge_i_b", (DL_FUNC) &_cppcontainers_unordered_map_merge_i_b, 2},
    {"_cppcontainers_unordered_map_merge_d_i", (DL_FUNC) &_cppcontainers_unordered_map_merge_d_i, 2},
    {"_cppcontainers_unordered_map_merge_d_d", (DL_FUNC) &_cppcontainers_unordered_map_merge_d_d, 2},
    {"_cppcontainers_unordered_map_merge_d_s", (DL_FUNC) &_cppcontainers_unordered_map_merge_d_s, 2},
    {"_cppcontainers_unordered_map_merge_d_b", (DL_FUNC) &_cppcontainers_unordered_map_merge_d_b, 2},
    {"_cppcontainers_unordered_map_merge_s_i", (DL_FUNC) &_cppcontainers_unordered_map_merge_s_i, 2},
    {"_cppcontainers_unordered_map_merge_s_d", (DL_FUNC) &_cppcontainers_unordered_map_merge_s_d, 2},
    {"_cppcontainers_unordered_map_merge_s_s", (DL_FUNC) &_cppcontainers_unordered_map_merge_s_s, 2},
    {"_cppcontainers_unordered_map_merge_s_b", (DL_FUNC) &_cppcontainers_unordered_map_merge_s_b, 2},
    {"_cppcontainers_unordered_map_merge_b_i", (DL_FUNC) &_cppcontainers_unordered_map_merge_b_i, 2},
    {"_cppcontainers_unordered_map_merge_b_d", (DL_FUNC) &_cppcontainers_unordered_map_merge_b_d, 2},
    {"_cppcontainers_unordered_map_merge_b_s", (DL_FUNC) &_cppcontainers_unordered_map_merge_b_s, 2},
    {"_cppcontainers_unordered_map_merge_b_b", (DL_FUNC) &_cppcontainers_unordered_map_merge_b_b, 2},
    {"_cppcontainers_multimap_merge_i_i", (DL_FUNC) &_cppcontainers_multimap_merge_i_i, 2},
    {"_cppcontainers_multimap_merge_i_d", (DL_FUNC) &_cppcontainers_multimap_merge_i_d, 2},
    {"_cppcontainers_multimap_merge_i_s", (DL_FUNC) &_cppcontainers_multimap_merge_i_s, 2},
    {"_cppcontainers_multimap_merge_i_b", (DL_FUNC) &_cppcontainers_multimap_merge_i_b, 2},
    {"_cppcontainers_multimap_merge_d_i", (DL_FUNC) &_cppcontainers_multimap_merge_d_i, 2},
    {"_cppcontainers_multimap_merge_d_d", (DL_FUNC) &_cppcontainers_multimap_merge_d_d, 2},
    {"_cppcontainers_multimap_merge_d_s", (DL_FUNC) &_cppcontainers_multimap_merge_d_s, 2},
    {"_cppcontainers_multimap_merge_d_b", (DL_FUNC) &_cppcontainers_multimap_merge_d_b, 2},
    {"_cppcontainers_multimap_merge_s_i", (DL_FUNC) &_cppcontainers_multimap_merge_s_i, 2},
    {"_cppcontainers_multimap_merge_s_d", (DL_FUNC) &_cppcontainers_multimap_merge_s_d, 2},
    {"_cppcontainers_multimap_merge_s_s", (DL_FUNC) &_cppcontainers_multimap_merge_s_s, 2},
    {"_cppcontainers_multimap_merge_s_b", (DL_FUNC) &_cppcontainers_multimap_merge_s_b, 2},
    {"_cppcontainers_multimap_merge_b_i", (DL_FUNC) &_cppcontainers_multimap_merge_b_i, 2},
    {"_cppcontainers_multimap_merge_b_d", (DL_FUNC) &_cppcontainers_multimap_merge_b_d, 2},
    {"_cppcontainers_multimap_merge_b_s", (DL_FUNC) &_cppcontainers_multimap_merge_b_s, 2},
    {"_cppcontainers_multimap_merge_b_b", (DL_FUNC) &_cppcontainers_multimap_merge_b_b, 2},
    {"_cppcontainers_unordered_multimap_merge_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_i_i, 2},
    {"_cppcontainers_unordered_multimap_merge_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_i_d, 2},
    {"_cppcontainers_unordered_multimap_merge_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_i_s, 2},
    {"_cppcontainers_unordered_multimap_merge_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_i_b, 2},
    {"_cppcontainers_unordered_multimap_merge_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_d_i, 2},
    {"_cppcontainers_unordered_multimap_merge_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_d_d, 2},
    {"_cppcontainers_unordered_multimap_merge_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_d_s, 2},
    {"_cppcontainers_unordered_multimap_merge_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_d_b, 2},
    {"_cppcontainers_unordered_multimap_merge_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_s_i, 2},
    {"_cppcontainers_unordered_multimap_merge_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_s_d, 2},
    {"_cppcontainers_unordered_multimap_merge_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_s_s, 2},
    {"_cppcontainers_unordered_multimap_merge_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_s_b, 2},
    {"_cppcontainers_unordered_multimap_merge_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_b_i, 2},
    {"_cppcontainers_unordered_multimap_merge_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_b_d, 2},
    {"_cppcontainers_unordered_multimap_merge_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_b_s, 2},
    {"_cppcontainers_unordered_multimap_merge_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_merge_b_b, 2},
    {"_cppcontainers_forward_list_merge_i", (DL_FUNC) &_cppcontainers_forward_list_merge_i, 2},
    {"_cppcontainers_forward_list_merge_d", (DL_FUNC) &_cppcontainers_forward_list_merge_d, 2},
    {"_cppcontainers_forward_list_merge_s", (DL_FUNC) &_cppcontainers_forward_list_merge_s, 2},
    {"_cppcontainers_forward_list_merge_b", (DL_FUNC) &_cppcontainers_forward_list_merge_b, 2},
    {"_cppcontainers_list_merge_i", (DL_FUNC) &_cppcontainers_list_merge_i, 2},
    {"_cppcontainers_list_merge_d", (DL_FUNC) &_cppcontainers_list_merge_d, 2},
    {"_cppcontainers_list_merge_s", (DL_FUNC) &_cppcontainers_list_merge_s, 2},
    {"_cppcontainers_list_merge_b", (DL_FUNC) &_cppcontainers_list_merge_b, 2},
    {"_cppcontainers_multimap_i_i", (DL_FUNC) &_cppcontainers_multimap_i_i, 2},
    {"_cppcontainers_multimap_i_d", (DL_FUNC) &_cppcontainers_multimap_i_d, 2},
    {"_cppcontainers_multimap_i_s", (DL_FUNC) &_cppcontainers_multimap_i_s, 2},
    {"_cppcontainers_multimap_i_b", (DL_FUNC) &_cppcontainers_multimap_i_b, 2},
    {"_cppcontainers_multimap_d_i", (DL_FUNC) &_cppcontainers_multimap_d_i, 2},
    {"_cppcontainers_multimap_d_d", (DL_FUNC) &_cppcontainers_multimap_d_d, 2},
    {"_cppcontainers_multimap_d_s", (DL_FUNC) &_cppcontainers_multimap_d_s, 2},
    {"_cppcontainers_multimap_d_b", (DL_FUNC) &_cppcontainers_multimap_d_b, 2},
    {"_cppcontainers_multimap_s_i", (DL_FUNC) &_cppcontainers_multimap_s_i, 2},
    {"_cppcontainers_multimap_s_d", (DL_FUNC) &_cppcontainers_multimap_s_d, 2},
    {"_cppcontainers_multimap_s_s", (DL_FUNC) &_cppcontainers_multimap_s_s, 2},
    {"_cppcontainers_multimap_s_b", (DL_FUNC) &_cppcontainers_multimap_s_b, 2},
    {"_cppcontainers_multimap_b_i", (DL_FUNC) &_cppcontainers_multimap_b_i, 2},
    {"_cppcontainers_multimap_b_d", (DL_FUNC) &_cppcontainers_multimap_b_d, 2},
    {"_cppcontainers_multimap_b_s", (DL_FUNC) &_cppcontainers_multimap_b_s, 2},
    {"_cppcontainers_multimap_b_b", (DL_FUNC) &_cppcontainers_multimap_b_b, 2},
    {"_cppcontainers_multiset_i", (DL_FUNC) &_cppcontainers_multiset_i, 1},
    {"_cppcontainers_multiset_d", (DL_FUNC) &_cppcontainers_multiset_d, 1},
    {"_cppcontainers_multiset_s", (DL_FUNC) &_cppcontainers_multiset_s, 1},
    {"_cppcontainers_multiset_b", (DL_FUNC) &_cppcontainers_multiset_b, 1},
    {"_cppcontainers_set_equal_i", (DL_FUNC) &_cppcontainers_set_equal_i, 2},
    {"_cppcontainers_set_equal_d", (DL_FUNC) &_cppcontainers_set_equal_d, 2},
    {"_cppcontainers_set_equal_s", (DL_FUNC) &_cppcontainers_set_equal_s, 2},
    {"_cppcontainers_set_equal_b", (DL_FUNC) &_cppcontainers_set_equal_b, 2},
    {"_cppcontainers_unordered_set_equal_i", (DL_FUNC) &_cppcontainers_unordered_set_equal_i, 2},
    {"_cppcontainers_unordered_set_equal_d", (DL_FUNC) &_cppcontainers_unordered_set_equal_d, 2},
    {"_cppcontainers_unordered_set_equal_s", (DL_FUNC) &_cppcontainers_unordered_set_equal_s, 2},
    {"_cppcontainers_unordered_set_equal_b", (DL_FUNC) &_cppcontainers_unordered_set_equal_b, 2},
    {"_cppcontainers_multiset_equal_i", (DL_FUNC) &_cppcontainers_multiset_equal_i, 2},
    {"_cppcontainers_multiset_equal_d", (DL_FUNC) &_cppcontainers_multiset_equal_d, 2},
    {"_cppcontainers_multiset_equal_s", (DL_FUNC) &_cppcontainers_multiset_equal_s, 2},
    {"_cppcontainers_multiset_equal_b", (DL_FUNC) &_cppcontainers_multiset_equal_b, 2},
    {"_cppcontainers_unordered_multiset_equal_i", (DL_FUNC) &_cppcontainers_unordered_multiset_equal_i, 2},
    {"_cppcontainers_unordered_multiset_equal_d", (DL_FUNC) &_cppcontainers_unordered_multiset_equal_d, 2},
    {"_cppcontainers_unordered_multiset_equal_s", (DL_FUNC) &_cppcontainers_unordered_multiset_equal_s, 2},
    {"_cppcontainers_unordered_multiset_equal_b", (DL_FUNC) &_cppcontainers_unordered_multiset_equal_b, 2},
    {"_cppcontainers_map_equal_i_i", (DL_FUNC) &_cppcontainers_map_equal_i_i, 2},
    {"_cppcontainers_map_equal_i_d", (DL_FUNC) &_cppcontainers_map_equal_i_d, 2},
    {"_cppcontainers_map_equal_i_s", (DL_FUNC) &_cppcontainers_map_equal_i_s, 2},
    {"_cppcontainers_map_equal_i_b", (DL_FUNC) &_cppcontainers_map_equal_i_b, 2},
    {"_cppcontainers_map_equal_d_i", (DL_FUNC) &_cppcontainers_map_equal_d_i, 2},
    {"_cppcontainers_map_equal_d_d", (DL_FUNC) &_cppcontainers_map_equal_d_d, 2},
    {"_cppcontainers_map_equal_d_s", (DL_FUNC) &_cppcontainers_map_equal_d_s, 2},
    {"_cppcontainers_map_equal_d_b", (DL_FUNC) &_cppcontainers_map_equal_d_b, 2},
    {"_cppcontainers_map_equal_s_i", (DL_FUNC) &_cppcontainers_map_equal_s_i, 2},
    {"_cppcontainers_map_equal_s_d", (DL_FUNC) &_cppcontainers_map_equal_s_d, 2},
    {"_cppcontainers_map_equal_s_s", (DL_FUNC) &_cppcontainers_map_equal_s_s, 2},
    {"_cppcontainers_map_equal_s_b", (DL_FUNC) &_cppcontainers_map_equal_s_b, 2},
    {"_cppcontainers_map_equal_b_i", (DL_FUNC) &_cppcontainers_map_equal_b_i, 2},
    {"_cppcontainers_map_equal_b_d", (DL_FUNC) &_cppcontainers_map_equal_b_d, 2},
    {"_cppcontainers_map_equal_b_s", (DL_FUNC) &_cppcontainers_map_equal_b_s, 2},
    {"_cppcontainers_map_equal_b_b", (DL_FUNC) &_cppcontainers_map_equal_b_b, 2},
    {"_cppcontainers_unordered_map_equal_i_i", (DL_FUNC) &_cppcontainers_unordered_map_equal_i_i, 2},
    {"_cppcontainers_unordered_map_equal_i_d", (DL_FUNC) &_cppcontainers_unordered_map_equal_i_d, 2},
    {"_cppcontainers_unordered_map_equal_i_s", (DL_FUNC) &_cppcontainers_unordered_map_equal_i_s, 2},
    {"_cppcontainers_unordered_map_equal_i_b", (DL_FUNC) &_cppcontainers_unordered_map_equal_i_b, 2},
    {"_cppcontainers_unordered_map_equal_d_i", (DL_FUNC) &_cppcontainers_unordered_map_equal_d_i, 2},
    {"_cppcontainers_unordered_map_equal_d_d", (DL_FUNC) &_cppcontainers_unordered_map_equal_d_d, 2},
    {"_cppcontainers_unordered_map_equal_d_s", (DL_FUNC) &_cppcontainers_unordered_map_equal_d_s, 2},
    {"_cppcontainers_unordered_map_equal_d_b", (DL_FUNC) &_cppcontainers_unordered_map_equal_d_b, 2},
    {"_cppcontainers_unordered_map_equal_s_i", (DL_FUNC) &_cppcontainers_unordered_map_equal_s_i, 2},
    {"_cppcontainers_unordered_map_equal_s_d", (DL_FUNC) &_cppcontainers_unordered_map_equal_s_d, 2},
    {"_cppcontainers_unordered_map_equal_s_s", (DL_FUNC) &_cppcontainers_unordered_map_equal_s_s, 2},
    {"_cppcontainers_unordered_map_equal_s_b", (DL_FUNC) &_cppcontainers_unordered_map_equal_s_b, 2},
    {"_cppcontainers_unordered_map_equal_b_i", (DL_FUNC) &_cppcontainers_unordered_map_equal_b_i, 2},
    {"_cppcontainers_unordered_map_equal_b_d", (DL_FUNC) &_cppcontainers_unordered_map_equal_b_d, 2},
    {"_cppcontainers_unordered_map_equal_b_s", (DL_FUNC) &_cppcontainers_unordered_map_equal_b_s, 2},
    {"_cppcontainers_unordered_map_equal_b_b", (DL_FUNC) &_cppcontainers_unordered_map_equal_b_b, 2},
    {"_cppcontainers_multimap_equal_i_i", (DL_FUNC) &_cppcontainers_multimap_equal_i_i, 2},
    {"_cppcontainers_multimap_equal_i_d", (DL_FUNC) &_cppcontainers_multimap_equal_i_d, 2},
    {"_cppcontainers_multimap_equal_i_s", (DL_FUNC) &_cppcontainers_multimap_equal_i_s, 2},
    {"_cppcontainers_multimap_equal_i_b", (DL_FUNC) &_cppcontainers_multimap_equal_i_b, 2},
    {"_cppcontainers_multimap_equal_d_i", (DL_FUNC) &_cppcontainers_multimap_equal_d_i, 2},
    {"_cppcontainers_multimap_equal_d_d", (DL_FUNC) &_cppcontainers_multimap_equal_d_d, 2},
    {"_cppcontainers_multimap_equal_d_s", (DL_FUNC) &_cppcontainers_multimap_equal_d_s, 2},
    {"_cppcontainers_multimap_equal_d_b", (DL_FUNC) &_cppcontainers_multimap_equal_d_b, 2},
    {"_cppcontainers_multimap_equal_s_i", (DL_FUNC) &_cppcontainers_multimap_equal_s_i, 2},
    {"_cppcontainers_multimap_equal_s_d", (DL_FUNC) &_cppcontainers_multimap_equal_s_d, 2},
    {"_cppcontainers_multimap_equal_s_s", (DL_FUNC) &_cppcontainers_multimap_equal_s_s, 2},
    {"_cppcontainers_multimap_equal_s_b", (DL_FUNC) &_cppcontainers_multimap_equal_s_b, 2},
    {"_cppcontainers_multimap_equal_b_i", (DL_FUNC) &_cppcontainers_multimap_equal_b_i, 2},
    {"_cppcontainers_multimap_equal_b_d", (DL_FUNC) &_cppcontainers_multimap_equal_b_d, 2},
    {"_cppcontainers_multimap_equal_b_s", (DL_FUNC) &_cppcontainers_multimap_equal_b_s, 2},
    {"_cppcontainers_multimap_equal_b_b", (DL_FUNC) &_cppcontainers_multimap_equal_b_b, 2},
    {"_cppcontainers_unordered_multimap_equal_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_i_i, 2},
    {"_cppcontainers_unordered_multimap_equal_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_i_d, 2},
    {"_cppcontainers_unordered_multimap_equal_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_i_s, 2},
    {"_cppcontainers_unordered_multimap_equal_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_i_b, 2},
    {"_cppcontainers_unordered_multimap_equal_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_d_i, 2},
    {"_cppcontainers_unordered_multimap_equal_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_d_d, 2},
    {"_cppcontainers_unordered_multimap_equal_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_d_s, 2},
    {"_cppcontainers_unordered_multimap_equal_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_d_b, 2},
    {"_cppcontainers_unordered_multimap_equal_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_s_i, 2},
    {"_cppcontainers_unordered_multimap_equal_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_s_d, 2},
    {"_cppcontainers_unordered_multimap_equal_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_s_s, 2},
    {"_cppcontainers_unordered_multimap_equal_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_s_b, 2},
    {"_cppcontainers_unordered_multimap_equal_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_b_i, 2},
    {"_cppcontainers_unordered_multimap_equal_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_b_d, 2},
    {"_cppcontainers_unordered_multimap_equal_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_b_s, 2},
    {"_cppcontainers_unordered_multimap_equal_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_equal_b_b, 2},
    {"_cppcontainers_stack_equal_i", (DL_FUNC) &_cppcontainers_stack_equal_i, 2},
    {"_cppcontainers_stack_equal_d", (DL_FUNC) &_cppcontainers_stack_equal_d, 2},
    {"_cppcontainers_stack_equal_s", (DL_FUNC) &_cppcontainers_stack_equal_s, 2},
    {"_cppcontainers_stack_equal_b", (DL_FUNC) &_cppcontainers_stack_equal_b, 2},
    {"_cppcontainers_queue_equal_i", (DL_FUNC) &_cppcontainers_queue_equal_i, 2},
    {"_cppcontainers_queue_equal_d", (DL_FUNC) &_cppcontainers_queue_equal_d, 2},
    {"_cppcontainers_queue_equal_s", (DL_FUNC) &_cppcontainers_queue_equal_s, 2},
    {"_cppcontainers_queue_equal_b", (DL_FUNC) &_cppcontainers_queue_equal_b, 2},
    {"_cppcontainers_vector_equal_i", (DL_FUNC) &_cppcontainers_vector_equal_i, 2},
    {"_cppcontainers_vector_equal_d", (DL_FUNC) &_cppcontainers_vector_equal_d, 2},
    {"_cppcontainers_vector_equal_s", (DL_FUNC) &_cppcontainers_vector_equal_s, 2},
    {"_cppcontainers_vector_equal_b", (DL_FUNC) &_cppcontainers_vector_equal_b, 2},
    {"_cppcontainers_deque_equal_i", (DL_FUNC) &_cppcontainers_deque_equal_i, 2},
    {"_cppcontainers_deque_equal_d", (DL_FUNC) &_cppcontainers_deque_equal_d, 2},
    {"_cppcontainers_deque_equal_s", (DL_FUNC) &_cppcontainers_deque_equal_s, 2},
    {"_cppcontainers_deque_equal_b", (DL_FUNC) &_cppcontainers_deque_equal_b, 2},
    {"_cppcontainers_forward_list_equal_i", (DL_FUNC) &_cppcontainers_forward_list_equal_i, 2},
    {"_cppcontainers_forward_list_equal_d", (DL_FUNC) &_cppcontainers_forward_list_equal_d, 2},
    {"_cppcontainers_forward_list_equal_s", (DL_FUNC) &_cppcontainers_forward_list_equal_s, 2},
    {"_cppcontainers_forward_list_equal_b", (DL_FUNC) &_cppcontainers_forward_list_equal_b, 2},
    {"_cppcontainers_list_equal_i", (DL_FUNC) &_cppcontainers_list_equal_i, 2},
    {"_cppcontainers_list_equal_d", (DL_FUNC) &_cppcontainers_list_equal_d, 2},
    {"_cppcontainers_list_equal_s", (DL_FUNC) &_cppcontainers_list_equal_s, 2},
    {"_cppcontainers_list_equal_b", (DL_FUNC) &_cppcontainers_list_equal_b, 2},
    {"_cppcontainers_map_bracket_i_i", (DL_FUNC) &_cppcontainers_map_bracket_i_i, 2},
    {"_cppcontainers_map_bracket_i_d", (DL_FUNC) &_cppcontainers_map_bracket_i_d, 2},
    {"_cppcontainers_map_bracket_i_s", (DL_FUNC) &_cppcontainers_map_bracket_i_s, 2},
    {"_cppcontainers_map_bracket_i_b", (DL_FUNC) &_cppcontainers_map_bracket_i_b, 2},
    {"_cppcontainers_map_bracket_d_i", (DL_FUNC) &_cppcontainers_map_bracket_d_i, 2},
    {"_cppcontainers_map_bracket_d_d", (DL_FUNC) &_cppcontainers_map_bracket_d_d, 2},
    {"_cppcontainers_map_bracket_d_s", (DL_FUNC) &_cppcontainers_map_bracket_d_s, 2},
    {"_cppcontainers_map_bracket_d_b", (DL_FUNC) &_cppcontainers_map_bracket_d_b, 2},
    {"_cppcontainers_map_bracket_s_i", (DL_FUNC) &_cppcontainers_map_bracket_s_i, 2},
    {"_cppcontainers_map_bracket_s_d", (DL_FUNC) &_cppcontainers_map_bracket_s_d, 2},
    {"_cppcontainers_map_bracket_s_s", (DL_FUNC) &_cppcontainers_map_bracket_s_s, 2},
    {"_cppcontainers_map_bracket_s_b", (DL_FUNC) &_cppcontainers_map_bracket_s_b, 2},
    {"_cppcontainers_map_bracket_b_i", (DL_FUNC) &_cppcontainers_map_bracket_b_i, 2},
    {"_cppcontainers_map_bracket_b_d", (DL_FUNC) &_cppcontainers_map_bracket_b_d, 2},
    {"_cppcontainers_map_bracket_b_s", (DL_FUNC) &_cppcontainers_map_bracket_b_s, 2},
    {"_cppcontainers_map_bracket_b_b", (DL_FUNC) &_cppcontainers_map_bracket_b_b, 2},
    {"_cppcontainers_unordered_map_bracket_i_i", (DL_FUNC) &_cppcontainers_unordered_map_bracket_i_i, 2},
    {"_cppcontainers_unordered_map_bracket_i_d", (DL_FUNC) &_cppcontainers_unordered_map_bracket_i_d, 2},
    {"_cppcontainers_unordered_map_bracket_i_s", (DL_FUNC) &_cppcontainers_unordered_map_bracket_i_s, 2},
    {"_cppcontainers_unordered_map_bracket_i_b", (DL_FUNC) &_cppcontainers_unordered_map_bracket_i_b, 2},
    {"_cppcontainers_unordered_map_bracket_d_i", (DL_FUNC) &_cppcontainers_unordered_map_bracket_d_i, 2},
    {"_cppcontainers_unordered_map_bracket_d_d", (DL_FUNC) &_cppcontainers_unordered_map_bracket_d_d, 2},
    {"_cppcontainers_unordered_map_bracket_d_s", (DL_FUNC) &_cppcontainers_unordered_map_bracket_d_s, 2},
    {"_cppcontainers_unordered_map_bracket_d_b", (DL_FUNC) &_cppcontainers_unordered_map_bracket_d_b, 2},
    {"_cppcontainers_unordered_map_bracket_s_i", (DL_FUNC) &_cppcontainers_unordered_map_bracket_s_i, 2},
    {"_cppcontainers_unordered_map_bracket_s_d", (DL_FUNC) &_cppcontainers_unordered_map_bracket_s_d, 2},
    {"_cppcontainers_unordered_map_bracket_s_s", (DL_FUNC) &_cppcontainers_unordered_map_bracket_s_s, 2},
    {"_cppcontainers_unordered_map_bracket_s_b", (DL_FUNC) &_cppcontainers_unordered_map_bracket_s_b, 2},
    {"_cppcontainers_unordered_map_bracket_b_i", (DL_FUNC) &_cppcontainers_unordered_map_bracket_b_i, 2},
    {"_cppcontainers_unordered_map_bracket_b_d", (DL_FUNC) &_cppcontainers_unordered_map_bracket_b_d, 2},
    {"_cppcontainers_unordered_map_bracket_b_s", (DL_FUNC) &_cppcontainers_unordered_map_bracket_b_s, 2},
    {"_cppcontainers_unordered_map_bracket_b_b", (DL_FUNC) &_cppcontainers_unordered_map_bracket_b_b, 2},
    {"_cppcontainers_vector_bracket_i", (DL_FUNC) &_cppcontainers_vector_bracket_i, 2},
    {"_cppcontainers_vector_bracket_d", (DL_FUNC) &_cppcontainers_vector_bracket_d, 2},
    {"_cppcontainers_vector_bracket_s", (DL_FUNC) &_cppcontainers_vector_bracket_s, 2},
    {"_cppcontainers_vector_bracket_b", (DL_FUNC) &_cppcontainers_vector_bracket_b, 2},
    {"_cppcontainers_deque_bracket_i", (DL_FUNC) &_cppcontainers_deque_bracket_i, 2},
    {"_cppcontainers_deque_bracket_d", (DL_FUNC) &_cppcontainers_deque_bracket_d, 2},
    {"_cppcontainers_deque_bracket_s", (DL_FUNC) &_cppcontainers_deque_bracket_s, 2},
    {"_cppcontainers_deque_bracket_b", (DL_FUNC) &_cppcontainers_deque_bracket_b, 2},
    {"_cppcontainers_stack_pop_i", (DL_FUNC) &_cppcontainers_stack_pop_i, 1},
    {"_cppcontainers_stack_pop_d", (DL_FUNC) &_cppcontainers_stack_pop_d, 1},
    {"_cppcontainers_stack_pop_s", (DL_FUNC) &_cppcontainers_stack_pop_s, 1},
    {"_cppcontainers_stack_pop_b", (DL_FUNC) &_cppcontainers_stack_pop_b, 1},
    {"_cppcontainers_queue_pop_i", (DL_FUNC) &_cppcontainers_queue_pop_i, 1},
    {"_cppcontainers_queue_pop_d", (DL_FUNC) &_cppcontainers_queue_pop_d, 1},
    {"_cppcontainers_queue_pop_s", (DL_FUNC) &_cppcontainers_queue_pop_s, 1},
    {"_cppcontainers_queue_pop_b", (DL_FUNC) &_cppcontainers_queue_pop_b, 1},
    {"_cppcontainers_priority_queue_pop_i_d", (DL_FUNC) &_cppcontainers_priority_queue_pop_i_d, 1},
    {"_cppcontainers_priority_queue_pop_d_d", (DL_FUNC) &_cppcontainers_priority_queue_pop_d_d, 1},
    {"_cppcontainers_priority_queue_pop_s_d", (DL_FUNC) &_cppcontainers_priority_queue_pop_s_d, 1},
    {"_cppcontainers_priority_queue_pop_b_d", (DL_FUNC) &_cppcontainers_priority_queue_pop_b_d, 1},
    {"_cppcontainers_priority_queue_pop_i_a", (DL_FUNC) &_cppcontainers_priority_queue_pop_i_a, 1},
    {"_cppcontainers_priority_queue_pop_d_a", (DL_FUNC) &_cppcontainers_priority_queue_pop_d_a, 1},
    {"_cppcontainers_priority_queue_pop_s_a", (DL_FUNC) &_cppcontainers_priority_queue_pop_s_a, 1},
    {"_cppcontainers_priority_queue_pop_b_a", (DL_FUNC) &_cppcontainers_priority_queue_pop_b_a, 1},
    {"_cppcontainers_vector_pop_back_i", (DL_FUNC) &_cppcontainers_vector_pop_back_i, 1},
    {"_cppcontainers_vector_pop_back_d", (DL_FUNC) &_cppcontainers_vector_pop_back_d, 1},
    {"_cppcontainers_vector_pop_back_s", (DL_FUNC) &_cppcontainers_vector_pop_back_s, 1},
    {"_cppcontainers_vector_pop_back_b", (DL_FUNC) &_cppcontainers_vector_pop_back_b, 1},
    {"_cppcontainers_deque_pop_back_i", (DL_FUNC) &_cppcontainers_deque_pop_back_i, 1},
    {"_cppcontainers_deque_pop_back_d", (DL_FUNC) &_cppcontainers_deque_pop_back_d, 1},
    {"_cppcontainers_deque_pop_back_s", (DL_FUNC) &_cppcontainers_deque_pop_back_s, 1},
    {"_cppcontainers_deque_pop_back_b", (DL_FUNC) &_cppcontainers_deque_pop_back_b, 1},
    {"_cppcontainers_list_pop_back_i", (DL_FUNC) &_cppcontainers_list_pop_back_i, 1},
    {"_cppcontainers_list_pop_back_d", (DL_FUNC) &_cppcontainers_list_pop_back_d, 1},
    {"_cppcontainers_list_pop_back_s", (DL_FUNC) &_cppcontainers_list_pop_back_s, 1},
    {"_cppcontainers_list_pop_back_b", (DL_FUNC) &_cppcontainers_list_pop_back_b, 1},
    {"_cppcontainers_deque_pop_front_i", (DL_FUNC) &_cppcontainers_deque_pop_front_i, 1},
    {"_cppcontainers_deque_pop_front_d", (DL_FUNC) &_cppcontainers_deque_pop_front_d, 1},
    {"_cppcontainers_deque_pop_front_s", (DL_FUNC) &_cppcontainers_deque_pop_front_s, 1},
    {"_cppcontainers_deque_pop_front_b", (DL_FUNC) &_cppcontainers_deque_pop_front_b, 1},
    {"_cppcontainers_forward_list_pop_front_i", (DL_FUNC) &_cppcontainers_forward_list_pop_front_i, 1},
    {"_cppcontainers_forward_list_pop_front_d", (DL_FUNC) &_cppcontainers_forward_list_pop_front_d, 1},
    {"_cppcontainers_forward_list_pop_front_s", (DL_FUNC) &_cppcontainers_forward_list_pop_front_s, 1},
    {"_cppcontainers_forward_list_pop_front_b", (DL_FUNC) &_cppcontainers_forward_list_pop_front_b, 1},
    {"_cppcontainers_list_pop_front_i", (DL_FUNC) &_cppcontainers_list_pop_front_i, 1},
    {"_cppcontainers_list_pop_front_d", (DL_FUNC) &_cppcontainers_list_pop_front_d, 1},
    {"_cppcontainers_list_pop_front_s", (DL_FUNC) &_cppcontainers_list_pop_front_s, 1},
    {"_cppcontainers_list_pop_front_b", (DL_FUNC) &_cppcontainers_list_pop_front_b, 1},
    {"_cppcontainers_set_print_i", (DL_FUNC) &_cppcontainers_set_print_i, 8},
    {"_cppcontainers_set_print_d", (DL_FUNC) &_cppcontainers_set_print_d, 8},
    {"_cppcontainers_set_print_s", (DL_FUNC) &_cppcontainers_set_print_s, 8},
    {"_cppcontainers_set_print_b", (DL_FUNC) &_cppcontainers_set_print_b, 8},
    {"_cppcontainers_unordered_set_print_i", (DL_FUNC) &_cppcontainers_unordered_set_print_i, 2},
    {"_cppcontainers_unordered_set_print_d", (DL_FUNC) &_cppcontainers_unordered_set_print_d, 2},
    {"_cppcontainers_unordered_set_print_s", (DL_FUNC) &_cppcontainers_unordered_set_print_s, 2},
    {"_cppcontainers_unordered_set_print_b", (DL_FUNC) &_cppcontainers_unordered_set_print_b, 2},
    {"_cppcontainers_multiset_print_i", (DL_FUNC) &_cppcontainers_multiset_print_i, 8},
    {"_cppcontainers_multiset_print_d", (DL_FUNC) &_cppcontainers_multiset_print_d, 8},
    {"_cppcontainers_multiset_print_s", (DL_FUNC) &_cppcontainers_multiset_print_s, 8},
    {"_cppcontainers_multiset_print_b", (DL_FUNC) &_cppcontainers_multiset_print_b, 8},
    {"_cppcontainers_unordered_multiset_print_i", (DL_FUNC) &_cppcontainers_unordered_multiset_print_i, 2},
    {"_cppcontainers_unordered_multiset_print_d", (DL_FUNC) &_cppcontainers_unordered_multiset_print_d, 2},
    {"_cppcontainers_unordered_multiset_print_s", (DL_FUNC) &_cppcontainers_unordered_multiset_print_s, 2},
    {"_cppcontainers_unordered_multiset_print_b", (DL_FUNC) &_cppcontainers_unordered_multiset_print_b, 2},
    {"_cppcontainers_map_print_i_i", (DL_FUNC) &_cppcontainers_map_print_i_i, 8},
    {"_cppcontainers_map_print_i_d", (DL_FUNC) &_cppcontainers_map_print_i_d, 8},
    {"_cppcontainers_map_print_i_s", (DL_FUNC) &_cppcontainers_map_print_i_s, 8},
    {"_cppcontainers_map_print_i_b", (DL_FUNC) &_cppcontainers_map_print_i_b, 8},
    {"_cppcontainers_map_print_d_i", (DL_FUNC) &_cppcontainers_map_print_d_i, 8},
    {"_cppcontainers_map_print_d_d", (DL_FUNC) &_cppcontainers_map_print_d_d, 8},
    {"_cppcontainers_map_print_d_s", (DL_FUNC) &_cppcontainers_map_print_d_s, 8},
    {"_cppcontainers_map_print_d_b", (DL_FUNC) &_cppcontainers_map_print_d_b, 8},
    {"_cppcontainers_map_print_s_i", (DL_FUNC) &_cppcontainers_map_print_s_i, 8},
    {"_cppcontainers_map_print_s_d", (DL_FUNC) &_cppcontainers_map_print_s_d, 8},
    {"_cppcontainers_map_print_s_s", (DL_FUNC) &_cppcontainers_map_print_s_s, 8},
    {"_cppcontainers_map_print_s_b", (DL_FUNC) &_cppcontainers_map_print_s_b, 8},
    {"_cppcontainers_map_print_b_i", (DL_FUNC) &_cppcontainers_map_print_b_i, 8},
    {"_cppcontainers_map_print_b_d", (DL_FUNC) &_cppcontainers_map_print_b_d, 8},
    {"_cppcontainers_map_print_b_s", (DL_FUNC) &_cppcontainers_map_print_b_s, 8},
    {"_cppcontainers_map_print_b_b", (DL_FUNC) &_cppcontainers_map_print_b_b, 8},
    {"_cppcontainers_unordered_map_print_i_i", (DL_FUNC) &_cppcontainers_unordered_map_print_i_i, 2},
    {"_cppcontainers_unordered_map_print_i_d", (DL_FUNC) &_cppcontainers_unordered_map_print_i_d, 2},
    {"_cppcontainers_unordered_map_print_i_s", (DL_FUNC) &_cppcontainers_unordered_map_print_i_s, 2},
    {"_cppcontainers_unordered_map_print_i_b", (DL_FUNC) &_cppcontainers_unordered_map_print_i_b, 2},
    {"_cppcontainers_unordered_map_print_d_i", (DL_FUNC) &_cppcontainers_unordered_map_print_d_i, 2},
    {"_cppcontainers_unordered_map_print_d_d", (DL_FUNC) &_cppcontainers_unordered_map_print_d_d, 2},
    {"_cppcontainers_unordered_map_print_d_s", (DL_FUNC) &_cppcontainers_unordered_map_print_d_s, 2},
    {"_cppcontainers_unordered_map_print_d_b", (DL_FUNC) &_cppcontainers_unordered_map_print_d_b, 2},
    {"_cppcontainers_unordered_map_print_s_i", (DL_FUNC) &_cppcontainers_unordered_map_print_s_i, 2},
    {"_cppcontainers_unordered_map_print_s_d", (DL_FUNC) &_cppcontainers_unordered_map_print_s_d, 2},
    {"_cppcontainers_unordered_map_print_s_s", (DL_FUNC) &_cppcontainers_unordered_map_print_s_s, 2},
    {"_cppcontainers_unordered_map_print_s_b", (DL_FUNC) &_cppcontainers_unordered_map_print_s_b, 2},
    {"_cppcontainers_unordered_map_print_b_i", (DL_FUNC) &_cppcontainers_unordered_map_print_b_i, 2},
    {"_cppcontainers_unordered_map_print_b_d", (DL_FUNC) &_cppcontainers_unordered_map_print_b_d, 2},
    {"_cppcontainers_unordered_map_print_b_s", (DL_FUNC) &_cppcontainers_unordered_map_print_b_s, 2},
    {"_cppcontainers_unordered_map_print_b_b", (DL_FUNC) &_cppcontainers_unordered_map_print_b_b, 2},
    {"_cppcontainers_multimap_print_i_i", (DL_FUNC) &_cppcontainers_multimap_print_i_i, 8},
    {"_cppcontainers_multimap_print_i_d", (DL_FUNC) &_cppcontainers_multimap_print_i_d, 8},
    {"_cppcontainers_multimap_print_i_s", (DL_FUNC) &_cppcontainers_multimap_print_i_s, 8},
    {"_cppcontainers_multimap_print_i_b", (DL_FUNC) &_cppcontainers_multimap_print_i_b, 8},
    {"_cppcontainers_multimap_print_d_i", (DL_FUNC) &_cppcontainers_multimap_print_d_i, 8},
    {"_cppcontainers_multimap_print_d_d", (DL_FUNC) &_cppcontainers_multimap_print_d_d, 8},
    {"_cppcontainers_multimap_print_d_s", (DL_FUNC) &_cppcontainers_multimap_print_d_s, 8},
    {"_cppcontainers_multimap_print_d_b", (DL_FUNC) &_cppcontainers_multimap_print_d_b, 8},
    {"_cppcontainers_multimap_print_s_i", (DL_FUNC) &_cppcontainers_multimap_print_s_i, 8},
    {"_cppcontainers_multimap_print_s_d", (DL_FUNC) &_cppcontainers_multimap_print_s_d, 8},
    {"_cppcontainers_multimap_print_s_s", (DL_FUNC) &_cppcontainers_multimap_print_s_s, 8},
    {"_cppcontainers_multimap_print_s_b", (DL_FUNC) &_cppcontainers_multimap_print_s_b, 8},
    {"_cppcontainers_multimap_print_b_i", (DL_FUNC) &_cppcontainers_multimap_print_b_i, 8},
    {"_cppcontainers_multimap_print_b_d", (DL_FUNC) &_cppcontainers_multimap_print_b_d, 8},
    {"_cppcontainers_multimap_print_b_s", (DL_FUNC) &_cppcontainers_multimap_print_b_s, 8},
    {"_cppcontainers_multimap_print_b_b", (DL_FUNC) &_cppcontainers_multimap_print_b_b, 8},
    {"_cppcontainers_unordered_multimap_print_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_print_i_i, 2},
    {"_cppcontainers_unordered_multimap_print_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_print_i_d, 2},
    {"_cppcontainers_unordered_multimap_print_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_print_i_s, 2},
    {"_cppcontainers_unordered_multimap_print_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_print_i_b, 2},
    {"_cppcontainers_unordered_multimap_print_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_print_d_i, 2},
    {"_cppcontainers_unordered_multimap_print_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_print_d_d, 2},
    {"_cppcontainers_unordered_multimap_print_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_print_d_s, 2},
    {"_cppcontainers_unordered_multimap_print_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_print_d_b, 2},
    {"_cppcontainers_unordered_multimap_print_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_print_s_i, 2},
    {"_cppcontainers_unordered_multimap_print_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_print_s_d, 2},
    {"_cppcontainers_unordered_multimap_print_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_print_s_s, 2},
    {"_cppcontainers_unordered_multimap_print_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_print_s_b, 2},
    {"_cppcontainers_unordered_multimap_print_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_print_b_i, 2},
    {"_cppcontainers_unordered_multimap_print_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_print_b_d, 2},
    {"_cppcontainers_unordered_multimap_print_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_print_b_s, 2},
    {"_cppcontainers_unordered_multimap_print_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_print_b_b, 2},
    {"_cppcontainers_stack_print_i", (DL_FUNC) &_cppcontainers_stack_print_i, 1},
    {"_cppcontainers_stack_print_d", (DL_FUNC) &_cppcontainers_stack_print_d, 1},
    {"_cppcontainers_stack_print_s", (DL_FUNC) &_cppcontainers_stack_print_s, 1},
    {"_cppcontainers_stack_print_b", (DL_FUNC) &_cppcontainers_stack_print_b, 1},
    {"_cppcontainers_queue_print_i", (DL_FUNC) &_cppcontainers_queue_print_i, 1},
    {"_cppcontainers_queue_print_d", (DL_FUNC) &_cppcontainers_queue_print_d, 1},
    {"_cppcontainers_queue_print_s", (DL_FUNC) &_cppcontainers_queue_print_s, 1},
    {"_cppcontainers_queue_print_b", (DL_FUNC) &_cppcontainers_queue_print_b, 1},
    {"_cppcontainers_priority_queue_print_i_d", (DL_FUNC) &_cppcontainers_priority_queue_print_i_d, 1},
    {"_cppcontainers_priority_queue_print_d_d", (DL_FUNC) &_cppcontainers_priority_queue_print_d_d, 1},
    {"_cppcontainers_priority_queue_print_s_d", (DL_FUNC) &_cppcontainers_priority_queue_print_s_d, 1},
    {"_cppcontainers_priority_queue_print_b_d", (DL_FUNC) &_cppcontainers_priority_queue_print_b_d, 1},
    {"_cppcontainers_priority_queue_print_i_a", (DL_FUNC) &_cppcontainers_priority_queue_print_i_a, 1},
    {"_cppcontainers_priority_queue_print_d_a", (DL_FUNC) &_cppcontainers_priority_queue_print_d_a, 1},
    {"_cppcontainers_priority_queue_print_s_a", (DL_FUNC) &_cppcontainers_priority_queue_print_s_a, 1},
    {"_cppcontainers_priority_queue_print_b_a", (DL_FUNC) &_cppcontainers_priority_queue_print_b_a, 1},
    {"_cppcontainers_vector_print_i", (DL_FUNC) &_cppcontainers_vector_print_i, 8},
    {"_cppcontainers_vector_print_d", (DL_FUNC) &_cppcontainers_vector_print_d, 8},
    {"_cppcontainers_vector_print_s", (DL_FUNC) &_cppcontainers_vector_print_s, 8},
    {"_cppcontainers_vector_print_b", (DL_FUNC) &_cppcontainers_vector_print_b, 8},
    {"_cppcontainers_deque_print_i", (DL_FUNC) &_cppcontainers_deque_print_i, 8},
    {"_cppcontainers_deque_print_d", (DL_FUNC) &_cppcontainers_deque_print_d, 8},
    {"_cppcontainers_deque_print_s", (DL_FUNC) &_cppcontainers_deque_print_s, 8},
    {"_cppcontainers_deque_print_b", (DL_FUNC) &_cppcontainers_deque_print_b, 8},
    {"_cppcontainers_forward_list_print_i", (DL_FUNC) &_cppcontainers_forward_list_print_i, 2},
    {"_cppcontainers_forward_list_print_d", (DL_FUNC) &_cppcontainers_forward_list_print_d, 2},
    {"_cppcontainers_forward_list_print_s", (DL_FUNC) &_cppcontainers_forward_list_print_s, 2},
    {"_cppcontainers_forward_list_print_b", (DL_FUNC) &_cppcontainers_forward_list_print_b, 2},
    {"_cppcontainers_list_print_i", (DL_FUNC) &_cppcontainers_list_print_i, 3},
    {"_cppcontainers_list_print_d", (DL_FUNC) &_cppcontainers_list_print_d, 3},
    {"_cppcontainers_list_print_s", (DL_FUNC) &_cppcontainers_list_print_s, 3},
    {"_cppcontainers_list_print_b", (DL_FUNC) &_cppcontainers_list_print_b, 3},
    {"_cppcontainers_priority_queue_i_d", (DL_FUNC) &_cppcontainers_priority_queue_i_d, 1},
    {"_cppcontainers_priority_queue_d_d", (DL_FUNC) &_cppcontainers_priority_queue_d_d, 1},
    {"_cppcontainers_priority_queue_s_d", (DL_FUNC) &_cppcontainers_priority_queue_s_d, 1},
    {"_cppcontainers_priority_queue_b_d", (DL_FUNC) &_cppcontainers_priority_queue_b_d, 1},
    {"_cppcontainers_priority_queue_i_a", (DL_FUNC) &_cppcontainers_priority_queue_i_a, 1},
    {"_cppcontainers_priority_queue_d_a", (DL_FUNC) &_cppcontainers_priority_queue_d_a, 1},
    {"_cppcontainers_priority_queue_s_a", (DL_FUNC) &_cppcontainers_priority_queue_s_a, 1},
    {"_cppcontainers_priority_queue_b_a", (DL_FUNC) &_cppcontainers_priority_queue_b_a, 1},
    {"_cppcontainers_stack_push_i", (DL_FUNC) &_cppcontainers_stack_push_i, 2},
    {"_cppcontainers_stack_push_d", (DL_FUNC) &_cppcontainers_stack_push_d, 2},
    {"_cppcontainers_stack_push_s", (DL_FUNC) &_cppcontainers_stack_push_s, 2},
    {"_cppcontainers_stack_push_b", (DL_FUNC) &_cppcontainers_stack_push_b, 2},
    {"_cppcontainers_queue_push_i", (DL_FUNC) &_cppcontainers_queue_push_i, 2},
    {"_cppcontainers_queue_push_d", (DL_FUNC) &_cppcontainers_queue_push_d, 2},
    {"_cppcontainers_queue_push_s", (DL_FUNC) &_cppcontainers_queue_push_s, 2},
    {"_cppcontainers_queue_push_b", (DL_FUNC) &_cppcontainers_queue_push_b, 2},
    {"_cppcontainers_priority_queue_push_i_d", (DL_FUNC) &_cppcontainers_priority_queue_push_i_d, 2},
    {"_cppcontainers_priority_queue_push_d_d", (DL_FUNC) &_cppcontainers_priority_queue_push_d_d, 2},
    {"_cppcontainers_priority_queue_push_s_d", (DL_FUNC) &_cppcontainers_priority_queue_push_s_d, 2},
    {"_cppcontainers_priority_queue_push_b_d", (DL_FUNC) &_cppcontainers_priority_queue_push_b_d, 2},
    {"_cppcontainers_priority_queue_push_i_a", (DL_FUNC) &_cppcontainers_priority_queue_push_i_a, 2},
    {"_cppcontainers_priority_queue_push_d_a", (DL_FUNC) &_cppcontainers_priority_queue_push_d_a, 2},
    {"_cppcontainers_priority_queue_push_s_a", (DL_FUNC) &_cppcontainers_priority_queue_push_s_a, 2},
    {"_cppcontainers_priority_queue_push_b_a", (DL_FUNC) &_cppcontainers_priority_queue_push_b_a, 2},
    {"_cppcontainers_vector_push_back_i", (DL_FUNC) &_cppcontainers_vector_push_back_i, 2},
    {"_cppcontainers_vector_push_back_d", (DL_FUNC) &_cppcontainers_vector_push_back_d, 2},
    {"_cppcontainers_vector_push_back_s", (DL_FUNC) &_cppcontainers_vector_push_back_s, 2},
    {"_cppcontainers_vector_push_back_b", (DL_FUNC) &_cppcontainers_vector_push_back_b, 2},
    {"_cppcontainers_deque_push_back_i", (DL_FUNC) &_cppcontainers_deque_push_back_i, 2},
    {"_cppcontainers_deque_push_back_d", (DL_FUNC) &_cppcontainers_deque_push_back_d, 2},
    {"_cppcontainers_deque_push_back_s", (DL_FUNC) &_cppcontainers_deque_push_back_s, 2},
    {"_cppcontainers_deque_push_back_b", (DL_FUNC) &_cppcontainers_deque_push_back_b, 2},
    {"_cppcontainers_list_push_back_i", (DL_FUNC) &_cppcontainers_list_push_back_i, 2},
    {"_cppcontainers_list_push_back_d", (DL_FUNC) &_cppcontainers_list_push_back_d, 2},
    {"_cppcontainers_list_push_back_s", (DL_FUNC) &_cppcontainers_list_push_back_s, 2},
    {"_cppcontainers_list_push_back_b", (DL_FUNC) &_cppcontainers_list_push_back_b, 2},
    {"_cppcontainers_deque_push_front_i", (DL_FUNC) &_cppcontainers_deque_push_front_i, 2},
    {"_cppcontainers_deque_push_front_d", (DL_FUNC) &_cppcontainers_deque_push_front_d, 2},
    {"_cppcontainers_deque_push_front_s", (DL_FUNC) &_cppcontainers_deque_push_front_s, 2},
    {"_cppcontainers_deque_push_front_b", (DL_FUNC) &_cppcontainers_deque_push_front_b, 2},
    {"_cppcontainers_forward_list_push_front_i", (DL_FUNC) &_cppcontainers_forward_list_push_front_i, 2},
    {"_cppcontainers_forward_list_push_front_d", (DL_FUNC) &_cppcontainers_forward_list_push_front_d, 2},
    {"_cppcontainers_forward_list_push_front_s", (DL_FUNC) &_cppcontainers_forward_list_push_front_s, 2},
    {"_cppcontainers_forward_list_push_front_b", (DL_FUNC) &_cppcontainers_forward_list_push_front_b, 2},
    {"_cppcontainers_list_push_front_i", (DL_FUNC) &_cppcontainers_list_push_front_i, 2},
    {"_cppcontainers_list_push_front_d", (DL_FUNC) &_cppcontainers_list_push_front_d, 2},
    {"_cppcontainers_list_push_front_s", (DL_FUNC) &_cppcontainers_list_push_front_s, 2},
    {"_cppcontainers_list_push_front_b", (DL_FUNC) &_cppcontainers_list_push_front_b, 2},
    {"_cppcontainers_queue_i", (DL_FUNC) &_cppcontainers_queue_i, 1},
    {"_cppcontainers_queue_d", (DL_FUNC) &_cppcontainers_queue_d, 1},
    {"_cppcontainers_queue_s", (DL_FUNC) &_cppcontainers_queue_s, 1},
    {"_cppcontainers_queue_b", (DL_FUNC) &_cppcontainers_queue_b, 1},
    {"_cppcontainers_unordered_set_rehash_i", (DL_FUNC) &_cppcontainers_unordered_set_rehash_i, 2},
    {"_cppcontainers_unordered_set_rehash_d", (DL_FUNC) &_cppcontainers_unordered_set_rehash_d, 2},
    {"_cppcontainers_unordered_set_rehash_s", (DL_FUNC) &_cppcontainers_unordered_set_rehash_s, 2},
    {"_cppcontainers_unordered_set_rehash_b", (DL_FUNC) &_cppcontainers_unordered_set_rehash_b, 2},
    {"_cppcontainers_unordered_multiset_rehash_i", (DL_FUNC) &_cppcontainers_unordered_multiset_rehash_i, 2},
    {"_cppcontainers_unordered_multiset_rehash_d", (DL_FUNC) &_cppcontainers_unordered_multiset_rehash_d, 2},
    {"_cppcontainers_unordered_multiset_rehash_s", (DL_FUNC) &_cppcontainers_unordered_multiset_rehash_s, 2},
    {"_cppcontainers_unordered_multiset_rehash_b", (DL_FUNC) &_cppcontainers_unordered_multiset_rehash_b, 2},
    {"_cppcontainers_unordered_map_rehash_i_i", (DL_FUNC) &_cppcontainers_unordered_map_rehash_i_i, 2},
    {"_cppcontainers_unordered_map_rehash_i_d", (DL_FUNC) &_cppcontainers_unordered_map_rehash_i_d, 2},
    {"_cppcontainers_unordered_map_rehash_i_s", (DL_FUNC) &_cppcontainers_unordered_map_rehash_i_s, 2},
    {"_cppcontainers_unordered_map_rehash_i_b", (DL_FUNC) &_cppcontainers_unordered_map_rehash_i_b, 2},
    {"_cppcontainers_unordered_map_rehash_d_i", (DL_FUNC) &_cppcontainers_unordered_map_rehash_d_i, 2},
    {"_cppcontainers_unordered_map_rehash_d_d", (DL_FUNC) &_cppcontainers_unordered_map_rehash_d_d, 2},
    {"_cppcontainers_unordered_map_rehash_d_s", (DL_FUNC) &_cppcontainers_unordered_map_rehash_d_s, 2},
    {"_cppcontainers_unordered_map_rehash_d_b", (DL_FUNC) &_cppcontainers_unordered_map_rehash_d_b, 2},
    {"_cppcontainers_unordered_map_rehash_s_i", (DL_FUNC) &_cppcontainers_unordered_map_rehash_s_i, 2},
    {"_cppcontainers_unordered_map_rehash_s_d", (DL_FUNC) &_cppcontainers_unordered_map_rehash_s_d, 2},
    {"_cppcontainers_unordered_map_rehash_s_s", (DL_FUNC) &_cppcontainers_unordered_map_rehash_s_s, 2},
    {"_cppcontainers_unordered_map_rehash_s_b", (DL_FUNC) &_cppcontainers_unordered_map_rehash_s_b, 2},
    {"_cppcontainers_unordered_map_rehash_b_i", (DL_FUNC) &_cppcontainers_unordered_map_rehash_b_i, 2},
    {"_cppcontainers_unordered_map_rehash_b_d", (DL_FUNC) &_cppcontainers_unordered_map_rehash_b_d, 2},
    {"_cppcontainers_unordered_map_rehash_b_s", (DL_FUNC) &_cppcontainers_unordered_map_rehash_b_s, 2},
    {"_cppcontainers_unordered_map_rehash_b_b", (DL_FUNC) &_cppcontainers_unordered_map_rehash_b_b, 2},
    {"_cppcontainers_unordered_multimap_rehash_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_i_i, 2},
    {"_cppcontainers_unordered_multimap_rehash_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_i_d, 2},
    {"_cppcontainers_unordered_multimap_rehash_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_i_s, 2},
    {"_cppcontainers_unordered_multimap_rehash_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_i_b, 2},
    {"_cppcontainers_unordered_multimap_rehash_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_d_i, 2},
    {"_cppcontainers_unordered_multimap_rehash_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_d_d, 2},
    {"_cppcontainers_unordered_multimap_rehash_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_d_s, 2},
    {"_cppcontainers_unordered_multimap_rehash_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_d_b, 2},
    {"_cppcontainers_unordered_multimap_rehash_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_s_i, 2},
    {"_cppcontainers_unordered_multimap_rehash_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_s_d, 2},
    {"_cppcontainers_unordered_multimap_rehash_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_s_s, 2},
    {"_cppcontainers_unordered_multimap_rehash_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_s_b, 2},
    {"_cppcontainers_unordered_multimap_rehash_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_b_i, 2},
    {"_cppcontainers_unordered_multimap_rehash_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_b_d, 2},
    {"_cppcontainers_unordered_multimap_rehash_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_b_s, 2},
    {"_cppcontainers_unordered_multimap_rehash_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_rehash_b_b, 2},
    {"_cppcontainers_forward_list_remove_i", (DL_FUNC) &_cppcontainers_forward_list_remove_i, 2},
    {"_cppcontainers_forward_list_remove_d", (DL_FUNC) &_cppcontainers_forward_list_remove_d, 2},
    {"_cppcontainers_forward_list_remove_s", (DL_FUNC) &_cppcontainers_forward_list_remove_s, 2},
    {"_cppcontainers_forward_list_remove_b", (DL_FUNC) &_cppcontainers_forward_list_remove_b, 2},
    {"_cppcontainers_list_remove_i", (DL_FUNC) &_cppcontainers_list_remove_i, 2},
    {"_cppcontainers_list_remove_d", (DL_FUNC) &_cppcontainers_list_remove_d, 2},
    {"_cppcontainers_list_remove_s", (DL_FUNC) &_cppcontainers_list_remove_s, 2},
    {"_cppcontainers_list_remove_b", (DL_FUNC) &_cppcontainers_list_remove_b, 2},
    {"_cppcontainers_unordered_set_reserve_i", (DL_FUNC) &_cppcontainers_unordered_set_reserve_i, 2},
    {"_cppcontainers_unordered_set_reserve_d", (DL_FUNC) &_cppcontainers_unordered_set_reserve_d, 2},
    {"_cppcontainers_unordered_set_reserve_s", (DL_FUNC) &_cppcontainers_unordered_set_reserve_s, 2},
    {"_cppcontainers_unordered_set_reserve_b", (DL_FUNC) &_cppcontainers_unordered_set_reserve_b, 2},
    {"_cppcontainers_unordered_multiset_reserve_i", (DL_FUNC) &_cppcontainers_unordered_multiset_reserve_i, 2},
    {"_cppcontainers_unordered_multiset_reserve_d", (DL_FUNC) &_cppcontainers_unordered_multiset_reserve_d, 2},
    {"_cppcontainers_unordered_multiset_reserve_s", (DL_FUNC) &_cppcontainers_unordered_multiset_reserve_s, 2},
    {"_cppcontainers_unordered_multiset_reserve_b", (DL_FUNC) &_cppcontainers_unordered_multiset_reserve_b, 2},
    {"_cppcontainers_unordered_map_reserve_i_i", (DL_FUNC) &_cppcontainers_unordered_map_reserve_i_i, 2},
    {"_cppcontainers_unordered_map_reserve_i_d", (DL_FUNC) &_cppcontainers_unordered_map_reserve_i_d, 2},
    {"_cppcontainers_unordered_map_reserve_i_s", (DL_FUNC) &_cppcontainers_unordered_map_reserve_i_s, 2},
    {"_cppcontainers_unordered_map_reserve_i_b", (DL_FUNC) &_cppcontainers_unordered_map_reserve_i_b, 2},
    {"_cppcontainers_unordered_map_reserve_d_i", (DL_FUNC) &_cppcontainers_unordered_map_reserve_d_i, 2},
    {"_cppcontainers_unordered_map_reserve_d_d", (DL_FUNC) &_cppcontainers_unordered_map_reserve_d_d, 2},
    {"_cppcontainers_unordered_map_reserve_d_s", (DL_FUNC) &_cppcontainers_unordered_map_reserve_d_s, 2},
    {"_cppcontainers_unordered_map_reserve_d_b", (DL_FUNC) &_cppcontainers_unordered_map_reserve_d_b, 2},
    {"_cppcontainers_unordered_map_reserve_s_i", (DL_FUNC) &_cppcontainers_unordered_map_reserve_s_i, 2},
    {"_cppcontainers_unordered_map_reserve_s_d", (DL_FUNC) &_cppcontainers_unordered_map_reserve_s_d, 2},
    {"_cppcontainers_unordered_map_reserve_s_s", (DL_FUNC) &_cppcontainers_unordered_map_reserve_s_s, 2},
    {"_cppcontainers_unordered_map_reserve_s_b", (DL_FUNC) &_cppcontainers_unordered_map_reserve_s_b, 2},
    {"_cppcontainers_unordered_map_reserve_b_i", (DL_FUNC) &_cppcontainers_unordered_map_reserve_b_i, 2},
    {"_cppcontainers_unordered_map_reserve_b_d", (DL_FUNC) &_cppcontainers_unordered_map_reserve_b_d, 2},
    {"_cppcontainers_unordered_map_reserve_b_s", (DL_FUNC) &_cppcontainers_unordered_map_reserve_b_s, 2},
    {"_cppcontainers_unordered_map_reserve_b_b", (DL_FUNC) &_cppcontainers_unordered_map_reserve_b_b, 2},
    {"_cppcontainers_unordered_multimap_reserve_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_i_i, 2},
    {"_cppcontainers_unordered_multimap_reserve_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_i_d, 2},
    {"_cppcontainers_unordered_multimap_reserve_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_i_s, 2},
    {"_cppcontainers_unordered_multimap_reserve_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_i_b, 2},
    {"_cppcontainers_unordered_multimap_reserve_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_d_i, 2},
    {"_cppcontainers_unordered_multimap_reserve_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_d_d, 2},
    {"_cppcontainers_unordered_multimap_reserve_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_d_s, 2},
    {"_cppcontainers_unordered_multimap_reserve_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_d_b, 2},
    {"_cppcontainers_unordered_multimap_reserve_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_s_i, 2},
    {"_cppcontainers_unordered_multimap_reserve_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_s_d, 2},
    {"_cppcontainers_unordered_multimap_reserve_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_s_s, 2},
    {"_cppcontainers_unordered_multimap_reserve_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_s_b, 2},
    {"_cppcontainers_unordered_multimap_reserve_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_b_i, 2},
    {"_cppcontainers_unordered_multimap_reserve_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_b_d, 2},
    {"_cppcontainers_unordered_multimap_reserve_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_b_s, 2},
    {"_cppcontainers_unordered_multimap_reserve_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_reserve_b_b, 2},
    {"_cppcontainers_vector_reserve_i", (DL_FUNC) &_cppcontainers_vector_reserve_i, 2},
    {"_cppcontainers_vector_reserve_d", (DL_FUNC) &_cppcontainers_vector_reserve_d, 2},
    {"_cppcontainers_vector_reserve_s", (DL_FUNC) &_cppcontainers_vector_reserve_s, 2},
    {"_cppcontainers_vector_reserve_b", (DL_FUNC) &_cppcontainers_vector_reserve_b, 2},
    {"_cppcontainers_vector_resize_i", (DL_FUNC) &_cppcontainers_vector_resize_i, 3},
    {"_cppcontainers_vector_resize_d", (DL_FUNC) &_cppcontainers_vector_resize_d, 3},
    {"_cppcontainers_vector_resize_s", (DL_FUNC) &_cppcontainers_vector_resize_s, 3},
    {"_cppcontainers_vector_resize_b", (DL_FUNC) &_cppcontainers_vector_resize_b, 3},
    {"_cppcontainers_deque_resize_i", (DL_FUNC) &_cppcontainers_deque_resize_i, 3},
    {"_cppcontainers_deque_resize_d", (DL_FUNC) &_cppcontainers_deque_resize_d, 3},
    {"_cppcontainers_deque_resize_s", (DL_FUNC) &_cppcontainers_deque_resize_s, 3},
    {"_cppcontainers_deque_resize_b", (DL_FUNC) &_cppcontainers_deque_resize_b, 3},
    {"_cppcontainers_forward_list_resize_i", (DL_FUNC) &_cppcontainers_forward_list_resize_i, 3},
    {"_cppcontainers_forward_list_resize_d", (DL_FUNC) &_cppcontainers_forward_list_resize_d, 3},
    {"_cppcontainers_forward_list_resize_s", (DL_FUNC) &_cppcontainers_forward_list_resize_s, 3},
    {"_cppcontainers_forward_list_resize_b", (DL_FUNC) &_cppcontainers_forward_list_resize_b, 3},
    {"_cppcontainers_list_resize_i", (DL_FUNC) &_cppcontainers_list_resize_i, 3},
    {"_cppcontainers_list_resize_d", (DL_FUNC) &_cppcontainers_list_resize_d, 3},
    {"_cppcontainers_list_resize_s", (DL_FUNC) &_cppcontainers_list_resize_s, 3},
    {"_cppcontainers_list_resize_b", (DL_FUNC) &_cppcontainers_list_resize_b, 3},
    {"_cppcontainers_forward_list_reverse_i", (DL_FUNC) &_cppcontainers_forward_list_reverse_i, 1},
    {"_cppcontainers_forward_list_reverse_d", (DL_FUNC) &_cppcontainers_forward_list_reverse_d, 1},
    {"_cppcontainers_forward_list_reverse_s", (DL_FUNC) &_cppcontainers_forward_list_reverse_s, 1},
    {"_cppcontainers_forward_list_reverse_b", (DL_FUNC) &_cppcontainers_forward_list_reverse_b, 1},
    {"_cppcontainers_list_reverse_i", (DL_FUNC) &_cppcontainers_list_reverse_i, 1},
    {"_cppcontainers_list_reverse_d", (DL_FUNC) &_cppcontainers_list_reverse_d, 1},
    {"_cppcontainers_list_reverse_s", (DL_FUNC) &_cppcontainers_list_reverse_s, 1},
    {"_cppcontainers_list_reverse_b", (DL_FUNC) &_cppcontainers_list_reverse_b, 1},
    {"_cppcontainers_set_i", (DL_FUNC) &_cppcontainers_set_i, 1},
    {"_cppcontainers_set_d", (DL_FUNC) &_cppcontainers_set_d, 1},
    {"_cppcontainers_set_s", (DL_FUNC) &_cppcontainers_set_s, 1},
    {"_cppcontainers_set_b", (DL_FUNC) &_cppcontainers_set_b, 1},
    {"_cppcontainers_set_show_i", (DL_FUNC) &_cppcontainers_set_show_i, 1},
    {"_cppcontainers_set_show_d", (DL_FUNC) &_cppcontainers_set_show_d, 1},
    {"_cppcontainers_set_show_s", (DL_FUNC) &_cppcontainers_set_show_s, 1},
    {"_cppcontainers_set_show_b", (DL_FUNC) &_cppcontainers_set_show_b, 1},
    {"_cppcontainers_unordered_set_show_i", (DL_FUNC) &_cppcontainers_unordered_set_show_i, 1},
    {"_cppcontainers_unordered_set_show_d", (DL_FUNC) &_cppcontainers_unordered_set_show_d, 1},
    {"_cppcontainers_unordered_set_show_s", (DL_FUNC) &_cppcontainers_unordered_set_show_s, 1},
    {"_cppcontainers_unordered_set_show_b", (DL_FUNC) &_cppcontainers_unordered_set_show_b, 1},
    {"_cppcontainers_multiset_show_i", (DL_FUNC) &_cppcontainers_multiset_show_i, 1},
    {"_cppcontainers_multiset_show_d", (DL_FUNC) &_cppcontainers_multiset_show_d, 1},
    {"_cppcontainers_multiset_show_s", (DL_FUNC) &_cppcontainers_multiset_show_s, 1},
    {"_cppcontainers_multiset_show_b", (DL_FUNC) &_cppcontainers_multiset_show_b, 1},
    {"_cppcontainers_unordered_multiset_show_i", (DL_FUNC) &_cppcontainers_unordered_multiset_show_i, 1},
    {"_cppcontainers_unordered_multiset_show_d", (DL_FUNC) &_cppcontainers_unordered_multiset_show_d, 1},
    {"_cppcontainers_unordered_multiset_show_s", (DL_FUNC) &_cppcontainers_unordered_multiset_show_s, 1},
    {"_cppcontainers_unordered_multiset_show_b", (DL_FUNC) &_cppcontainers_unordered_multiset_show_b, 1},
    {"_cppcontainers_map_show_i_i", (DL_FUNC) &_cppcontainers_map_show_i_i, 1},
    {"_cppcontainers_map_show_i_d", (DL_FUNC) &_cppcontainers_map_show_i_d, 1},
    {"_cppcontainers_map_show_i_s", (DL_FUNC) &_cppcontainers_map_show_i_s, 1},
    {"_cppcontainers_map_show_i_b", (DL_FUNC) &_cppcontainers_map_show_i_b, 1},
    {"_cppcontainers_map_show_d_i", (DL_FUNC) &_cppcontainers_map_show_d_i, 1},
    {"_cppcontainers_map_show_d_d", (DL_FUNC) &_cppcontainers_map_show_d_d, 1},
    {"_cppcontainers_map_show_d_s", (DL_FUNC) &_cppcontainers_map_show_d_s, 1},
    {"_cppcontainers_map_show_d_b", (DL_FUNC) &_cppcontainers_map_show_d_b, 1},
    {"_cppcontainers_map_show_s_i", (DL_FUNC) &_cppcontainers_map_show_s_i, 1},
    {"_cppcontainers_map_show_s_d", (DL_FUNC) &_cppcontainers_map_show_s_d, 1},
    {"_cppcontainers_map_show_s_s", (DL_FUNC) &_cppcontainers_map_show_s_s, 1},
    {"_cppcontainers_map_show_s_b", (DL_FUNC) &_cppcontainers_map_show_s_b, 1},
    {"_cppcontainers_map_show_b_i", (DL_FUNC) &_cppcontainers_map_show_b_i, 1},
    {"_cppcontainers_map_show_b_d", (DL_FUNC) &_cppcontainers_map_show_b_d, 1},
    {"_cppcontainers_map_show_b_s", (DL_FUNC) &_cppcontainers_map_show_b_s, 1},
    {"_cppcontainers_map_show_b_b", (DL_FUNC) &_cppcontainers_map_show_b_b, 1},
    {"_cppcontainers_unordered_map_show_i_i", (DL_FUNC) &_cppcontainers_unordered_map_show_i_i, 1},
    {"_cppcontainers_unordered_map_show_i_d", (DL_FUNC) &_cppcontainers_unordered_map_show_i_d, 1},
    {"_cppcontainers_unordered_map_show_i_s", (DL_FUNC) &_cppcontainers_unordered_map_show_i_s, 1},
    {"_cppcontainers_unordered_map_show_i_b", (DL_FUNC) &_cppcontainers_unordered_map_show_i_b, 1},
    {"_cppcontainers_unordered_map_show_d_i", (DL_FUNC) &_cppcontainers_unordered_map_show_d_i, 1},
    {"_cppcontainers_unordered_map_show_d_d", (DL_FUNC) &_cppcontainers_unordered_map_show_d_d, 1},
    {"_cppcontainers_unordered_map_show_d_s", (DL_FUNC) &_cppcontainers_unordered_map_show_d_s, 1},
    {"_cppcontainers_unordered_map_show_d_b", (DL_FUNC) &_cppcontainers_unordered_map_show_d_b, 1},
    {"_cppcontainers_unordered_map_show_s_i", (DL_FUNC) &_cppcontainers_unordered_map_show_s_i, 1},
    {"_cppcontainers_unordered_map_show_s_d", (DL_FUNC) &_cppcontainers_unordered_map_show_s_d, 1},
    {"_cppcontainers_unordered_map_show_s_s", (DL_FUNC) &_cppcontainers_unordered_map_show_s_s, 1},
    {"_cppcontainers_unordered_map_show_s_b", (DL_FUNC) &_cppcontainers_unordered_map_show_s_b, 1},
    {"_cppcontainers_unordered_map_show_b_i", (DL_FUNC) &_cppcontainers_unordered_map_show_b_i, 1},
    {"_cppcontainers_unordered_map_show_b_d", (DL_FUNC) &_cppcontainers_unordered_map_show_b_d, 1},
    {"_cppcontainers_unordered_map_show_b_s", (DL_FUNC) &_cppcontainers_unordered_map_show_b_s, 1},
    {"_cppcontainers_unordered_map_show_b_b", (DL_FUNC) &_cppcontainers_unordered_map_show_b_b, 1},
    {"_cppcontainers_multimap_show_i_i", (DL_FUNC) &_cppcontainers_multimap_show_i_i, 1},
    {"_cppcontainers_multimap_show_i_d", (DL_FUNC) &_cppcontainers_multimap_show_i_d, 1},
    {"_cppcontainers_multimap_show_i_s", (DL_FUNC) &_cppcontainers_multimap_show_i_s, 1},
    {"_cppcontainers_multimap_show_i_b", (DL_FUNC) &_cppcontainers_multimap_show_i_b, 1},
    {"_cppcontainers_multimap_show_d_i", (DL_FUNC) &_cppcontainers_multimap_show_d_i, 1},
    {"_cppcontainers_multimap_show_d_d", (DL_FUNC) &_cppcontainers_multimap_show_d_d, 1},
    {"_cppcontainers_multimap_show_d_s", (DL_FUNC) &_cppcontainers_multimap_show_d_s, 1},
    {"_cppcontainers_multimap_show_d_b", (DL_FUNC) &_cppcontainers_multimap_show_d_b, 1},
    {"_cppcontainers_multimap_show_s_i", (DL_FUNC) &_cppcontainers_multimap_show_s_i, 1},
    {"_cppcontainers_multimap_show_s_d", (DL_FUNC) &_cppcontainers_multimap_show_s_d, 1},
    {"_cppcontainers_multimap_show_s_s", (DL_FUNC) &_cppcontainers_multimap_show_s_s, 1},
    {"_cppcontainers_multimap_show_s_b", (DL_FUNC) &_cppcontainers_multimap_show_s_b, 1},
    {"_cppcontainers_multimap_show_b_i", (DL_FUNC) &_cppcontainers_multimap_show_b_i, 1},
    {"_cppcontainers_multimap_show_b_d", (DL_FUNC) &_cppcontainers_multimap_show_b_d, 1},
    {"_cppcontainers_multimap_show_b_s", (DL_FUNC) &_cppcontainers_multimap_show_b_s, 1},
    {"_cppcontainers_multimap_show_b_b", (DL_FUNC) &_cppcontainers_multimap_show_b_b, 1},
    {"_cppcontainers_unordered_multimap_show_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_show_i_i, 1},
    {"_cppcontainers_unordered_multimap_show_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_show_i_d, 1},
    {"_cppcontainers_unordered_multimap_show_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_show_i_s, 1},
    {"_cppcontainers_unordered_multimap_show_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_show_i_b, 1},
    {"_cppcontainers_unordered_multimap_show_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_show_d_i, 1},
    {"_cppcontainers_unordered_multimap_show_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_show_d_d, 1},
    {"_cppcontainers_unordered_multimap_show_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_show_d_s, 1},
    {"_cppcontainers_unordered_multimap_show_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_show_d_b, 1},
    {"_cppcontainers_unordered_multimap_show_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_show_s_i, 1},
    {"_cppcontainers_unordered_multimap_show_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_show_s_d, 1},
    {"_cppcontainers_unordered_multimap_show_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_show_s_s, 1},
    {"_cppcontainers_unordered_multimap_show_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_show_s_b, 1},
    {"_cppcontainers_unordered_multimap_show_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_show_b_i, 1},
    {"_cppcontainers_unordered_multimap_show_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_show_b_d, 1},
    {"_cppcontainers_unordered_multimap_show_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_show_b_s, 1},
    {"_cppcontainers_unordered_multimap_show_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_show_b_b, 1},
    {"_cppcontainers_stack_show_i", (DL_FUNC) &_cppcontainers_stack_show_i, 1},
    {"_cppcontainers_stack_show_d", (DL_FUNC) &_cppcontainers_stack_show_d, 1},
    {"_cppcontainers_stack_show_s", (DL_FUNC) &_cppcontainers_stack_show_s, 1},
    {"_cppcontainers_stack_show_b", (DL_FUNC) &_cppcontainers_stack_show_b, 1},
    {"_cppcontainers_queue_show_i", (DL_FUNC) &_cppcontainers_queue_show_i, 1},
    {"_cppcontainers_queue_show_d", (DL_FUNC) &_cppcontainers_queue_show_d, 1},
    {"_cppcontainers_queue_show_s", (DL_FUNC) &_cppcontainers_queue_show_s, 1},
    {"_cppcontainers_queue_show_b", (DL_FUNC) &_cppcontainers_queue_show_b, 1},
    {"_cppcontainers_priority_queue_show_i_d", (DL_FUNC) &_cppcontainers_priority_queue_show_i_d, 1},
    {"_cppcontainers_priority_queue_show_d_d", (DL_FUNC) &_cppcontainers_priority_queue_show_d_d, 1},
    {"_cppcontainers_priority_queue_show_s_d", (DL_FUNC) &_cppcontainers_priority_queue_show_s_d, 1},
    {"_cppcontainers_priority_queue_show_b_d", (DL_FUNC) &_cppcontainers_priority_queue_show_b_d, 1},
    {"_cppcontainers_priority_queue_show_i_a", (DL_FUNC) &_cppcontainers_priority_queue_show_i_a, 1},
    {"_cppcontainers_priority_queue_show_d_a", (DL_FUNC) &_cppcontainers_priority_queue_show_d_a, 1},
    {"_cppcontainers_priority_queue_show_s_a", (DL_FUNC) &_cppcontainers_priority_queue_show_s_a, 1},
    {"_cppcontainers_priority_queue_show_b_a", (DL_FUNC) &_cppcontainers_priority_queue_show_b_a, 1},
    {"_cppcontainers_vector_show_i", (DL_FUNC) &_cppcontainers_vector_show_i, 1},
    {"_cppcontainers_vector_show_d", (DL_FUNC) &_cppcontainers_vector_show_d, 1},
    {"_cppcontainers_vector_show_s", (DL_FUNC) &_cppcontainers_vector_show_s, 1},
    {"_cppcontainers_vector_show_b", (DL_FUNC) &_cppcontainers_vector_show_b, 1},
    {"_cppcontainers_deque_show_i", (DL_FUNC) &_cppcontainers_deque_show_i, 1},
    {"_cppcontainers_deque_show_d", (DL_FUNC) &_cppcontainers_deque_show_d, 1},
    {"_cppcontainers_deque_show_s", (DL_FUNC) &_cppcontainers_deque_show_s, 1},
    {"_cppcontainers_deque_show_b", (DL_FUNC) &_cppcontainers_deque_show_b, 1},
    {"_cppcontainers_forward_list_show_i", (DL_FUNC) &_cppcontainers_forward_list_show_i, 1},
    {"_cppcontainers_forward_list_show_d", (DL_FUNC) &_cppcontainers_forward_list_show_d, 1},
    {"_cppcontainers_forward_list_show_s", (DL_FUNC) &_cppcontainers_forward_list_show_s, 1},
    {"_cppcontainers_forward_list_show_b", (DL_FUNC) &_cppcontainers_forward_list_show_b, 1},
    {"_cppcontainers_list_show_i", (DL_FUNC) &_cppcontainers_list_show_i, 1},
    {"_cppcontainers_list_show_d", (DL_FUNC) &_cppcontainers_list_show_d, 1},
    {"_cppcontainers_list_show_s", (DL_FUNC) &_cppcontainers_list_show_s, 1},
    {"_cppcontainers_list_show_b", (DL_FUNC) &_cppcontainers_list_show_b, 1},
    {"_cppcontainers_vector_shrink_to_fit_i", (DL_FUNC) &_cppcontainers_vector_shrink_to_fit_i, 1},
    {"_cppcontainers_vector_shrink_to_fit_d", (DL_FUNC) &_cppcontainers_vector_shrink_to_fit_d, 1},
    {"_cppcontainers_vector_shrink_to_fit_s", (DL_FUNC) &_cppcontainers_vector_shrink_to_fit_s, 1},
    {"_cppcontainers_vector_shrink_to_fit_b", (DL_FUNC) &_cppcontainers_vector_shrink_to_fit_b, 1},
    {"_cppcontainers_deque_shrink_to_fit_i", (DL_FUNC) &_cppcontainers_deque_shrink_to_fit_i, 1},
    {"_cppcontainers_deque_shrink_to_fit_d", (DL_FUNC) &_cppcontainers_deque_shrink_to_fit_d, 1},
    {"_cppcontainers_deque_shrink_to_fit_s", (DL_FUNC) &_cppcontainers_deque_shrink_to_fit_s, 1},
    {"_cppcontainers_deque_shrink_to_fit_b", (DL_FUNC) &_cppcontainers_deque_shrink_to_fit_b, 1},
    {"_cppcontainers_set_size_i", (DL_FUNC) &_cppcontainers_set_size_i, 1},
    {"_cppcontainers_set_size_d", (DL_FUNC) &_cppcontainers_set_size_d, 1},
    {"_cppcontainers_set_size_s", (DL_FUNC) &_cppcontainers_set_size_s, 1},
    {"_cppcontainers_set_size_b", (DL_FUNC) &_cppcontainers_set_size_b, 1},
    {"_cppcontainers_unordered_set_size_i", (DL_FUNC) &_cppcontainers_unordered_set_size_i, 1},
    {"_cppcontainers_unordered_set_size_d", (DL_FUNC) &_cppcontainers_unordered_set_size_d, 1},
    {"_cppcontainers_unordered_set_size_s", (DL_FUNC) &_cppcontainers_unordered_set_size_s, 1},
    {"_cppcontainers_unordered_set_size_b", (DL_FUNC) &_cppcontainers_unordered_set_size_b, 1},
    {"_cppcontainers_multiset_size_i", (DL_FUNC) &_cppcontainers_multiset_size_i, 1},
    {"_cppcontainers_multiset_size_d", (DL_FUNC) &_cppcontainers_multiset_size_d, 1},
    {"_cppcontainers_multiset_size_s", (DL_FUNC) &_cppcontainers_multiset_size_s, 1},
    {"_cppcontainers_multiset_size_b", (DL_FUNC) &_cppcontainers_multiset_size_b, 1},
    {"_cppcontainers_unordered_multiset_size_i", (DL_FUNC) &_cppcontainers_unordered_multiset_size_i, 1},
    {"_cppcontainers_unordered_multiset_size_d", (DL_FUNC) &_cppcontainers_unordered_multiset_size_d, 1},
    {"_cppcontainers_unordered_multiset_size_s", (DL_FUNC) &_cppcontainers_unordered_multiset_size_s, 1},
    {"_cppcontainers_unordered_multiset_size_b", (DL_FUNC) &_cppcontainers_unordered_multiset_size_b, 1},
    {"_cppcontainers_map_size_i_i", (DL_FUNC) &_cppcontainers_map_size_i_i, 1},
    {"_cppcontainers_map_size_i_d", (DL_FUNC) &_cppcontainers_map_size_i_d, 1},
    {"_cppcontainers_map_size_i_s", (DL_FUNC) &_cppcontainers_map_size_i_s, 1},
    {"_cppcontainers_map_size_i_b", (DL_FUNC) &_cppcontainers_map_size_i_b, 1},
    {"_cppcontainers_map_size_d_i", (DL_FUNC) &_cppcontainers_map_size_d_i, 1},
    {"_cppcontainers_map_size_d_d", (DL_FUNC) &_cppcontainers_map_size_d_d, 1},
    {"_cppcontainers_map_size_d_s", (DL_FUNC) &_cppcontainers_map_size_d_s, 1},
    {"_cppcontainers_map_size_d_b", (DL_FUNC) &_cppcontainers_map_size_d_b, 1},
    {"_cppcontainers_map_size_s_i", (DL_FUNC) &_cppcontainers_map_size_s_i, 1},
    {"_cppcontainers_map_size_s_d", (DL_FUNC) &_cppcontainers_map_size_s_d, 1},
    {"_cppcontainers_map_size_s_s", (DL_FUNC) &_cppcontainers_map_size_s_s, 1},
    {"_cppcontainers_map_size_s_b", (DL_FUNC) &_cppcontainers_map_size_s_b, 1},
    {"_cppcontainers_map_size_b_i", (DL_FUNC) &_cppcontainers_map_size_b_i, 1},
    {"_cppcontainers_map_size_b_d", (DL_FUNC) &_cppcontainers_map_size_b_d, 1},
    {"_cppcontainers_map_size_b_s", (DL_FUNC) &_cppcontainers_map_size_b_s, 1},
    {"_cppcontainers_map_size_b_b", (DL_FUNC) &_cppcontainers_map_size_b_b, 1},
    {"_cppcontainers_unordered_map_size_i_i", (DL_FUNC) &_cppcontainers_unordered_map_size_i_i, 1},
    {"_cppcontainers_unordered_map_size_i_d", (DL_FUNC) &_cppcontainers_unordered_map_size_i_d, 1},
    {"_cppcontainers_unordered_map_size_i_s", (DL_FUNC) &_cppcontainers_unordered_map_size_i_s, 1},
    {"_cppcontainers_unordered_map_size_i_b", (DL_FUNC) &_cppcontainers_unordered_map_size_i_b, 1},
    {"_cppcontainers_unordered_map_size_d_i", (DL_FUNC) &_cppcontainers_unordered_map_size_d_i, 1},
    {"_cppcontainers_unordered_map_size_d_d", (DL_FUNC) &_cppcontainers_unordered_map_size_d_d, 1},
    {"_cppcontainers_unordered_map_size_d_s", (DL_FUNC) &_cppcontainers_unordered_map_size_d_s, 1},
    {"_cppcontainers_unordered_map_size_d_b", (DL_FUNC) &_cppcontainers_unordered_map_size_d_b, 1},
    {"_cppcontainers_unordered_map_size_s_i", (DL_FUNC) &_cppcontainers_unordered_map_size_s_i, 1},
    {"_cppcontainers_unordered_map_size_s_d", (DL_FUNC) &_cppcontainers_unordered_map_size_s_d, 1},
    {"_cppcontainers_unordered_map_size_s_s", (DL_FUNC) &_cppcontainers_unordered_map_size_s_s, 1},
    {"_cppcontainers_unordered_map_size_s_b", (DL_FUNC) &_cppcontainers_unordered_map_size_s_b, 1},
    {"_cppcontainers_unordered_map_size_b_i", (DL_FUNC) &_cppcontainers_unordered_map_size_b_i, 1},
    {"_cppcontainers_unordered_map_size_b_d", (DL_FUNC) &_cppcontainers_unordered_map_size_b_d, 1},
    {"_cppcontainers_unordered_map_size_b_s", (DL_FUNC) &_cppcontainers_unordered_map_size_b_s, 1},
    {"_cppcontainers_unordered_map_size_b_b", (DL_FUNC) &_cppcontainers_unordered_map_size_b_b, 1},
    {"_cppcontainers_multimap_size_i_i", (DL_FUNC) &_cppcontainers_multimap_size_i_i, 1},
    {"_cppcontainers_multimap_size_i_d", (DL_FUNC) &_cppcontainers_multimap_size_i_d, 1},
    {"_cppcontainers_multimap_size_i_s", (DL_FUNC) &_cppcontainers_multimap_size_i_s, 1},
    {"_cppcontainers_multimap_size_i_b", (DL_FUNC) &_cppcontainers_multimap_size_i_b, 1},
    {"_cppcontainers_multimap_size_d_i", (DL_FUNC) &_cppcontainers_multimap_size_d_i, 1},
    {"_cppcontainers_multimap_size_d_d", (DL_FUNC) &_cppcontainers_multimap_size_d_d, 1},
    {"_cppcontainers_multimap_size_d_s", (DL_FUNC) &_cppcontainers_multimap_size_d_s, 1},
    {"_cppcontainers_multimap_size_d_b", (DL_FUNC) &_cppcontainers_multimap_size_d_b, 1},
    {"_cppcontainers_multimap_size_s_i", (DL_FUNC) &_cppcontainers_multimap_size_s_i, 1},
    {"_cppcontainers_multimap_size_s_d", (DL_FUNC) &_cppcontainers_multimap_size_s_d, 1},
    {"_cppcontainers_multimap_size_s_s", (DL_FUNC) &_cppcontainers_multimap_size_s_s, 1},
    {"_cppcontainers_multimap_size_s_b", (DL_FUNC) &_cppcontainers_multimap_size_s_b, 1},
    {"_cppcontainers_multimap_size_b_i", (DL_FUNC) &_cppcontainers_multimap_size_b_i, 1},
    {"_cppcontainers_multimap_size_b_d", (DL_FUNC) &_cppcontainers_multimap_size_b_d, 1},
    {"_cppcontainers_multimap_size_b_s", (DL_FUNC) &_cppcontainers_multimap_size_b_s, 1},
    {"_cppcontainers_multimap_size_b_b", (DL_FUNC) &_cppcontainers_multimap_size_b_b, 1},
    {"_cppcontainers_unordered_multimap_size_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_size_i_i, 1},
    {"_cppcontainers_unordered_multimap_size_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_size_i_d, 1},
    {"_cppcontainers_unordered_multimap_size_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_size_i_s, 1},
    {"_cppcontainers_unordered_multimap_size_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_size_i_b, 1},
    {"_cppcontainers_unordered_multimap_size_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_size_d_i, 1},
    {"_cppcontainers_unordered_multimap_size_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_size_d_d, 1},
    {"_cppcontainers_unordered_multimap_size_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_size_d_s, 1},
    {"_cppcontainers_unordered_multimap_size_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_size_d_b, 1},
    {"_cppcontainers_unordered_multimap_size_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_size_s_i, 1},
    {"_cppcontainers_unordered_multimap_size_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_size_s_d, 1},
    {"_cppcontainers_unordered_multimap_size_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_size_s_s, 1},
    {"_cppcontainers_unordered_multimap_size_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_size_s_b, 1},
    {"_cppcontainers_unordered_multimap_size_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_size_b_i, 1},
    {"_cppcontainers_unordered_multimap_size_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_size_b_d, 1},
    {"_cppcontainers_unordered_multimap_size_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_size_b_s, 1},
    {"_cppcontainers_unordered_multimap_size_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_size_b_b, 1},
    {"_cppcontainers_stack_size_i", (DL_FUNC) &_cppcontainers_stack_size_i, 1},
    {"_cppcontainers_stack_size_d", (DL_FUNC) &_cppcontainers_stack_size_d, 1},
    {"_cppcontainers_stack_size_s", (DL_FUNC) &_cppcontainers_stack_size_s, 1},
    {"_cppcontainers_stack_size_b", (DL_FUNC) &_cppcontainers_stack_size_b, 1},
    {"_cppcontainers_queue_size_i", (DL_FUNC) &_cppcontainers_queue_size_i, 1},
    {"_cppcontainers_queue_size_d", (DL_FUNC) &_cppcontainers_queue_size_d, 1},
    {"_cppcontainers_queue_size_s", (DL_FUNC) &_cppcontainers_queue_size_s, 1},
    {"_cppcontainers_queue_size_b", (DL_FUNC) &_cppcontainers_queue_size_b, 1},
    {"_cppcontainers_priority_queue_size_i_d", (DL_FUNC) &_cppcontainers_priority_queue_size_i_d, 1},
    {"_cppcontainers_priority_queue_size_d_d", (DL_FUNC) &_cppcontainers_priority_queue_size_d_d, 1},
    {"_cppcontainers_priority_queue_size_s_d", (DL_FUNC) &_cppcontainers_priority_queue_size_s_d, 1},
    {"_cppcontainers_priority_queue_size_b_d", (DL_FUNC) &_cppcontainers_priority_queue_size_b_d, 1},
    {"_cppcontainers_priority_queue_size_i_a", (DL_FUNC) &_cppcontainers_priority_queue_size_i_a, 1},
    {"_cppcontainers_priority_queue_size_d_a", (DL_FUNC) &_cppcontainers_priority_queue_size_d_a, 1},
    {"_cppcontainers_priority_queue_size_s_a", (DL_FUNC) &_cppcontainers_priority_queue_size_s_a, 1},
    {"_cppcontainers_priority_queue_size_b_a", (DL_FUNC) &_cppcontainers_priority_queue_size_b_a, 1},
    {"_cppcontainers_vector_size_i", (DL_FUNC) &_cppcontainers_vector_size_i, 1},
    {"_cppcontainers_vector_size_d", (DL_FUNC) &_cppcontainers_vector_size_d, 1},
    {"_cppcontainers_vector_size_s", (DL_FUNC) &_cppcontainers_vector_size_s, 1},
    {"_cppcontainers_vector_size_b", (DL_FUNC) &_cppcontainers_vector_size_b, 1},
    {"_cppcontainers_deque_size_i", (DL_FUNC) &_cppcontainers_deque_size_i, 1},
    {"_cppcontainers_deque_size_d", (DL_FUNC) &_cppcontainers_deque_size_d, 1},
    {"_cppcontainers_deque_size_s", (DL_FUNC) &_cppcontainers_deque_size_s, 1},
    {"_cppcontainers_deque_size_b", (DL_FUNC) &_cppcontainers_deque_size_b, 1},
    {"_cppcontainers_list_size_i", (DL_FUNC) &_cppcontainers_list_size_i, 1},
    {"_cppcontainers_list_size_d", (DL_FUNC) &_cppcontainers_list_size_d, 1},
    {"_cppcontainers_list_size_s", (DL_FUNC) &_cppcontainers_list_size_s, 1},
    {"_cppcontainers_list_size_b", (DL_FUNC) &_cppcontainers_list_size_b, 1},
    {"_cppcontainers_forward_list_sort_i", (DL_FUNC) &_cppcontainers_forward_list_sort_i, 1},
    {"_cppcontainers_forward_list_sort_d", (DL_FUNC) &_cppcontainers_forward_list_sort_d, 1},
    {"_cppcontainers_forward_list_sort_s", (DL_FUNC) &_cppcontainers_forward_list_sort_s, 1},
    {"_cppcontainers_forward_list_sort_b", (DL_FUNC) &_cppcontainers_forward_list_sort_b, 1},
    {"_cppcontainers_list_sort_i", (DL_FUNC) &_cppcontainers_list_sort_i, 1},
    {"_cppcontainers_list_sort_d", (DL_FUNC) &_cppcontainers_list_sort_d, 1},
    {"_cppcontainers_list_sort_s", (DL_FUNC) &_cppcontainers_list_sort_s, 1},
    {"_cppcontainers_list_sort_b", (DL_FUNC) &_cppcontainers_list_sort_b, 1},
    {"_cppcontainers_list_splice_i", (DL_FUNC) &_cppcontainers_list_splice_i, 5},
    {"_cppcontainers_list_splice_d", (DL_FUNC) &_cppcontainers_list_splice_d, 5},
    {"_cppcontainers_list_splice_s", (DL_FUNC) &_cppcontainers_list_splice_s, 5},
    {"_cppcontainers_list_splice_b", (DL_FUNC) &_cppcontainers_list_splice_b, 5},
    {"_cppcontainers_forward_list_splice_after_i", (DL_FUNC) &_cppcontainers_forward_list_splice_after_i, 5},
    {"_cppcontainers_forward_list_splice_after_d", (DL_FUNC) &_cppcontainers_forward_list_splice_after_d, 5},
    {"_cppcontainers_forward_list_splice_after_s", (DL_FUNC) &_cppcontainers_forward_list_splice_after_s, 5},
    {"_cppcontainers_forward_list_splice_after_b", (DL_FUNC) &_cppcontainers_forward_list_splice_after_b, 5},
    {"_cppcontainers_stack_i", (DL_FUNC) &_cppcontainers_stack_i, 1},
    {"_cppcontainers_stack_d", (DL_FUNC) &_cppcontainers_stack_d, 1},
    {"_cppcontainers_stack_s", (DL_FUNC) &_cppcontainers_stack_s, 1},
    {"_cppcontainers_stack_b", (DL_FUNC) &_cppcontainers_stack_b, 1},
    {"_cppcontainers_set_to_r_i", (DL_FUNC) &_cppcontainers_set_to_r_i, 8},
    {"_cppcontainers_set_to_r_d", (DL_FUNC) &_cppcontainers_set_to_r_d, 8},
    {"_cppcontainers_set_to_r_s", (DL_FUNC) &_cppcontainers_set_to_r_s, 8},
    {"_cppcontainers_set_to_r_b", (DL_FUNC) &_cppcontainers_set_to_r_b, 8},
    {"_cppcontainers_unordered_set_to_r_i", (DL_FUNC) &_cppcontainers_unordered_set_to_r_i, 2},
    {"_cppcontainers_unordered_set_to_r_d", (DL_FUNC) &_cppcontainers_unordered_set_to_r_d, 2},
    {"_cppcontainers_unordered_set_to_r_s", (DL_FUNC) &_cppcontainers_unordered_set_to_r_s, 2},
    {"_cppcontainers_unordered_set_to_r_b", (DL_FUNC) &_cppcontainers_unordered_set_to_r_b, 2},
    {"_cppcontainers_multiset_to_r_i", (DL_FUNC) &_cppcontainers_multiset_to_r_i, 8},
    {"_cppcontainers_multiset_to_r_d", (DL_FUNC) &_cppcontainers_multiset_to_r_d, 8},
    {"_cppcontainers_multiset_to_r_s", (DL_FUNC) &_cppcontainers_multiset_to_r_s, 8},
    {"_cppcontainers_multiset_to_r_b", (DL_FUNC) &_cppcontainers_multiset_to_r_b, 8},
    {"_cppcontainers_unordered_multiset_to_r_i", (DL_FUNC) &_cppcontainers_unordered_multiset_to_r_i, 2},
    {"_cppcontainers_unordered_multiset_to_r_d", (DL_FUNC) &_cppcontainers_unordered_multiset_to_r_d, 2},
    {"_cppcontainers_unordered_multiset_to_r_s", (DL_FUNC) &_cppcontainers_unordered_multiset_to_r_s, 2},
    {"_cppcontainers_unordered_multiset_to_r_b", (DL_FUNC) &_cppcontainers_unordered_multiset_to_r_b, 2},
    {"_cppcontainers_map_to_r_i_i", (DL_FUNC) &_cppcontainers_map_to_r_i_i, 8},
    {"_cppcontainers_map_to_r_i_d", (DL_FUNC) &_cppcontainers_map_to_r_i_d, 8},
    {"_cppcontainers_map_to_r_i_s", (DL_FUNC) &_cppcontainers_map_to_r_i_s, 8},
    {"_cppcontainers_map_to_r_i_b", (DL_FUNC) &_cppcontainers_map_to_r_i_b, 8},
    {"_cppcontainers_map_to_r_d_i", (DL_FUNC) &_cppcontainers_map_to_r_d_i, 8},
    {"_cppcontainers_map_to_r_d_d", (DL_FUNC) &_cppcontainers_map_to_r_d_d, 8},
    {"_cppcontainers_map_to_r_d_s", (DL_FUNC) &_cppcontainers_map_to_r_d_s, 8},
    {"_cppcontainers_map_to_r_d_b", (DL_FUNC) &_cppcontainers_map_to_r_d_b, 8},
    {"_cppcontainers_map_to_r_s_i", (DL_FUNC) &_cppcontainers_map_to_r_s_i, 8},
    {"_cppcontainers_map_to_r_s_d", (DL_FUNC) &_cppcontainers_map_to_r_s_d, 8},
    {"_cppcontainers_map_to_r_s_s", (DL_FUNC) &_cppcontainers_map_to_r_s_s, 8},
    {"_cppcontainers_map_to_r_s_b", (DL_FUNC) &_cppcontainers_map_to_r_s_b, 8},
    {"_cppcontainers_map_to_r_b_i", (DL_FUNC) &_cppcontainers_map_to_r_b_i, 8},
    {"_cppcontainers_map_to_r_b_d", (DL_FUNC) &_cppcontainers_map_to_r_b_d, 8},
    {"_cppcontainers_map_to_r_b_s", (DL_FUNC) &_cppcontainers_map_to_r_b_s, 8},
    {"_cppcontainers_map_to_r_b_b", (DL_FUNC) &_cppcontainers_map_to_r_b_b, 8},
    {"_cppcontainers_unordered_map_to_r_i_i", (DL_FUNC) &_cppcontainers_unordered_map_to_r_i_i, 2},
    {"_cppcontainers_unordered_map_to_r_i_d", (DL_FUNC) &_cppcontainers_unordered_map_to_r_i_d, 2},
    {"_cppcontainers_unordered_map_to_r_i_s", (DL_FUNC) &_cppcontainers_unordered_map_to_r_i_s, 2},
    {"_cppcontainers_unordered_map_to_r_i_b", (DL_FUNC) &_cppcontainers_unordered_map_to_r_i_b, 2},
    {"_cppcontainers_unordered_map_to_r_d_i", (DL_FUNC) &_cppcontainers_unordered_map_to_r_d_i, 2},
    {"_cppcontainers_unordered_map_to_r_d_d", (DL_FUNC) &_cppcontainers_unordered_map_to_r_d_d, 2},
    {"_cppcontainers_unordered_map_to_r_d_s", (DL_FUNC) &_cppcontainers_unordered_map_to_r_d_s, 2},
    {"_cppcontainers_unordered_map_to_r_d_b", (DL_FUNC) &_cppcontainers_unordered_map_to_r_d_b, 2},
    {"_cppcontainers_unordered_map_to_r_s_i", (DL_FUNC) &_cppcontainers_unordered_map_to_r_s_i, 2},
    {"_cppcontainers_unordered_map_to_r_s_d", (DL_FUNC) &_cppcontainers_unordered_map_to_r_s_d, 2},
    {"_cppcontainers_unordered_map_to_r_s_s", (DL_FUNC) &_cppcontainers_unordered_map_to_r_s_s, 2},
    {"_cppcontainers_unordered_map_to_r_s_b", (DL_FUNC) &_cppcontainers_unordered_map_to_r_s_b, 2},
    {"_cppcontainers_unordered_map_to_r_b_i", (DL_FUNC) &_cppcontainers_unordered_map_to_r_b_i, 2},
    {"_cppcontainers_unordered_map_to_r_b_d", (DL_FUNC) &_cppcontainers_unordered_map_to_r_b_d, 2},
    {"_cppcontainers_unordered_map_to_r_b_s", (DL_FUNC) &_cppcontainers_unordered_map_to_r_b_s, 2},
    {"_cppcontainers_unordered_map_to_r_b_b", (DL_FUNC) &_cppcontainers_unordered_map_to_r_b_b, 2},
    {"_cppcontainers_multimap_to_r_i_i", (DL_FUNC) &_cppcontainers_multimap_to_r_i_i, 8},
    {"_cppcontainers_multimap_to_r_i_d", (DL_FUNC) &_cppcontainers_multimap_to_r_i_d, 8},
    {"_cppcontainers_multimap_to_r_i_s", (DL_FUNC) &_cppcontainers_multimap_to_r_i_s, 8},
    {"_cppcontainers_multimap_to_r_i_b", (DL_FUNC) &_cppcontainers_multimap_to_r_i_b, 8},
    {"_cppcontainers_multimap_to_r_d_i", (DL_FUNC) &_cppcontainers_multimap_to_r_d_i, 8},
    {"_cppcontainers_multimap_to_r_d_d", (DL_FUNC) &_cppcontainers_multimap_to_r_d_d, 8},
    {"_cppcontainers_multimap_to_r_d_s", (DL_FUNC) &_cppcontainers_multimap_to_r_d_s, 8},
    {"_cppcontainers_multimap_to_r_d_b", (DL_FUNC) &_cppcontainers_multimap_to_r_d_b, 8},
    {"_cppcontainers_multimap_to_r_s_i", (DL_FUNC) &_cppcontainers_multimap_to_r_s_i, 8},
    {"_cppcontainers_multimap_to_r_s_d", (DL_FUNC) &_cppcontainers_multimap_to_r_s_d, 8},
    {"_cppcontainers_multimap_to_r_s_s", (DL_FUNC) &_cppcontainers_multimap_to_r_s_s, 8},
    {"_cppcontainers_multimap_to_r_s_b", (DL_FUNC) &_cppcontainers_multimap_to_r_s_b, 8},
    {"_cppcontainers_multimap_to_r_b_i", (DL_FUNC) &_cppcontainers_multimap_to_r_b_i, 8},
    {"_cppcontainers_multimap_to_r_b_d", (DL_FUNC) &_cppcontainers_multimap_to_r_b_d, 8},
    {"_cppcontainers_multimap_to_r_b_s", (DL_FUNC) &_cppcontainers_multimap_to_r_b_s, 8},
    {"_cppcontainers_multimap_to_r_b_b", (DL_FUNC) &_cppcontainers_multimap_to_r_b_b, 8},
    {"_cppcontainers_unordered_multimap_to_r_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_i_i, 2},
    {"_cppcontainers_unordered_multimap_to_r_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_i_d, 2},
    {"_cppcontainers_unordered_multimap_to_r_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_i_s, 2},
    {"_cppcontainers_unordered_multimap_to_r_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_i_b, 2},
    {"_cppcontainers_unordered_multimap_to_r_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_d_i, 2},
    {"_cppcontainers_unordered_multimap_to_r_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_d_d, 2},
    {"_cppcontainers_unordered_multimap_to_r_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_d_s, 2},
    {"_cppcontainers_unordered_multimap_to_r_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_d_b, 2},
    {"_cppcontainers_unordered_multimap_to_r_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_s_i, 2},
    {"_cppcontainers_unordered_multimap_to_r_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_s_d, 2},
    {"_cppcontainers_unordered_multimap_to_r_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_s_s, 2},
    {"_cppcontainers_unordered_multimap_to_r_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_s_b, 2},
    {"_cppcontainers_unordered_multimap_to_r_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_b_i, 2},
    {"_cppcontainers_unordered_multimap_to_r_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_b_d, 2},
    {"_cppcontainers_unordered_multimap_to_r_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_b_s, 2},
    {"_cppcontainers_unordered_multimap_to_r_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_to_r_b_b, 2},
    {"_cppcontainers_stack_to_r_i", (DL_FUNC) &_cppcontainers_stack_to_r_i, 2},
    {"_cppcontainers_stack_to_r_d", (DL_FUNC) &_cppcontainers_stack_to_r_d, 2},
    {"_cppcontainers_stack_to_r_s", (DL_FUNC) &_cppcontainers_stack_to_r_s, 2},
    {"_cppcontainers_stack_to_r_b", (DL_FUNC) &_cppcontainers_stack_to_r_b, 2},
    {"_cppcontainers_queue_to_r_i", (DL_FUNC) &_cppcontainers_queue_to_r_i, 2},
    {"_cppcontainers_queue_to_r_d", (DL_FUNC) &_cppcontainers_queue_to_r_d, 2},
    {"_cppcontainers_queue_to_r_s", (DL_FUNC) &_cppcontainers_queue_to_r_s, 2},
    {"_cppcontainers_queue_to_r_b", (DL_FUNC) &_cppcontainers_queue_to_r_b, 2},
    {"_cppcontainers_priority_queue_to_r_i_d", (DL_FUNC) &_cppcontainers_priority_queue_to_r_i_d, 2},
    {"_cppcontainers_priority_queue_to_r_d_d", (DL_FUNC) &_cppcontainers_priority_queue_to_r_d_d, 2},
    {"_cppcontainers_priority_queue_to_r_s_d", (DL_FUNC) &_cppcontainers_priority_queue_to_r_s_d, 2},
    {"_cppcontainers_priority_queue_to_r_b_d", (DL_FUNC) &_cppcontainers_priority_queue_to_r_b_d, 2},
    {"_cppcontainers_priority_queue_to_r_i_a", (DL_FUNC) &_cppcontainers_priority_queue_to_r_i_a, 2},
    {"_cppcontainers_priority_queue_to_r_d_a", (DL_FUNC) &_cppcontainers_priority_queue_to_r_d_a, 2},
    {"_cppcontainers_priority_queue_to_r_s_a", (DL_FUNC) &_cppcontainers_priority_queue_to_r_s_a, 2},
    {"_cppcontainers_priority_queue_to_r_b_a", (DL_FUNC) &_cppcontainers_priority_queue_to_r_b_a, 2},
    {"_cppcontainers_vector_to_r_i", (DL_FUNC) &_cppcontainers_vector_to_r_i, 8},
    {"_cppcontainers_vector_to_r_d", (DL_FUNC) &_cppcontainers_vector_to_r_d, 8},
    {"_cppcontainers_vector_to_r_s", (DL_FUNC) &_cppcontainers_vector_to_r_s, 8},
    {"_cppcontainers_vector_to_r_b", (DL_FUNC) &_cppcontainers_vector_to_r_b, 8},
    {"_cppcontainers_deque_to_r_i", (DL_FUNC) &_cppcontainers_deque_to_r_i, 8},
    {"_cppcontainers_deque_to_r_d", (DL_FUNC) &_cppcontainers_deque_to_r_d, 8},
    {"_cppcontainers_deque_to_r_s", (DL_FUNC) &_cppcontainers_deque_to_r_s, 8},
    {"_cppcontainers_deque_to_r_b", (DL_FUNC) &_cppcontainers_deque_to_r_b, 8},
    {"_cppcontainers_forward_list_to_r_i", (DL_FUNC) &_cppcontainers_forward_list_to_r_i, 2},
    {"_cppcontainers_forward_list_to_r_d", (DL_FUNC) &_cppcontainers_forward_list_to_r_d, 2},
    {"_cppcontainers_forward_list_to_r_s", (DL_FUNC) &_cppcontainers_forward_list_to_r_s, 2},
    {"_cppcontainers_forward_list_to_r_b", (DL_FUNC) &_cppcontainers_forward_list_to_r_b, 2},
    {"_cppcontainers_list_to_r_i", (DL_FUNC) &_cppcontainers_list_to_r_i, 3},
    {"_cppcontainers_list_to_r_d", (DL_FUNC) &_cppcontainers_list_to_r_d, 3},
    {"_cppcontainers_list_to_r_s", (DL_FUNC) &_cppcontainers_list_to_r_s, 3},
    {"_cppcontainers_list_to_r_b", (DL_FUNC) &_cppcontainers_list_to_r_b, 3},
    {"_cppcontainers_stack_top_i", (DL_FUNC) &_cppcontainers_stack_top_i, 1},
    {"_cppcontainers_stack_top_d", (DL_FUNC) &_cppcontainers_stack_top_d, 1},
    {"_cppcontainers_stack_top_s", (DL_FUNC) &_cppcontainers_stack_top_s, 1},
    {"_cppcontainers_stack_top_b", (DL_FUNC) &_cppcontainers_stack_top_b, 1},
    {"_cppcontainers_priority_queue_top_i_d", (DL_FUNC) &_cppcontainers_priority_queue_top_i_d, 1},
    {"_cppcontainers_priority_queue_top_d_d", (DL_FUNC) &_cppcontainers_priority_queue_top_d_d, 1},
    {"_cppcontainers_priority_queue_top_s_d", (DL_FUNC) &_cppcontainers_priority_queue_top_s_d, 1},
    {"_cppcontainers_priority_queue_top_b_d", (DL_FUNC) &_cppcontainers_priority_queue_top_b_d, 1},
    {"_cppcontainers_priority_queue_top_i_a", (DL_FUNC) &_cppcontainers_priority_queue_top_i_a, 1},
    {"_cppcontainers_priority_queue_top_d_a", (DL_FUNC) &_cppcontainers_priority_queue_top_d_a, 1},
    {"_cppcontainers_priority_queue_top_s_a", (DL_FUNC) &_cppcontainers_priority_queue_top_s_a, 1},
    {"_cppcontainers_priority_queue_top_b_a", (DL_FUNC) &_cppcontainers_priority_queue_top_b_a, 1},
    {"_cppcontainers_map_try_emplace_i_i", (DL_FUNC) &_cppcontainers_map_try_emplace_i_i, 3},
    {"_cppcontainers_map_try_emplace_i_d", (DL_FUNC) &_cppcontainers_map_try_emplace_i_d, 3},
    {"_cppcontainers_map_try_emplace_i_s", (DL_FUNC) &_cppcontainers_map_try_emplace_i_s, 3},
    {"_cppcontainers_map_try_emplace_i_b", (DL_FUNC) &_cppcontainers_map_try_emplace_i_b, 3},
    {"_cppcontainers_map_try_emplace_d_i", (DL_FUNC) &_cppcontainers_map_try_emplace_d_i, 3},
    {"_cppcontainers_map_try_emplace_d_d", (DL_FUNC) &_cppcontainers_map_try_emplace_d_d, 3},
    {"_cppcontainers_map_try_emplace_d_s", (DL_FUNC) &_cppcontainers_map_try_emplace_d_s, 3},
    {"_cppcontainers_map_try_emplace_d_b", (DL_FUNC) &_cppcontainers_map_try_emplace_d_b, 3},
    {"_cppcontainers_map_try_emplace_s_i", (DL_FUNC) &_cppcontainers_map_try_emplace_s_i, 3},
    {"_cppcontainers_map_try_emplace_s_d", (DL_FUNC) &_cppcontainers_map_try_emplace_s_d, 3},
    {"_cppcontainers_map_try_emplace_s_s", (DL_FUNC) &_cppcontainers_map_try_emplace_s_s, 3},
    {"_cppcontainers_map_try_emplace_s_b", (DL_FUNC) &_cppcontainers_map_try_emplace_s_b, 3},
    {"_cppcontainers_map_try_emplace_b_i", (DL_FUNC) &_cppcontainers_map_try_emplace_b_i, 3},
    {"_cppcontainers_map_try_emplace_b_d", (DL_FUNC) &_cppcontainers_map_try_emplace_b_d, 3},
    {"_cppcontainers_map_try_emplace_b_s", (DL_FUNC) &_cppcontainers_map_try_emplace_b_s, 3},
    {"_cppcontainers_map_try_emplace_b_b", (DL_FUNC) &_cppcontainers_map_try_emplace_b_b, 3},
    {"_cppcontainers_unordered_map_try_emplace_i_i", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_i_i, 3},
    {"_cppcontainers_unordered_map_try_emplace_i_d", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_i_d, 3},
    {"_cppcontainers_unordered_map_try_emplace_i_s", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_i_s, 3},
    {"_cppcontainers_unordered_map_try_emplace_i_b", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_i_b, 3},
    {"_cppcontainers_unordered_map_try_emplace_d_i", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_d_i, 3},
    {"_cppcontainers_unordered_map_try_emplace_d_d", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_d_d, 3},
    {"_cppcontainers_unordered_map_try_emplace_d_s", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_d_s, 3},
    {"_cppcontainers_unordered_map_try_emplace_d_b", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_d_b, 3},
    {"_cppcontainers_unordered_map_try_emplace_s_i", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_s_i, 3},
    {"_cppcontainers_unordered_map_try_emplace_s_d", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_s_d, 3},
    {"_cppcontainers_unordered_map_try_emplace_s_s", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_s_s, 3},
    {"_cppcontainers_unordered_map_try_emplace_s_b", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_s_b, 3},
    {"_cppcontainers_unordered_map_try_emplace_b_i", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_b_i, 3},
    {"_cppcontainers_unordered_map_try_emplace_b_d", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_b_d, 3},
    {"_cppcontainers_unordered_map_try_emplace_b_s", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_b_s, 3},
    {"_cppcontainers_unordered_map_try_emplace_b_b", (DL_FUNC) &_cppcontainers_unordered_map_try_emplace_b_b, 3},
    {"_cppcontainers_forward_list_unique_i", (DL_FUNC) &_cppcontainers_forward_list_unique_i, 1},
    {"_cppcontainers_forward_list_unique_d", (DL_FUNC) &_cppcontainers_forward_list_unique_d, 1},
    {"_cppcontainers_forward_list_unique_s", (DL_FUNC) &_cppcontainers_forward_list_unique_s, 1},
    {"_cppcontainers_forward_list_unique_b", (DL_FUNC) &_cppcontainers_forward_list_unique_b, 1},
    {"_cppcontainers_list_unique_i", (DL_FUNC) &_cppcontainers_list_unique_i, 1},
    {"_cppcontainers_list_unique_d", (DL_FUNC) &_cppcontainers_list_unique_d, 1},
    {"_cppcontainers_list_unique_s", (DL_FUNC) &_cppcontainers_list_unique_s, 1},
    {"_cppcontainers_list_unique_b", (DL_FUNC) &_cppcontainers_list_unique_b, 1},
    {"_cppcontainers_unordered_map_i_i", (DL_FUNC) &_cppcontainers_unordered_map_i_i, 2},
    {"_cppcontainers_unordered_map_i_d", (DL_FUNC) &_cppcontainers_unordered_map_i_d, 2},
    {"_cppcontainers_unordered_map_i_s", (DL_FUNC) &_cppcontainers_unordered_map_i_s, 2},
    {"_cppcontainers_unordered_map_i_b", (DL_FUNC) &_cppcontainers_unordered_map_i_b, 2},
    {"_cppcontainers_unordered_map_d_i", (DL_FUNC) &_cppcontainers_unordered_map_d_i, 2},
    {"_cppcontainers_unordered_map_d_d", (DL_FUNC) &_cppcontainers_unordered_map_d_d, 2},
    {"_cppcontainers_unordered_map_d_s", (DL_FUNC) &_cppcontainers_unordered_map_d_s, 2},
    {"_cppcontainers_unordered_map_d_b", (DL_FUNC) &_cppcontainers_unordered_map_d_b, 2},
    {"_cppcontainers_unordered_map_s_i", (DL_FUNC) &_cppcontainers_unordered_map_s_i, 2},
    {"_cppcontainers_unordered_map_s_d", (DL_FUNC) &_cppcontainers_unordered_map_s_d, 2},
    {"_cppcontainers_unordered_map_s_s", (DL_FUNC) &_cppcontainers_unordered_map_s_s, 2},
    {"_cppcontainers_unordered_map_s_b", (DL_FUNC) &_cppcontainers_unordered_map_s_b, 2},
    {"_cppcontainers_unordered_map_b_i", (DL_FUNC) &_cppcontainers_unordered_map_b_i, 2},
    {"_cppcontainers_unordered_map_b_d", (DL_FUNC) &_cppcontainers_unordered_map_b_d, 2},
    {"_cppcontainers_unordered_map_b_s", (DL_FUNC) &_cppcontainers_unordered_map_b_s, 2},
    {"_cppcontainers_unordered_map_b_b", (DL_FUNC) &_cppcontainers_unordered_map_b_b, 2},
    {"_cppcontainers_unordered_multimap_i_i", (DL_FUNC) &_cppcontainers_unordered_multimap_i_i, 2},
    {"_cppcontainers_unordered_multimap_i_d", (DL_FUNC) &_cppcontainers_unordered_multimap_i_d, 2},
    {"_cppcontainers_unordered_multimap_i_s", (DL_FUNC) &_cppcontainers_unordered_multimap_i_s, 2},
    {"_cppcontainers_unordered_multimap_i_b", (DL_FUNC) &_cppcontainers_unordered_multimap_i_b, 2},
    {"_cppcontainers_unordered_multimap_d_i", (DL_FUNC) &_cppcontainers_unordered_multimap_d_i, 2},
    {"_cppcontainers_unordered_multimap_d_d", (DL_FUNC) &_cppcontainers_unordered_multimap_d_d, 2},
    {"_cppcontainers_unordered_multimap_d_s", (DL_FUNC) &_cppcontainers_unordered_multimap_d_s, 2},
    {"_cppcontainers_unordered_multimap_d_b", (DL_FUNC) &_cppcontainers_unordered_multimap_d_b, 2},
    {"_cppcontainers_unordered_multimap_s_i", (DL_FUNC) &_cppcontainers_unordered_multimap_s_i, 2},
    {"_cppcontainers_unordered_multimap_s_d", (DL_FUNC) &_cppcontainers_unordered_multimap_s_d, 2},
    {"_cppcontainers_unordered_multimap_s_s", (DL_FUNC) &_cppcontainers_unordered_multimap_s_s, 2},
    {"_cppcontainers_unordered_multimap_s_b", (DL_FUNC) &_cppcontainers_unordered_multimap_s_b, 2},
    {"_cppcontainers_unordered_multimap_b_i", (DL_FUNC) &_cppcontainers_unordered_multimap_b_i, 2},
    {"_cppcontainers_unordered_multimap_b_d", (DL_FUNC) &_cppcontainers_unordered_multimap_b_d, 2},
    {"_cppcontainers_unordered_multimap_b_s", (DL_FUNC) &_cppcontainers_unordered_multimap_b_s, 2},
    {"_cppcontainers_unordered_multimap_b_b", (DL_FUNC) &_cppcontainers_unordered_multimap_b_b, 2},
    {"_cppcontainers_unordered_multiset_i", (DL_FUNC) &_cppcontainers_unordered_multiset_i, 1},
    {"_cppcontainers_unordered_multiset_d", (DL_FUNC) &_cppcontainers_unordered_multiset_d, 1},
    {"_cppcontainers_unordered_multiset_s", (DL_FUNC) &_cppcontainers_unordered_multiset_s, 1},
    {"_cppcontainers_unordered_multiset_b", (DL_FUNC) &_cppcontainers_unordered_multiset_b, 1},
    {"_cppcontainers_unordered_set_i", (DL_FUNC) &_cppcontainers_unordered_set_i, 1},
    {"_cppcontainers_unordered_set_d", (DL_FUNC) &_cppcontainers_unordered_set_d, 1},
    {"_cppcontainers_unordered_set_s", (DL_FUNC) &_cppcontainers_unordered_set_s, 1},
    {"_cppcontainers_unordered_set_b", (DL_FUNC) &_cppcontainers_unordered_set_b, 1},
    {"_cppcontainers_vector_i", (DL_FUNC) &_cppcontainers_vector_i, 1},
    {"_cppcontainers_vector_d", (DL_FUNC) &_cppcontainers_vector_d, 1},
    {"_cppcontainers_vector_s", (DL_FUNC) &_cppcontainers_vector_s, 1},
    {"_cppcontainers_vector_b", (DL_FUNC) &_cppcontainers_vector_b, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppcontainers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
